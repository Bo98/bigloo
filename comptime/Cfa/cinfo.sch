;; ==========================================================
;; Class accessors
;; Bigloo (4.3b)
;; Inria -- Sophia Antipolis     Fri Apr 21 18:13:28 CEST 2017 
;; (bigloo.new -classgen Cfa/cinfo.scm)
;; ==========================================================

;; The directives
(directives

;; approx
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-approx::approx type1771::type type-locked?1772::bool allocs1773::obj top?1774::bool lost-stamp1775::long dup1776::obj)
    (inline approx?::bool ::obj)
    (approx-nil::approx)
    (inline approx-dup::obj ::approx)
    (inline approx-dup-set! ::approx ::obj)
    (inline approx-lost-stamp::long ::approx)
    (inline approx-lost-stamp-set! ::approx ::long)
    (inline approx-top?::bool ::approx)
    (inline approx-top?-set! ::approx ::bool)
    (inline approx-allocs::obj ::approx)
    (inline approx-type-locked?::bool ::approx)
    (inline approx-type::type ::approx)
    (inline approx-type-set! ::approx ::type))))

;; cfun/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cfun/Cinfo::cfun/Cinfo arity1757::long side-effect1758::obj predicate-of1759::obj stack-allocator1760::obj top?1761::bool the-closure1762::obj effect1763::obj failsafe1764::obj args-type1765::obj macro?1766::bool infix?1767::bool method1768::pair-nil approx1769::approx)
    (inline cfun/Cinfo?::bool ::obj)
    (cfun/Cinfo-nil::cfun/Cinfo)
    (inline cfun/Cinfo-approx::approx ::cfun/Cinfo)
    (inline cfun/Cinfo-method::pair-nil ::cfun/Cinfo)
    (inline cfun/Cinfo-method-set! ::cfun/Cinfo ::pair-nil)
    (inline cfun/Cinfo-infix?::bool ::cfun/Cinfo)
    (inline cfun/Cinfo-infix?-set! ::cfun/Cinfo ::bool)
    (inline cfun/Cinfo-macro?::bool ::cfun/Cinfo)
    (inline cfun/Cinfo-args-type::obj ::cfun/Cinfo)
    (inline cfun/Cinfo-failsafe::obj ::cfun/Cinfo)
    (inline cfun/Cinfo-failsafe-set! ::cfun/Cinfo ::obj)
    (inline cfun/Cinfo-effect::obj ::cfun/Cinfo)
    (inline cfun/Cinfo-effect-set! ::cfun/Cinfo ::obj)
    (inline cfun/Cinfo-the-closure::obj ::cfun/Cinfo)
    (inline cfun/Cinfo-the-closure-set! ::cfun/Cinfo ::obj)
    (inline cfun/Cinfo-top?::bool ::cfun/Cinfo)
    (inline cfun/Cinfo-top?-set! ::cfun/Cinfo ::bool)
    (inline cfun/Cinfo-stack-allocator::obj ::cfun/Cinfo)
    (inline cfun/Cinfo-stack-allocator-set! ::cfun/Cinfo ::obj)
    (inline cfun/Cinfo-predicate-of::obj ::cfun/Cinfo)
    (inline cfun/Cinfo-predicate-of-set! ::cfun/Cinfo ::obj)
    (inline cfun/Cinfo-side-effect::obj ::cfun/Cinfo)
    (inline cfun/Cinfo-side-effect-set! ::cfun/Cinfo ::obj)
    (inline cfun/Cinfo-arity::long ::cfun/Cinfo))))

;; extern-sfun/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-extern-sfun/Cinfo::extern-sfun/Cinfo arity1735::long side-effect1736::obj predicate-of1737::obj stack-allocator1738::obj top?1739::bool the-closure1740::obj effect1741::obj failsafe1742::obj property1743::obj args1744::obj args-name1745::obj body1746::obj class1747::obj dsssl-keywords1748::obj loc1749::obj optionals1750::obj keys1751::obj the-closure-global1752::obj strength1753::symbol polymorphic?1754::bool approx1755::approx)
    (inline extern-sfun/Cinfo?::bool ::obj)
    (extern-sfun/Cinfo-nil::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-approx::approx ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-polymorphic?::bool ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-polymorphic?-set! ::extern-sfun/Cinfo ::bool)
    (inline extern-sfun/Cinfo-strength::symbol ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-strength-set! ::extern-sfun/Cinfo ::symbol)
    (inline extern-sfun/Cinfo-the-closure-global::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-the-closure-global-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-keys::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-optionals::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-loc::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-loc-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-dsssl-keywords::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-dsssl-keywords-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-class::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-class-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-body::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-body-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-args-name::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-args::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-args-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-property::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-property-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-failsafe::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-failsafe-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-effect::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-effect-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-the-closure::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-the-closure-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-top?::bool ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-top?-set! ::extern-sfun/Cinfo ::bool)
    (inline extern-sfun/Cinfo-stack-allocator::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-stack-allocator-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-predicate-of::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-predicate-of-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-side-effect::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-side-effect-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-arity::long ::extern-sfun/Cinfo))))

;; intern-sfun/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-intern-sfun/Cinfo::intern-sfun/Cinfo arity1712::long side-effect1713::obj predicate-of1714::obj stack-allocator1715::obj top?1716::bool the-closure1717::obj effect1718::obj failsafe1719::obj property1720::obj args1721::obj args-name1722::obj body1723::obj class1724::obj dsssl-keywords1725::obj loc1726::obj optionals1727::obj keys1728::obj the-closure-global1729::obj strength1730::symbol polymorphic?1731::bool approx1732::approx stamp1733::long)
    (inline intern-sfun/Cinfo?::bool ::obj)
    (intern-sfun/Cinfo-nil::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-stamp::long ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-stamp-set! ::intern-sfun/Cinfo ::long)
    (inline intern-sfun/Cinfo-approx::approx ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-polymorphic?::bool ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-polymorphic?-set! ::intern-sfun/Cinfo ::bool)
    (inline intern-sfun/Cinfo-strength::symbol ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-strength-set! ::intern-sfun/Cinfo ::symbol)
    (inline intern-sfun/Cinfo-the-closure-global::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-the-closure-global-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-keys::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-optionals::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-loc::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-loc-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-dsssl-keywords::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-dsssl-keywords-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-class::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-class-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-body::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-body-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-args-name::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-args::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-args-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-property::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-property-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-failsafe::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-failsafe-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-effect::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-effect-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-the-closure::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-the-closure-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-top?::bool ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-top?-set! ::intern-sfun/Cinfo ::bool)
    (inline intern-sfun/Cinfo-stack-allocator::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-stack-allocator-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-predicate-of::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-predicate-of-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-side-effect::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-side-effect-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-arity::long ::intern-sfun/Cinfo))))

;; scnst/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-scnst/Cinfo::scnst/Cinfo node1706::obj class1707::obj loc1709::obj approx1710::approx)
    (inline scnst/Cinfo?::bool ::obj)
    (scnst/Cinfo-nil::scnst/Cinfo)
    (inline scnst/Cinfo-approx::approx ::scnst/Cinfo)
    (inline scnst/Cinfo-loc::obj ::scnst/Cinfo)
    (inline scnst/Cinfo-loc-set! ::scnst/Cinfo ::obj)
    (inline scnst/Cinfo-class::obj ::scnst/Cinfo)
    (inline scnst/Cinfo-class-set! ::scnst/Cinfo ::obj)
    (inline scnst/Cinfo-node::obj ::scnst/Cinfo))))

;; pre-clo-env
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-pre-clo-env::pre-clo-env loc1704::obj)
    (inline pre-clo-env?::bool ::obj)
    (pre-clo-env-nil::pre-clo-env)
    (inline pre-clo-env-loc::obj ::pre-clo-env)
    (inline pre-clo-env-loc-set! ::pre-clo-env ::obj))))

;; svar/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-svar/Cinfo::svar/Cinfo loc1699::obj approx1700::approx clo-env?1701::bool stamp1702::long)
    (inline svar/Cinfo?::bool ::obj)
    (svar/Cinfo-nil::svar/Cinfo)
    (inline svar/Cinfo-stamp::long ::svar/Cinfo)
    (inline svar/Cinfo-stamp-set! ::svar/Cinfo ::long)
    (inline svar/Cinfo-clo-env?::bool ::svar/Cinfo)
    (inline svar/Cinfo-clo-env?-set! ::svar/Cinfo ::bool)
    (inline svar/Cinfo-approx::approx ::svar/Cinfo)
    (inline svar/Cinfo-loc::obj ::svar/Cinfo)
    (inline svar/Cinfo-loc-set! ::svar/Cinfo ::obj))))

;; cvar/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cvar/Cinfo::cvar/Cinfo macro?1696::bool approx1697::approx)
    (inline cvar/Cinfo?::bool ::obj)
    (cvar/Cinfo-nil::cvar/Cinfo)
    (inline cvar/Cinfo-approx::approx ::cvar/Cinfo)
    (inline cvar/Cinfo-macro?::bool ::cvar/Cinfo))))

;; sexit/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-sexit/Cinfo::sexit/Cinfo handler1692::obj detached?1693::bool approx1694::approx)
    (inline sexit/Cinfo?::bool ::obj)
    (sexit/Cinfo-nil::sexit/Cinfo)
    (inline sexit/Cinfo-approx::approx ::sexit/Cinfo)
    (inline sexit/Cinfo-detached?::bool ::sexit/Cinfo)
    (inline sexit/Cinfo-detached?-set! ::sexit/Cinfo ::bool)
    (inline sexit/Cinfo-handler::obj ::sexit/Cinfo)
    (inline sexit/Cinfo-handler-set! ::sexit/Cinfo ::obj))))

;; reshaped-local
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-reshaped-local::reshaped-local id1679::symbol name1680::obj type1681::type value1682::value access1683::obj fast-alpha1684::obj removable1685::obj occurrence1686::long occurrencew1687::long user?1688::bool key1689::long binding-value1690::obj)
    (inline reshaped-local?::bool ::obj)
    (reshaped-local-nil::reshaped-local)
    (inline reshaped-local-binding-value::obj ::reshaped-local)
    (inline reshaped-local-key::long ::reshaped-local)
    (inline reshaped-local-user?::bool ::reshaped-local)
    (inline reshaped-local-user?-set! ::reshaped-local ::bool)
    (inline reshaped-local-occurrencew::long ::reshaped-local)
    (inline reshaped-local-occurrencew-set! ::reshaped-local ::long)
    (inline reshaped-local-occurrence::long ::reshaped-local)
    (inline reshaped-local-occurrence-set! ::reshaped-local ::long)
    (inline reshaped-local-removable::obj ::reshaped-local)
    (inline reshaped-local-removable-set! ::reshaped-local ::obj)
    (inline reshaped-local-fast-alpha::obj ::reshaped-local)
    (inline reshaped-local-fast-alpha-set! ::reshaped-local ::obj)
    (inline reshaped-local-access::obj ::reshaped-local)
    (inline reshaped-local-access-set! ::reshaped-local ::obj)
    (inline reshaped-local-value::value ::reshaped-local)
    (inline reshaped-local-value-set! ::reshaped-local ::value)
    (inline reshaped-local-type::type ::reshaped-local)
    (inline reshaped-local-type-set! ::reshaped-local ::type)
    (inline reshaped-local-name::obj ::reshaped-local)
    (inline reshaped-local-name-set! ::reshaped-local ::obj)
    (inline reshaped-local-id::symbol ::reshaped-local))))

;; reshaped-global
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-reshaped-global::reshaped-global id1658::symbol name1659::obj type1660::type value1661::value access1662::obj fast-alpha1663::obj removable1664::obj occurrence1665::long occurrencew1666::long user?1667::bool module1668::symbol import1669::obj evaluable?1670::bool eval?1671::bool library1672::obj pragma1673::obj src1674::obj jvm-type-name1675::bstring init1676::obj alias1677::obj)
    (inline reshaped-global?::bool ::obj)
    (reshaped-global-nil::reshaped-global)
    (inline reshaped-global-alias::obj ::reshaped-global)
    (inline reshaped-global-alias-set! ::reshaped-global ::obj)
    (inline reshaped-global-init::obj ::reshaped-global)
    (inline reshaped-global-init-set! ::reshaped-global ::obj)
    (inline reshaped-global-jvm-type-name::bstring ::reshaped-global)
    (inline reshaped-global-jvm-type-name-set! ::reshaped-global ::bstring)
    (inline reshaped-global-src::obj ::reshaped-global)
    (inline reshaped-global-src-set! ::reshaped-global ::obj)
    (inline reshaped-global-pragma::obj ::reshaped-global)
    (inline reshaped-global-pragma-set! ::reshaped-global ::obj)
    (inline reshaped-global-library::obj ::reshaped-global)
    (inline reshaped-global-library-set! ::reshaped-global ::obj)
    (inline reshaped-global-eval?::bool ::reshaped-global)
    (inline reshaped-global-eval?-set! ::reshaped-global ::bool)
    (inline reshaped-global-evaluable?::bool ::reshaped-global)
    (inline reshaped-global-evaluable?-set! ::reshaped-global ::bool)
    (inline reshaped-global-import::obj ::reshaped-global)
    (inline reshaped-global-import-set! ::reshaped-global ::obj)
    (inline reshaped-global-module::symbol ::reshaped-global)
    (inline reshaped-global-module-set! ::reshaped-global ::symbol)
    (inline reshaped-global-user?::bool ::reshaped-global)
    (inline reshaped-global-user?-set! ::reshaped-global ::bool)
    (inline reshaped-global-occurrencew::long ::reshaped-global)
    (inline reshaped-global-occurrencew-set! ::reshaped-global ::long)
    (inline reshaped-global-occurrence::long ::reshaped-global)
    (inline reshaped-global-occurrence-set! ::reshaped-global ::long)
    (inline reshaped-global-removable::obj ::reshaped-global)
    (inline reshaped-global-removable-set! ::reshaped-global ::obj)
    (inline reshaped-global-fast-alpha::obj ::reshaped-global)
    (inline reshaped-global-fast-alpha-set! ::reshaped-global ::obj)
    (inline reshaped-global-access::obj ::reshaped-global)
    (inline reshaped-global-access-set! ::reshaped-global ::obj)
    (inline reshaped-global-value::value ::reshaped-global)
    (inline reshaped-global-value-set! ::reshaped-global ::value)
    (inline reshaped-global-type::type ::reshaped-global)
    (inline reshaped-global-type-set! ::reshaped-global ::type)
    (inline reshaped-global-name::obj ::reshaped-global)
    (inline reshaped-global-name-set! ::reshaped-global ::obj)
    (inline reshaped-global-id::symbol ::reshaped-global))))

;; atom/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-atom/Cinfo::atom/Cinfo loc1653::obj type1654::type value1655::obj approx1656::approx)
    (inline atom/Cinfo?::bool ::obj)
    (atom/Cinfo-nil::atom/Cinfo)
    (inline atom/Cinfo-approx::approx ::atom/Cinfo)
    (inline atom/Cinfo-value::obj ::atom/Cinfo)
    (inline atom/Cinfo-value-set! ::atom/Cinfo ::obj)
    (inline atom/Cinfo-type::type ::atom/Cinfo)
    (inline atom/Cinfo-type-set! ::atom/Cinfo ::type)
    (inline atom/Cinfo-loc::obj ::atom/Cinfo))))

;; kwote/node
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-kwote/node::kwote/node loc1648::obj type1649::type value1650::obj node1651::node)
    (inline kwote/node?::bool ::obj)
    (kwote/node-nil::kwote/node)
    (inline kwote/node-node::node ::kwote/node)
    (inline kwote/node-value::obj ::kwote/node)
    (inline kwote/node-type::type ::kwote/node)
    (inline kwote/node-type-set! ::kwote/node ::type)
    (inline kwote/node-loc::obj ::kwote/node))))

;; kwote/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-kwote/Cinfo::kwote/Cinfo loc1642::obj type1644::type value1645::obj approx1646::approx)
    (inline kwote/Cinfo?::bool ::obj)
    (kwote/Cinfo-nil::kwote/Cinfo)
    (inline kwote/Cinfo-approx::approx ::kwote/Cinfo)
    (inline kwote/Cinfo-value::obj ::kwote/Cinfo)
    (inline kwote/Cinfo-type::type ::kwote/Cinfo)
    (inline kwote/Cinfo-type-set! ::kwote/Cinfo ::type)
    (inline kwote/Cinfo-loc::obj ::kwote/Cinfo))))

;; app-ly/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-app-ly/Cinfo::app-ly/Cinfo loc1633::obj type1634::type fun1635::node arg1639::node approx1640::approx)
    (inline app-ly/Cinfo?::bool ::obj)
    (app-ly/Cinfo-nil::app-ly/Cinfo)
    (inline app-ly/Cinfo-approx::approx ::app-ly/Cinfo)
    (inline app-ly/Cinfo-arg::node ::app-ly/Cinfo)
    (inline app-ly/Cinfo-arg-set! ::app-ly/Cinfo ::node)
    (inline app-ly/Cinfo-fun::node ::app-ly/Cinfo)
    (inline app-ly/Cinfo-fun-set! ::app-ly/Cinfo ::node)
    (inline app-ly/Cinfo-type::type ::app-ly/Cinfo)
    (inline app-ly/Cinfo-type-set! ::app-ly/Cinfo ::type)
    (inline app-ly/Cinfo-loc::obj ::app-ly/Cinfo))))

;; funcall/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-funcall/Cinfo::funcall/Cinfo loc1620::obj type1621::type fun1623::node args1624::obj strength1625::symbol functions1626::obj approx1628::approx va-approx1629::approx arity-error-noticed?1630::bool type-error-noticed?1631::bool)
    (inline funcall/Cinfo?::bool ::obj)
    (funcall/Cinfo-nil::funcall/Cinfo)
    (inline funcall/Cinfo-type-error-noticed?::bool ::funcall/Cinfo)
    (inline funcall/Cinfo-type-error-noticed?-set! ::funcall/Cinfo ::bool)
    (inline funcall/Cinfo-arity-error-noticed?::bool ::funcall/Cinfo)
    (inline funcall/Cinfo-arity-error-noticed?-set! ::funcall/Cinfo ::bool)
    (inline funcall/Cinfo-va-approx::approx ::funcall/Cinfo)
    (inline funcall/Cinfo-approx::approx ::funcall/Cinfo)
    (inline funcall/Cinfo-functions::obj ::funcall/Cinfo)
    (inline funcall/Cinfo-functions-set! ::funcall/Cinfo ::obj)
    (inline funcall/Cinfo-strength::symbol ::funcall/Cinfo)
    (inline funcall/Cinfo-strength-set! ::funcall/Cinfo ::symbol)
    (inline funcall/Cinfo-args::obj ::funcall/Cinfo)
    (inline funcall/Cinfo-args-set! ::funcall/Cinfo ::obj)
    (inline funcall/Cinfo-fun::node ::funcall/Cinfo)
    (inline funcall/Cinfo-fun-set! ::funcall/Cinfo ::node)
    (inline funcall/Cinfo-type::type ::funcall/Cinfo)
    (inline funcall/Cinfo-type-set! ::funcall/Cinfo ::type)
    (inline funcall/Cinfo-loc::obj ::funcall/Cinfo))))

;; setq/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-setq/Cinfo::setq/Cinfo loc1614::obj type1615::type var1616::var value1617::node approx1618::approx)
    (inline setq/Cinfo?::bool ::obj)
    (setq/Cinfo-nil::setq/Cinfo)
    (inline setq/Cinfo-approx::approx ::setq/Cinfo)
    (inline setq/Cinfo-value::node ::setq/Cinfo)
    (inline setq/Cinfo-value-set! ::setq/Cinfo ::node)
    (inline setq/Cinfo-var::var ::setq/Cinfo)
    (inline setq/Cinfo-var-set! ::setq/Cinfo ::var)
    (inline setq/Cinfo-type::type ::setq/Cinfo)
    (inline setq/Cinfo-type-set! ::setq/Cinfo ::type)
    (inline setq/Cinfo-loc::obj ::setq/Cinfo))))

;; conditional/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-conditional/Cinfo::conditional/Cinfo loc1603::obj type1604::type side-effect1605::obj key1606::obj test1607::node true1608::node false1609::node approx1610::approx)
    (inline conditional/Cinfo?::bool ::obj)
    (conditional/Cinfo-nil::conditional/Cinfo)
    (inline conditional/Cinfo-approx::approx ::conditional/Cinfo)
    (inline conditional/Cinfo-false::node ::conditional/Cinfo)
    (inline conditional/Cinfo-false-set! ::conditional/Cinfo ::node)
    (inline conditional/Cinfo-true::node ::conditional/Cinfo)
    (inline conditional/Cinfo-true-set! ::conditional/Cinfo ::node)
    (inline conditional/Cinfo-test::node ::conditional/Cinfo)
    (inline conditional/Cinfo-test-set! ::conditional/Cinfo ::node)
    (inline conditional/Cinfo-key::obj ::conditional/Cinfo)
    (inline conditional/Cinfo-key-set! ::conditional/Cinfo ::obj)
    (inline conditional/Cinfo-side-effect::obj ::conditional/Cinfo)
    (inline conditional/Cinfo-side-effect-set! ::conditional/Cinfo ::obj)
    (inline conditional/Cinfo-type::type ::conditional/Cinfo)
    (inline conditional/Cinfo-type-set! ::conditional/Cinfo ::type)
    (inline conditional/Cinfo-loc::obj ::conditional/Cinfo))))

;; fail/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-fail/Cinfo::fail/Cinfo loc1596::obj type1597::type proc1598::node msg1599::node obj1600::node approx1601::approx)
    (inline fail/Cinfo?::bool ::obj)
    (fail/Cinfo-nil::fail/Cinfo)
    (inline fail/Cinfo-approx::approx ::fail/Cinfo)
    (inline fail/Cinfo-obj::node ::fail/Cinfo)
    (inline fail/Cinfo-obj-set! ::fail/Cinfo ::node)
    (inline fail/Cinfo-msg::node ::fail/Cinfo)
    (inline fail/Cinfo-msg-set! ::fail/Cinfo ::node)
    (inline fail/Cinfo-proc::node ::fail/Cinfo)
    (inline fail/Cinfo-proc-set! ::fail/Cinfo ::node)
    (inline fail/Cinfo-type::type ::fail/Cinfo)
    (inline fail/Cinfo-type-set! ::fail/Cinfo ::type)
    (inline fail/Cinfo-loc::obj ::fail/Cinfo))))

;; switch/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-switch/Cinfo::switch/Cinfo loc1587::obj type1588::type side-effect1589::obj key1590::obj test1591::node clauses1592::obj item-type1593::type approx1594::approx)
    (inline switch/Cinfo?::bool ::obj)
    (switch/Cinfo-nil::switch/Cinfo)
    (inline switch/Cinfo-approx::approx ::switch/Cinfo)
    (inline switch/Cinfo-item-type::type ::switch/Cinfo)
    (inline switch/Cinfo-item-type-set! ::switch/Cinfo ::type)
    (inline switch/Cinfo-clauses::obj ::switch/Cinfo)
    (inline switch/Cinfo-test::node ::switch/Cinfo)
    (inline switch/Cinfo-test-set! ::switch/Cinfo ::node)
    (inline switch/Cinfo-key::obj ::switch/Cinfo)
    (inline switch/Cinfo-key-set! ::switch/Cinfo ::obj)
    (inline switch/Cinfo-side-effect::obj ::switch/Cinfo)
    (inline switch/Cinfo-side-effect-set! ::switch/Cinfo ::obj)
    (inline switch/Cinfo-type::type ::switch/Cinfo)
    (inline switch/Cinfo-type-set! ::switch/Cinfo ::type)
    (inline switch/Cinfo-loc::obj ::switch/Cinfo))))

;; set-ex-it/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-set-ex-it/Cinfo::set-ex-it/Cinfo loc1581::obj type1582::type var1583::var body1584::node approx1585::approx)
    (inline set-ex-it/Cinfo?::bool ::obj)
    (set-ex-it/Cinfo-nil::set-ex-it/Cinfo)
    (inline set-ex-it/Cinfo-approx::approx ::set-ex-it/Cinfo)
    (inline set-ex-it/Cinfo-body::node ::set-ex-it/Cinfo)
    (inline set-ex-it/Cinfo-body-set! ::set-ex-it/Cinfo ::node)
    (inline set-ex-it/Cinfo-var::var ::set-ex-it/Cinfo)
    (inline set-ex-it/Cinfo-var-set! ::set-ex-it/Cinfo ::var)
    (inline set-ex-it/Cinfo-type::type ::set-ex-it/Cinfo)
    (inline set-ex-it/Cinfo-type-set! ::set-ex-it/Cinfo ::type)
    (inline set-ex-it/Cinfo-loc::obj ::set-ex-it/Cinfo))))

;; jump-ex-it/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-jump-ex-it/Cinfo::jump-ex-it/Cinfo loc1575::obj type1576::type exit1577::node value1578::node approx1579::approx)
    (inline jump-ex-it/Cinfo?::bool ::obj)
    (jump-ex-it/Cinfo-nil::jump-ex-it/Cinfo)
    (inline jump-ex-it/Cinfo-approx::approx ::jump-ex-it/Cinfo)
    (inline jump-ex-it/Cinfo-value::node ::jump-ex-it/Cinfo)
    (inline jump-ex-it/Cinfo-value-set! ::jump-ex-it/Cinfo ::node)
    (inline jump-ex-it/Cinfo-exit::node ::jump-ex-it/Cinfo)
    (inline jump-ex-it/Cinfo-exit-set! ::jump-ex-it/Cinfo ::node)
    (inline jump-ex-it/Cinfo-type::type ::jump-ex-it/Cinfo)
    (inline jump-ex-it/Cinfo-type-set! ::jump-ex-it/Cinfo ::type)
    (inline jump-ex-it/Cinfo-loc::obj ::jump-ex-it/Cinfo))))

;; pre-make-box
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-pre-make-box::pre-make-box loc1568::obj type1569::type side-effect1570::obj key1571::obj value1572::node vtype1573::type)
    (inline pre-make-box?::bool ::obj)
    (pre-make-box-nil::pre-make-box)
    (inline pre-make-box-vtype::type ::pre-make-box)
    (inline pre-make-box-vtype-set! ::pre-make-box ::type)
    (inline pre-make-box-value::node ::pre-make-box)
    (inline pre-make-box-value-set! ::pre-make-box ::node)
    (inline pre-make-box-key::obj ::pre-make-box)
    (inline pre-make-box-key-set! ::pre-make-box ::obj)
    (inline pre-make-box-side-effect::obj ::pre-make-box)
    (inline pre-make-box-side-effect-set! ::pre-make-box ::obj)
    (inline pre-make-box-type::type ::pre-make-box)
    (inline pre-make-box-type-set! ::pre-make-box ::type)
    (inline pre-make-box-loc::obj ::pre-make-box))))

;; make-box/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-make-box/Cinfo::make-box/Cinfo loc1560::obj type1561::type side-effect1562::obj key1563::obj value1564::node vtype1565::type approx1566::approx)
    (inline make-box/Cinfo?::bool ::obj)
    (make-box/Cinfo-nil::make-box/Cinfo)
    (inline make-box/Cinfo-approx::approx ::make-box/Cinfo)
    (inline make-box/Cinfo-vtype::type ::make-box/Cinfo)
    (inline make-box/Cinfo-vtype-set! ::make-box/Cinfo ::type)
    (inline make-box/Cinfo-value::node ::make-box/Cinfo)
    (inline make-box/Cinfo-value-set! ::make-box/Cinfo ::node)
    (inline make-box/Cinfo-key::obj ::make-box/Cinfo)
    (inline make-box/Cinfo-key-set! ::make-box/Cinfo ::obj)
    (inline make-box/Cinfo-side-effect::obj ::make-box/Cinfo)
    (inline make-box/Cinfo-side-effect-set! ::make-box/Cinfo ::obj)
    (inline make-box/Cinfo-type::type ::make-box/Cinfo)
    (inline make-box/Cinfo-type-set! ::make-box/Cinfo ::type)
    (inline make-box/Cinfo-loc::obj ::make-box/Cinfo))))

;; make-box/O-Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-make-box/O-Cinfo::make-box/O-Cinfo loc1551::obj type1552::type side-effect1553::obj key1554::obj value1555::node vtype1556::type approx1557::approx value-approx1558::approx)
    (inline make-box/O-Cinfo?::bool ::obj)
    (make-box/O-Cinfo-nil::make-box/O-Cinfo)
    (inline make-box/O-Cinfo-value-approx::approx ::make-box/O-Cinfo)
    (inline make-box/O-Cinfo-approx::approx ::make-box/O-Cinfo)
    (inline make-box/O-Cinfo-approx-set! ::make-box/O-Cinfo ::approx)
    (inline make-box/O-Cinfo-vtype::type ::make-box/O-Cinfo)
    (inline make-box/O-Cinfo-vtype-set! ::make-box/O-Cinfo ::type)
    (inline make-box/O-Cinfo-value::node ::make-box/O-Cinfo)
    (inline make-box/O-Cinfo-value-set! ::make-box/O-Cinfo ::node)
    (inline make-box/O-Cinfo-key::obj ::make-box/O-Cinfo)
    (inline make-box/O-Cinfo-key-set! ::make-box/O-Cinfo ::obj)
    (inline make-box/O-Cinfo-side-effect::obj ::make-box/O-Cinfo)
    (inline make-box/O-Cinfo-side-effect-set! ::make-box/O-Cinfo ::obj)
    (inline make-box/O-Cinfo-type::type ::make-box/O-Cinfo)
    (inline make-box/O-Cinfo-type-set! ::make-box/O-Cinfo ::type)
    (inline make-box/O-Cinfo-loc::obj ::make-box/O-Cinfo))))

;; box-set!/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-box-set!/Cinfo::box-set!/Cinfo loc1544::obj type1545::type var1546::var value1547::node vtype1548::type approx1549::approx)
    (inline box-set!/Cinfo?::bool ::obj)
    (box-set!/Cinfo-nil::box-set!/Cinfo)
    (inline box-set!/Cinfo-approx::approx ::box-set!/Cinfo)
    (inline box-set!/Cinfo-vtype::type ::box-set!/Cinfo)
    (inline box-set!/Cinfo-vtype-set! ::box-set!/Cinfo ::type)
    (inline box-set!/Cinfo-value::node ::box-set!/Cinfo)
    (inline box-set!/Cinfo-value-set! ::box-set!/Cinfo ::node)
    (inline box-set!/Cinfo-var::var ::box-set!/Cinfo)
    (inline box-set!/Cinfo-var-set! ::box-set!/Cinfo ::var)
    (inline box-set!/Cinfo-type::type ::box-set!/Cinfo)
    (inline box-set!/Cinfo-type-set! ::box-set!/Cinfo ::type)
    (inline box-set!/Cinfo-loc::obj ::box-set!/Cinfo))))

;; box-ref/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-box-ref/Cinfo::box-ref/Cinfo loc1536::obj type1537::type side-effect1538::obj key1539::obj var1540::var vtype1541::type approx1542::approx)
    (inline box-ref/Cinfo?::bool ::obj)
    (box-ref/Cinfo-nil::box-ref/Cinfo)
    (inline box-ref/Cinfo-approx::approx ::box-ref/Cinfo)
    (inline box-ref/Cinfo-vtype::type ::box-ref/Cinfo)
    (inline box-ref/Cinfo-vtype-set! ::box-ref/Cinfo ::type)
    (inline box-ref/Cinfo-var::var ::box-ref/Cinfo)
    (inline box-ref/Cinfo-var-set! ::box-ref/Cinfo ::var)
    (inline box-ref/Cinfo-key::obj ::box-ref/Cinfo)
    (inline box-ref/Cinfo-key-set! ::box-ref/Cinfo ::obj)
    (inline box-ref/Cinfo-side-effect::obj ::box-ref/Cinfo)
    (inline box-ref/Cinfo-side-effect-set! ::box-ref/Cinfo ::obj)
    (inline box-ref/Cinfo-type::type ::box-ref/Cinfo)
    (inline box-ref/Cinfo-type-set! ::box-ref/Cinfo ::type)
    (inline box-ref/Cinfo-loc::obj ::box-ref/Cinfo))))

;; box-set!/O-Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-box-set!/O-Cinfo::box-set!/O-Cinfo loc1529::obj type1530::type var1531::var value1532::node vtype1533::type approx1534::approx)
    (inline box-set!/O-Cinfo?::bool ::obj)
    (box-set!/O-Cinfo-nil::box-set!/O-Cinfo)
    (inline box-set!/O-Cinfo-approx::approx ::box-set!/O-Cinfo)
    (inline box-set!/O-Cinfo-vtype::type ::box-set!/O-Cinfo)
    (inline box-set!/O-Cinfo-vtype-set! ::box-set!/O-Cinfo ::type)
    (inline box-set!/O-Cinfo-value::node ::box-set!/O-Cinfo)
    (inline box-set!/O-Cinfo-value-set! ::box-set!/O-Cinfo ::node)
    (inline box-set!/O-Cinfo-var::var ::box-set!/O-Cinfo)
    (inline box-set!/O-Cinfo-var-set! ::box-set!/O-Cinfo ::var)
    (inline box-set!/O-Cinfo-type::type ::box-set!/O-Cinfo)
    (inline box-set!/O-Cinfo-type-set! ::box-set!/O-Cinfo ::type)
    (inline box-set!/O-Cinfo-loc::obj ::box-set!/O-Cinfo))))

;; box-ref/O-Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-box-ref/O-Cinfo::box-ref/O-Cinfo loc1519::obj type1520::type side-effect1521::obj key1522::obj var1524::var vtype1525::type approx1526::approx)
    (inline box-ref/O-Cinfo?::bool ::obj)
    (box-ref/O-Cinfo-nil::box-ref/O-Cinfo)
    (inline box-ref/O-Cinfo-approx::approx ::box-ref/O-Cinfo)
    (inline box-ref/O-Cinfo-vtype::type ::box-ref/O-Cinfo)
    (inline box-ref/O-Cinfo-vtype-set! ::box-ref/O-Cinfo ::type)
    (inline box-ref/O-Cinfo-var::var ::box-ref/O-Cinfo)
    (inline box-ref/O-Cinfo-var-set! ::box-ref/O-Cinfo ::var)
    (inline box-ref/O-Cinfo-key::obj ::box-ref/O-Cinfo)
    (inline box-ref/O-Cinfo-key-set! ::box-ref/O-Cinfo ::obj)
    (inline box-ref/O-Cinfo-side-effect::obj ::box-ref/O-Cinfo)
    (inline box-ref/O-Cinfo-side-effect-set! ::box-ref/O-Cinfo ::obj)
    (inline box-ref/O-Cinfo-type::type ::box-ref/O-Cinfo)
    (inline box-ref/O-Cinfo-type-set! ::box-ref/O-Cinfo ::type)
    (inline box-ref/O-Cinfo-loc::obj ::box-ref/O-Cinfo)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; approx
(define-inline (make-approx::approx type1771::type type-locked?1772::bool allocs1773::obj top?1774::bool lost-stamp1775::long dup1776::obj) (instantiate::approx (type type1771) (type-locked? type-locked?1772) (allocs allocs1773) (top? top?1774) (lost-stamp lost-stamp1775) (dup dup1776)))
(define-inline (approx?::bool obj::obj) ((@ isa? __object) obj (@ approx cfa_info)))
(define (approx-nil::approx) (class-nil (@ approx cfa_info)))
(define-inline (approx-dup::obj o::approx) (-> |#!bigloo_wallow| o dup))
(define-inline (approx-dup-set! o::approx v::obj) (set! (-> |#!bigloo_wallow| o dup) v))
(define-inline (approx-lost-stamp::long o::approx) (-> |#!bigloo_wallow| o lost-stamp))
(define-inline (approx-lost-stamp-set! o::approx v::long) (set! (-> |#!bigloo_wallow| o lost-stamp) v))
(define-inline (approx-top?::bool o::approx) (-> |#!bigloo_wallow| o top?))
(define-inline (approx-top?-set! o::approx v::bool) (set! (-> |#!bigloo_wallow| o top?) v))
(define-inline (approx-allocs::obj o::approx) (-> |#!bigloo_wallow| o allocs))
(define-inline (approx-allocs-set! o::approx v::obj) (set! (-> |#!bigloo_wallow| o allocs) v))
(define-inline (approx-type-locked?::bool o::approx) (-> |#!bigloo_wallow| o type-locked?))
(define-inline (approx-type-locked?-set! o::approx v::bool) (set! (-> |#!bigloo_wallow| o type-locked?) v))
(define-inline (approx-type::type o::approx) (-> |#!bigloo_wallow| o type))
(define-inline (approx-type-set! o::approx v::type) (set! (-> |#!bigloo_wallow| o type) v))

;; cfun/Cinfo
(define-inline (make-cfun/Cinfo::cfun/Cinfo arity1757::long side-effect1758::obj predicate-of1759::obj stack-allocator1760::obj top?1761::bool the-closure1762::obj effect1763::obj failsafe1764::obj args-type1765::obj macro?1766::bool infix?1767::bool method1768::pair-nil approx1769::approx) (instantiate::cfun/Cinfo (arity arity1757) (side-effect side-effect1758) (predicate-of predicate-of1759) (stack-allocator stack-allocator1760) (top? top?1761) (the-closure the-closure1762) (effect effect1763) (failsafe failsafe1764) (args-type args-type1765) (macro? macro?1766) (infix? infix?1767) (method method1768) (approx approx1769)))
(define-inline (cfun/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ cfun/Cinfo cfa_info)))
(define (cfun/Cinfo-nil::cfun/Cinfo) (class-nil (@ cfun/Cinfo cfa_info)))
(define-inline (cfun/Cinfo-approx::approx o::cfun/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (cfun/Cinfo-approx-set! o::cfun/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (cfun/Cinfo-method::pair-nil o::cfun/Cinfo) (-> |#!bigloo_wallow| o method))
(define-inline (cfun/Cinfo-method-set! o::cfun/Cinfo v::pair-nil) (set! (-> |#!bigloo_wallow| o method) v))
(define-inline (cfun/Cinfo-infix?::bool o::cfun/Cinfo) (-> |#!bigloo_wallow| o infix?))
(define-inline (cfun/Cinfo-infix?-set! o::cfun/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o infix?) v))
(define-inline (cfun/Cinfo-macro?::bool o::cfun/Cinfo) (-> |#!bigloo_wallow| o macro?))
(define-inline (cfun/Cinfo-macro?-set! o::cfun/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o macro?) v))
(define-inline (cfun/Cinfo-args-type::obj o::cfun/Cinfo) (-> |#!bigloo_wallow| o args-type))
(define-inline (cfun/Cinfo-args-type-set! o::cfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o args-type) v))
(define-inline (cfun/Cinfo-failsafe::obj o::cfun/Cinfo) (-> |#!bigloo_wallow| o failsafe))
(define-inline (cfun/Cinfo-failsafe-set! o::cfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o failsafe) v))
(define-inline (cfun/Cinfo-effect::obj o::cfun/Cinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (cfun/Cinfo-effect-set! o::cfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (cfun/Cinfo-the-closure::obj o::cfun/Cinfo) (-> |#!bigloo_wallow| o the-closure))
(define-inline (cfun/Cinfo-the-closure-set! o::cfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o the-closure) v))
(define-inline (cfun/Cinfo-top?::bool o::cfun/Cinfo) (-> |#!bigloo_wallow| o top?))
(define-inline (cfun/Cinfo-top?-set! o::cfun/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o top?) v))
(define-inline (cfun/Cinfo-stack-allocator::obj o::cfun/Cinfo) (-> |#!bigloo_wallow| o stack-allocator))
(define-inline (cfun/Cinfo-stack-allocator-set! o::cfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o stack-allocator) v))
(define-inline (cfun/Cinfo-predicate-of::obj o::cfun/Cinfo) (-> |#!bigloo_wallow| o predicate-of))
(define-inline (cfun/Cinfo-predicate-of-set! o::cfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o predicate-of) v))
(define-inline (cfun/Cinfo-side-effect::obj o::cfun/Cinfo) (-> |#!bigloo_wallow| o side-effect))
(define-inline (cfun/Cinfo-side-effect-set! o::cfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (cfun/Cinfo-arity::long o::cfun/Cinfo) (-> |#!bigloo_wallow| o arity))
(define-inline (cfun/Cinfo-arity-set! o::cfun/Cinfo v::long) (set! (-> |#!bigloo_wallow| o arity) v))

;; extern-sfun/Cinfo
(define-inline (make-extern-sfun/Cinfo::extern-sfun/Cinfo arity1735::long side-effect1736::obj predicate-of1737::obj stack-allocator1738::obj top?1739::bool the-closure1740::obj effect1741::obj failsafe1742::obj property1743::obj args1744::obj args-name1745::obj body1746::obj class1747::obj dsssl-keywords1748::obj loc1749::obj optionals1750::obj keys1751::obj the-closure-global1752::obj strength1753::symbol polymorphic?1754::bool approx1755::approx) (instantiate::extern-sfun/Cinfo (arity arity1735) (side-effect side-effect1736) (predicate-of predicate-of1737) (stack-allocator stack-allocator1738) (top? top?1739) (the-closure the-closure1740) (effect effect1741) (failsafe failsafe1742) (property property1743) (args args1744) (args-name args-name1745) (body body1746) (class class1747) (dsssl-keywords dsssl-keywords1748) (loc loc1749) (optionals optionals1750) (keys keys1751) (the-closure-global the-closure-global1752) (strength strength1753) (polymorphic? polymorphic?1754) (approx approx1755)))
(define-inline (extern-sfun/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ extern-sfun/Cinfo cfa_info)))
(define (extern-sfun/Cinfo-nil::extern-sfun/Cinfo) (class-nil (@ extern-sfun/Cinfo cfa_info)))
(define-inline (extern-sfun/Cinfo-approx::approx o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (extern-sfun/Cinfo-approx-set! o::extern-sfun/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (extern-sfun/Cinfo-polymorphic?::bool o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o polymorphic?))
(define-inline (extern-sfun/Cinfo-polymorphic?-set! o::extern-sfun/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o polymorphic?) v))
(define-inline (extern-sfun/Cinfo-strength::symbol o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o strength))
(define-inline (extern-sfun/Cinfo-strength-set! o::extern-sfun/Cinfo v::symbol) (set! (-> |#!bigloo_wallow| o strength) v))
(define-inline (extern-sfun/Cinfo-the-closure-global::obj o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o the-closure-global))
(define-inline (extern-sfun/Cinfo-the-closure-global-set! o::extern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o the-closure-global) v))
(define-inline (extern-sfun/Cinfo-keys::obj o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o keys))
(define-inline (extern-sfun/Cinfo-keys-set! o::extern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o keys) v))
(define-inline (extern-sfun/Cinfo-optionals::obj o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o optionals))
(define-inline (extern-sfun/Cinfo-optionals-set! o::extern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o optionals) v))
(define-inline (extern-sfun/Cinfo-loc::obj o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (extern-sfun/Cinfo-loc-set! o::extern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))
(define-inline (extern-sfun/Cinfo-dsssl-keywords::obj o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o dsssl-keywords))
(define-inline (extern-sfun/Cinfo-dsssl-keywords-set! o::extern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o dsssl-keywords) v))
(define-inline (extern-sfun/Cinfo-class::obj o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o class))
(define-inline (extern-sfun/Cinfo-class-set! o::extern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (extern-sfun/Cinfo-body::obj o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o body))
(define-inline (extern-sfun/Cinfo-body-set! o::extern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o body) v))
(define-inline (extern-sfun/Cinfo-args-name::obj o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o args-name))
(define-inline (extern-sfun/Cinfo-args-name-set! o::extern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o args-name) v))
(define-inline (extern-sfun/Cinfo-args::obj o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o args))
(define-inline (extern-sfun/Cinfo-args-set! o::extern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o args) v))
(define-inline (extern-sfun/Cinfo-property::obj o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o property))
(define-inline (extern-sfun/Cinfo-property-set! o::extern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o property) v))
(define-inline (extern-sfun/Cinfo-failsafe::obj o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o failsafe))
(define-inline (extern-sfun/Cinfo-failsafe-set! o::extern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o failsafe) v))
(define-inline (extern-sfun/Cinfo-effect::obj o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (extern-sfun/Cinfo-effect-set! o::extern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (extern-sfun/Cinfo-the-closure::obj o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o the-closure))
(define-inline (extern-sfun/Cinfo-the-closure-set! o::extern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o the-closure) v))
(define-inline (extern-sfun/Cinfo-top?::bool o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o top?))
(define-inline (extern-sfun/Cinfo-top?-set! o::extern-sfun/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o top?) v))
(define-inline (extern-sfun/Cinfo-stack-allocator::obj o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o stack-allocator))
(define-inline (extern-sfun/Cinfo-stack-allocator-set! o::extern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o stack-allocator) v))
(define-inline (extern-sfun/Cinfo-predicate-of::obj o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o predicate-of))
(define-inline (extern-sfun/Cinfo-predicate-of-set! o::extern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o predicate-of) v))
(define-inline (extern-sfun/Cinfo-side-effect::obj o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o side-effect))
(define-inline (extern-sfun/Cinfo-side-effect-set! o::extern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (extern-sfun/Cinfo-arity::long o::extern-sfun/Cinfo) (-> |#!bigloo_wallow| o arity))
(define-inline (extern-sfun/Cinfo-arity-set! o::extern-sfun/Cinfo v::long) (set! (-> |#!bigloo_wallow| o arity) v))

;; intern-sfun/Cinfo
(define-inline (make-intern-sfun/Cinfo::intern-sfun/Cinfo arity1712::long side-effect1713::obj predicate-of1714::obj stack-allocator1715::obj top?1716::bool the-closure1717::obj effect1718::obj failsafe1719::obj property1720::obj args1721::obj args-name1722::obj body1723::obj class1724::obj dsssl-keywords1725::obj loc1726::obj optionals1727::obj keys1728::obj the-closure-global1729::obj strength1730::symbol polymorphic?1731::bool approx1732::approx stamp1733::long) (instantiate::intern-sfun/Cinfo (arity arity1712) (side-effect side-effect1713) (predicate-of predicate-of1714) (stack-allocator stack-allocator1715) (top? top?1716) (the-closure the-closure1717) (effect effect1718) (failsafe failsafe1719) (property property1720) (args args1721) (args-name args-name1722) (body body1723) (class class1724) (dsssl-keywords dsssl-keywords1725) (loc loc1726) (optionals optionals1727) (keys keys1728) (the-closure-global the-closure-global1729) (strength strength1730) (polymorphic? polymorphic?1731) (approx approx1732) (stamp stamp1733)))
(define-inline (intern-sfun/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ intern-sfun/Cinfo cfa_info)))
(define (intern-sfun/Cinfo-nil::intern-sfun/Cinfo) (class-nil (@ intern-sfun/Cinfo cfa_info)))
(define-inline (intern-sfun/Cinfo-stamp::long o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o stamp))
(define-inline (intern-sfun/Cinfo-stamp-set! o::intern-sfun/Cinfo v::long) (set! (-> |#!bigloo_wallow| o stamp) v))
(define-inline (intern-sfun/Cinfo-approx::approx o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (intern-sfun/Cinfo-approx-set! o::intern-sfun/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (intern-sfun/Cinfo-polymorphic?::bool o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o polymorphic?))
(define-inline (intern-sfun/Cinfo-polymorphic?-set! o::intern-sfun/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o polymorphic?) v))
(define-inline (intern-sfun/Cinfo-strength::symbol o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o strength))
(define-inline (intern-sfun/Cinfo-strength-set! o::intern-sfun/Cinfo v::symbol) (set! (-> |#!bigloo_wallow| o strength) v))
(define-inline (intern-sfun/Cinfo-the-closure-global::obj o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o the-closure-global))
(define-inline (intern-sfun/Cinfo-the-closure-global-set! o::intern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o the-closure-global) v))
(define-inline (intern-sfun/Cinfo-keys::obj o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o keys))
(define-inline (intern-sfun/Cinfo-keys-set! o::intern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o keys) v))
(define-inline (intern-sfun/Cinfo-optionals::obj o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o optionals))
(define-inline (intern-sfun/Cinfo-optionals-set! o::intern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o optionals) v))
(define-inline (intern-sfun/Cinfo-loc::obj o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (intern-sfun/Cinfo-loc-set! o::intern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))
(define-inline (intern-sfun/Cinfo-dsssl-keywords::obj o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o dsssl-keywords))
(define-inline (intern-sfun/Cinfo-dsssl-keywords-set! o::intern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o dsssl-keywords) v))
(define-inline (intern-sfun/Cinfo-class::obj o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o class))
(define-inline (intern-sfun/Cinfo-class-set! o::intern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (intern-sfun/Cinfo-body::obj o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o body))
(define-inline (intern-sfun/Cinfo-body-set! o::intern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o body) v))
(define-inline (intern-sfun/Cinfo-args-name::obj o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o args-name))
(define-inline (intern-sfun/Cinfo-args-name-set! o::intern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o args-name) v))
(define-inline (intern-sfun/Cinfo-args::obj o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o args))
(define-inline (intern-sfun/Cinfo-args-set! o::intern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o args) v))
(define-inline (intern-sfun/Cinfo-property::obj o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o property))
(define-inline (intern-sfun/Cinfo-property-set! o::intern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o property) v))
(define-inline (intern-sfun/Cinfo-failsafe::obj o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o failsafe))
(define-inline (intern-sfun/Cinfo-failsafe-set! o::intern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o failsafe) v))
(define-inline (intern-sfun/Cinfo-effect::obj o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (intern-sfun/Cinfo-effect-set! o::intern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (intern-sfun/Cinfo-the-closure::obj o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o the-closure))
(define-inline (intern-sfun/Cinfo-the-closure-set! o::intern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o the-closure) v))
(define-inline (intern-sfun/Cinfo-top?::bool o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o top?))
(define-inline (intern-sfun/Cinfo-top?-set! o::intern-sfun/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o top?) v))
(define-inline (intern-sfun/Cinfo-stack-allocator::obj o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o stack-allocator))
(define-inline (intern-sfun/Cinfo-stack-allocator-set! o::intern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o stack-allocator) v))
(define-inline (intern-sfun/Cinfo-predicate-of::obj o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o predicate-of))
(define-inline (intern-sfun/Cinfo-predicate-of-set! o::intern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o predicate-of) v))
(define-inline (intern-sfun/Cinfo-side-effect::obj o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o side-effect))
(define-inline (intern-sfun/Cinfo-side-effect-set! o::intern-sfun/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (intern-sfun/Cinfo-arity::long o::intern-sfun/Cinfo) (-> |#!bigloo_wallow| o arity))
(define-inline (intern-sfun/Cinfo-arity-set! o::intern-sfun/Cinfo v::long) (set! (-> |#!bigloo_wallow| o arity) v))

;; scnst/Cinfo
(define-inline (make-scnst/Cinfo::scnst/Cinfo node1706::obj class1707::obj loc1709::obj approx1710::approx) (instantiate::scnst/Cinfo (node node1706) (class class1707) (loc loc1709) (approx approx1710)))
(define-inline (scnst/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ scnst/Cinfo cfa_info)))
(define (scnst/Cinfo-nil::scnst/Cinfo) (class-nil (@ scnst/Cinfo cfa_info)))
(define-inline (scnst/Cinfo-approx::approx o::scnst/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (scnst/Cinfo-approx-set! o::scnst/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (scnst/Cinfo-loc::obj o::scnst/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (scnst/Cinfo-loc-set! o::scnst/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))
(define-inline (scnst/Cinfo-class::obj o::scnst/Cinfo) (-> |#!bigloo_wallow| o class))
(define-inline (scnst/Cinfo-class-set! o::scnst/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (scnst/Cinfo-node::obj o::scnst/Cinfo) (-> |#!bigloo_wallow| o node))
(define-inline (scnst/Cinfo-node-set! o::scnst/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o node) v))

;; pre-clo-env
(define-inline (make-pre-clo-env::pre-clo-env loc1704::obj) (instantiate::pre-clo-env (loc loc1704)))
(define-inline (pre-clo-env?::bool obj::obj) ((@ isa? __object) obj (@ pre-clo-env cfa_info)))
(define (pre-clo-env-nil::pre-clo-env) (class-nil (@ pre-clo-env cfa_info)))
(define-inline (pre-clo-env-loc::obj o::pre-clo-env) (-> |#!bigloo_wallow| o loc))
(define-inline (pre-clo-env-loc-set! o::pre-clo-env v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; svar/Cinfo
(define-inline (make-svar/Cinfo::svar/Cinfo loc1699::obj approx1700::approx clo-env?1701::bool stamp1702::long) (instantiate::svar/Cinfo (loc loc1699) (approx approx1700) (clo-env? clo-env?1701) (stamp stamp1702)))
(define-inline (svar/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ svar/Cinfo cfa_info)))
(define (svar/Cinfo-nil::svar/Cinfo) (class-nil (@ svar/Cinfo cfa_info)))
(define-inline (svar/Cinfo-stamp::long o::svar/Cinfo) (-> |#!bigloo_wallow| o stamp))
(define-inline (svar/Cinfo-stamp-set! o::svar/Cinfo v::long) (set! (-> |#!bigloo_wallow| o stamp) v))
(define-inline (svar/Cinfo-clo-env?::bool o::svar/Cinfo) (-> |#!bigloo_wallow| o clo-env?))
(define-inline (svar/Cinfo-clo-env?-set! o::svar/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o clo-env?) v))
(define-inline (svar/Cinfo-approx::approx o::svar/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (svar/Cinfo-approx-set! o::svar/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (svar/Cinfo-loc::obj o::svar/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (svar/Cinfo-loc-set! o::svar/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; cvar/Cinfo
(define-inline (make-cvar/Cinfo::cvar/Cinfo macro?1696::bool approx1697::approx) (instantiate::cvar/Cinfo (macro? macro?1696) (approx approx1697)))
(define-inline (cvar/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ cvar/Cinfo cfa_info)))
(define (cvar/Cinfo-nil::cvar/Cinfo) (class-nil (@ cvar/Cinfo cfa_info)))
(define-inline (cvar/Cinfo-approx::approx o::cvar/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (cvar/Cinfo-approx-set! o::cvar/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (cvar/Cinfo-macro?::bool o::cvar/Cinfo) (-> |#!bigloo_wallow| o macro?))
(define-inline (cvar/Cinfo-macro?-set! o::cvar/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o macro?) v))

;; sexit/Cinfo
(define-inline (make-sexit/Cinfo::sexit/Cinfo handler1692::obj detached?1693::bool approx1694::approx) (instantiate::sexit/Cinfo (handler handler1692) (detached? detached?1693) (approx approx1694)))
(define-inline (sexit/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ sexit/Cinfo cfa_info)))
(define (sexit/Cinfo-nil::sexit/Cinfo) (class-nil (@ sexit/Cinfo cfa_info)))
(define-inline (sexit/Cinfo-approx::approx o::sexit/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (sexit/Cinfo-approx-set! o::sexit/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (sexit/Cinfo-detached?::bool o::sexit/Cinfo) (-> |#!bigloo_wallow| o detached?))
(define-inline (sexit/Cinfo-detached?-set! o::sexit/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o detached?) v))
(define-inline (sexit/Cinfo-handler::obj o::sexit/Cinfo) (-> |#!bigloo_wallow| o handler))
(define-inline (sexit/Cinfo-handler-set! o::sexit/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o handler) v))

;; reshaped-local
(define-inline (make-reshaped-local::reshaped-local id1679::symbol name1680::obj type1681::type value1682::value access1683::obj fast-alpha1684::obj removable1685::obj occurrence1686::long occurrencew1687::long user?1688::bool key1689::long binding-value1690::obj) (instantiate::reshaped-local (id id1679) (name name1680) (type type1681) (value value1682) (access access1683) (fast-alpha fast-alpha1684) (removable removable1685) (occurrence occurrence1686) (occurrencew occurrencew1687) (user? user?1688) (key key1689) (binding-value binding-value1690)))
(define-inline (reshaped-local?::bool obj::obj) ((@ isa? __object) obj (@ reshaped-local cfa_info)))
(define (reshaped-local-nil::reshaped-local) (class-nil (@ reshaped-local cfa_info)))
(define-inline (reshaped-local-binding-value::obj o::reshaped-local) (-> |#!bigloo_wallow| o binding-value))
(define-inline (reshaped-local-binding-value-set! o::reshaped-local v::obj) (set! (-> |#!bigloo_wallow| o binding-value) v))
(define-inline (reshaped-local-key::long o::reshaped-local) (-> |#!bigloo_wallow| o key))
(define-inline (reshaped-local-key-set! o::reshaped-local v::long) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (reshaped-local-user?::bool o::reshaped-local) (-> |#!bigloo_wallow| o user?))
(define-inline (reshaped-local-user?-set! o::reshaped-local v::bool) (set! (-> |#!bigloo_wallow| o user?) v))
(define-inline (reshaped-local-occurrencew::long o::reshaped-local) (-> |#!bigloo_wallow| o occurrencew))
(define-inline (reshaped-local-occurrencew-set! o::reshaped-local v::long) (set! (-> |#!bigloo_wallow| o occurrencew) v))
(define-inline (reshaped-local-occurrence::long o::reshaped-local) (-> |#!bigloo_wallow| o occurrence))
(define-inline (reshaped-local-occurrence-set! o::reshaped-local v::long) (set! (-> |#!bigloo_wallow| o occurrence) v))
(define-inline (reshaped-local-removable::obj o::reshaped-local) (-> |#!bigloo_wallow| o removable))
(define-inline (reshaped-local-removable-set! o::reshaped-local v::obj) (set! (-> |#!bigloo_wallow| o removable) v))
(define-inline (reshaped-local-fast-alpha::obj o::reshaped-local) (-> |#!bigloo_wallow| o fast-alpha))
(define-inline (reshaped-local-fast-alpha-set! o::reshaped-local v::obj) (set! (-> |#!bigloo_wallow| o fast-alpha) v))
(define-inline (reshaped-local-access::obj o::reshaped-local) (-> |#!bigloo_wallow| o access))
(define-inline (reshaped-local-access-set! o::reshaped-local v::obj) (set! (-> |#!bigloo_wallow| o access) v))
(define-inline (reshaped-local-value::value o::reshaped-local) (-> |#!bigloo_wallow| o value))
(define-inline (reshaped-local-value-set! o::reshaped-local v::value) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (reshaped-local-type::type o::reshaped-local) (-> |#!bigloo_wallow| o type))
(define-inline (reshaped-local-type-set! o::reshaped-local v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (reshaped-local-name::obj o::reshaped-local) (-> |#!bigloo_wallow| o name))
(define-inline (reshaped-local-name-set! o::reshaped-local v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (reshaped-local-id::symbol o::reshaped-local) (-> |#!bigloo_wallow| o id))
(define-inline (reshaped-local-id-set! o::reshaped-local v::symbol) (set! (-> |#!bigloo_wallow| o id) v))

;; reshaped-global
(define-inline (make-reshaped-global::reshaped-global id1658::symbol name1659::obj type1660::type value1661::value access1662::obj fast-alpha1663::obj removable1664::obj occurrence1665::long occurrencew1666::long user?1667::bool module1668::symbol import1669::obj evaluable?1670::bool eval?1671::bool library1672::obj pragma1673::obj src1674::obj jvm-type-name1675::bstring init1676::obj alias1677::obj) (instantiate::reshaped-global (id id1658) (name name1659) (type type1660) (value value1661) (access access1662) (fast-alpha fast-alpha1663) (removable removable1664) (occurrence occurrence1665) (occurrencew occurrencew1666) (user? user?1667) (module module1668) (import import1669) (evaluable? evaluable?1670) (eval? eval?1671) (library library1672) (pragma pragma1673) (src src1674) (jvm-type-name jvm-type-name1675) (init init1676) (alias alias1677)))
(define-inline (reshaped-global?::bool obj::obj) ((@ isa? __object) obj (@ reshaped-global cfa_info)))
(define (reshaped-global-nil::reshaped-global) (class-nil (@ reshaped-global cfa_info)))
(define-inline (reshaped-global-alias::obj o::reshaped-global) (-> |#!bigloo_wallow| o alias))
(define-inline (reshaped-global-alias-set! o::reshaped-global v::obj) (set! (-> |#!bigloo_wallow| o alias) v))
(define-inline (reshaped-global-init::obj o::reshaped-global) (-> |#!bigloo_wallow| o init))
(define-inline (reshaped-global-init-set! o::reshaped-global v::obj) (set! (-> |#!bigloo_wallow| o init) v))
(define-inline (reshaped-global-jvm-type-name::bstring o::reshaped-global) (-> |#!bigloo_wallow| o jvm-type-name))
(define-inline (reshaped-global-jvm-type-name-set! o::reshaped-global v::bstring) (set! (-> |#!bigloo_wallow| o jvm-type-name) v))
(define-inline (reshaped-global-src::obj o::reshaped-global) (-> |#!bigloo_wallow| o src))
(define-inline (reshaped-global-src-set! o::reshaped-global v::obj) (set! (-> |#!bigloo_wallow| o src) v))
(define-inline (reshaped-global-pragma::obj o::reshaped-global) (-> |#!bigloo_wallow| o pragma))
(define-inline (reshaped-global-pragma-set! o::reshaped-global v::obj) (set! (-> |#!bigloo_wallow| o pragma) v))
(define-inline (reshaped-global-library::obj o::reshaped-global) (-> |#!bigloo_wallow| o library))
(define-inline (reshaped-global-library-set! o::reshaped-global v::obj) (set! (-> |#!bigloo_wallow| o library) v))
(define-inline (reshaped-global-eval?::bool o::reshaped-global) (-> |#!bigloo_wallow| o eval?))
(define-inline (reshaped-global-eval?-set! o::reshaped-global v::bool) (set! (-> |#!bigloo_wallow| o eval?) v))
(define-inline (reshaped-global-evaluable?::bool o::reshaped-global) (-> |#!bigloo_wallow| o evaluable?))
(define-inline (reshaped-global-evaluable?-set! o::reshaped-global v::bool) (set! (-> |#!bigloo_wallow| o evaluable?) v))
(define-inline (reshaped-global-import::obj o::reshaped-global) (-> |#!bigloo_wallow| o import))
(define-inline (reshaped-global-import-set! o::reshaped-global v::obj) (set! (-> |#!bigloo_wallow| o import) v))
(define-inline (reshaped-global-module::symbol o::reshaped-global) (-> |#!bigloo_wallow| o module))
(define-inline (reshaped-global-module-set! o::reshaped-global v::symbol) (set! (-> |#!bigloo_wallow| o module) v))
(define-inline (reshaped-global-user?::bool o::reshaped-global) (-> |#!bigloo_wallow| o user?))
(define-inline (reshaped-global-user?-set! o::reshaped-global v::bool) (set! (-> |#!bigloo_wallow| o user?) v))
(define-inline (reshaped-global-occurrencew::long o::reshaped-global) (-> |#!bigloo_wallow| o occurrencew))
(define-inline (reshaped-global-occurrencew-set! o::reshaped-global v::long) (set! (-> |#!bigloo_wallow| o occurrencew) v))
(define-inline (reshaped-global-occurrence::long o::reshaped-global) (-> |#!bigloo_wallow| o occurrence))
(define-inline (reshaped-global-occurrence-set! o::reshaped-global v::long) (set! (-> |#!bigloo_wallow| o occurrence) v))
(define-inline (reshaped-global-removable::obj o::reshaped-global) (-> |#!bigloo_wallow| o removable))
(define-inline (reshaped-global-removable-set! o::reshaped-global v::obj) (set! (-> |#!bigloo_wallow| o removable) v))
(define-inline (reshaped-global-fast-alpha::obj o::reshaped-global) (-> |#!bigloo_wallow| o fast-alpha))
(define-inline (reshaped-global-fast-alpha-set! o::reshaped-global v::obj) (set! (-> |#!bigloo_wallow| o fast-alpha) v))
(define-inline (reshaped-global-access::obj o::reshaped-global) (-> |#!bigloo_wallow| o access))
(define-inline (reshaped-global-access-set! o::reshaped-global v::obj) (set! (-> |#!bigloo_wallow| o access) v))
(define-inline (reshaped-global-value::value o::reshaped-global) (-> |#!bigloo_wallow| o value))
(define-inline (reshaped-global-value-set! o::reshaped-global v::value) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (reshaped-global-type::type o::reshaped-global) (-> |#!bigloo_wallow| o type))
(define-inline (reshaped-global-type-set! o::reshaped-global v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (reshaped-global-name::obj o::reshaped-global) (-> |#!bigloo_wallow| o name))
(define-inline (reshaped-global-name-set! o::reshaped-global v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (reshaped-global-id::symbol o::reshaped-global) (-> |#!bigloo_wallow| o id))
(define-inline (reshaped-global-id-set! o::reshaped-global v::symbol) (set! (-> |#!bigloo_wallow| o id) v))

;; atom/Cinfo
(define-inline (make-atom/Cinfo::atom/Cinfo loc1653::obj type1654::type value1655::obj approx1656::approx) (instantiate::atom/Cinfo (loc loc1653) (type type1654) (value value1655) (approx approx1656)))
(define-inline (atom/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ atom/Cinfo cfa_info)))
(define (atom/Cinfo-nil::atom/Cinfo) (class-nil (@ atom/Cinfo cfa_info)))
(define-inline (atom/Cinfo-approx::approx o::atom/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (atom/Cinfo-approx-set! o::atom/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (atom/Cinfo-value::obj o::atom/Cinfo) (-> |#!bigloo_wallow| o value))
(define-inline (atom/Cinfo-value-set! o::atom/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (atom/Cinfo-type::type o::atom/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (atom/Cinfo-type-set! o::atom/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (atom/Cinfo-loc::obj o::atom/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (atom/Cinfo-loc-set! o::atom/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; kwote/node
(define-inline (make-kwote/node::kwote/node loc1648::obj type1649::type value1650::obj node1651::node) (instantiate::kwote/node (loc loc1648) (type type1649) (value value1650) (node node1651)))
(define-inline (kwote/node?::bool obj::obj) ((@ isa? __object) obj (@ kwote/node cfa_info)))
(define (kwote/node-nil::kwote/node) (class-nil (@ kwote/node cfa_info)))
(define-inline (kwote/node-node::node o::kwote/node) (-> |#!bigloo_wallow| o node))
(define-inline (kwote/node-node-set! o::kwote/node v::node) (set! (-> |#!bigloo_wallow| o node) v))
(define-inline (kwote/node-value::obj o::kwote/node) (-> |#!bigloo_wallow| o value))
(define-inline (kwote/node-value-set! o::kwote/node v::obj) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (kwote/node-type::type o::kwote/node) (-> |#!bigloo_wallow| o type))
(define-inline (kwote/node-type-set! o::kwote/node v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (kwote/node-loc::obj o::kwote/node) (-> |#!bigloo_wallow| o loc))
(define-inline (kwote/node-loc-set! o::kwote/node v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; kwote/Cinfo
(define-inline (make-kwote/Cinfo::kwote/Cinfo loc1642::obj type1644::type value1645::obj approx1646::approx) (instantiate::kwote/Cinfo (loc loc1642) (type type1644) (value value1645) (approx approx1646)))
(define-inline (kwote/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ kwote/Cinfo cfa_info)))
(define (kwote/Cinfo-nil::kwote/Cinfo) (class-nil (@ kwote/Cinfo cfa_info)))
(define-inline (kwote/Cinfo-approx::approx o::kwote/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (kwote/Cinfo-approx-set! o::kwote/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (kwote/Cinfo-value::obj o::kwote/Cinfo) (-> |#!bigloo_wallow| o value))
(define-inline (kwote/Cinfo-value-set! o::kwote/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (kwote/Cinfo-type::type o::kwote/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (kwote/Cinfo-type-set! o::kwote/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (kwote/Cinfo-loc::obj o::kwote/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (kwote/Cinfo-loc-set! o::kwote/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; app-ly/Cinfo
(define-inline (make-app-ly/Cinfo::app-ly/Cinfo loc1633::obj type1634::type fun1635::node arg1639::node approx1640::approx) (instantiate::app-ly/Cinfo (loc loc1633) (type type1634) (fun fun1635) (arg arg1639) (approx approx1640)))
(define-inline (app-ly/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ app-ly/Cinfo cfa_info)))
(define (app-ly/Cinfo-nil::app-ly/Cinfo) (class-nil (@ app-ly/Cinfo cfa_info)))
(define-inline (app-ly/Cinfo-approx::approx o::app-ly/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (app-ly/Cinfo-approx-set! o::app-ly/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (app-ly/Cinfo-arg::node o::app-ly/Cinfo) (-> |#!bigloo_wallow| o arg))
(define-inline (app-ly/Cinfo-arg-set! o::app-ly/Cinfo v::node) (set! (-> |#!bigloo_wallow| o arg) v))
(define-inline (app-ly/Cinfo-fun::node o::app-ly/Cinfo) (-> |#!bigloo_wallow| o fun))
(define-inline (app-ly/Cinfo-fun-set! o::app-ly/Cinfo v::node) (set! (-> |#!bigloo_wallow| o fun) v))
(define-inline (app-ly/Cinfo-type::type o::app-ly/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (app-ly/Cinfo-type-set! o::app-ly/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (app-ly/Cinfo-loc::obj o::app-ly/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (app-ly/Cinfo-loc-set! o::app-ly/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; funcall/Cinfo
(define-inline (make-funcall/Cinfo::funcall/Cinfo loc1620::obj type1621::type fun1623::node args1624::obj strength1625::symbol functions1626::obj approx1628::approx va-approx1629::approx arity-error-noticed?1630::bool type-error-noticed?1631::bool) (instantiate::funcall/Cinfo (loc loc1620) (type type1621) (fun fun1623) (args args1624) (strength strength1625) (functions functions1626) (approx approx1628) (va-approx va-approx1629) (arity-error-noticed? arity-error-noticed?1630) (type-error-noticed? type-error-noticed?1631)))
(define-inline (funcall/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ funcall/Cinfo cfa_info)))
(define (funcall/Cinfo-nil::funcall/Cinfo) (class-nil (@ funcall/Cinfo cfa_info)))
(define-inline (funcall/Cinfo-type-error-noticed?::bool o::funcall/Cinfo) (-> |#!bigloo_wallow| o type-error-noticed?))
(define-inline (funcall/Cinfo-type-error-noticed?-set! o::funcall/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o type-error-noticed?) v))
(define-inline (funcall/Cinfo-arity-error-noticed?::bool o::funcall/Cinfo) (-> |#!bigloo_wallow| o arity-error-noticed?))
(define-inline (funcall/Cinfo-arity-error-noticed?-set! o::funcall/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o arity-error-noticed?) v))
(define-inline (funcall/Cinfo-va-approx::approx o::funcall/Cinfo) (-> |#!bigloo_wallow| o va-approx))
(define-inline (funcall/Cinfo-va-approx-set! o::funcall/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o va-approx) v))
(define-inline (funcall/Cinfo-approx::approx o::funcall/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (funcall/Cinfo-approx-set! o::funcall/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (funcall/Cinfo-functions::obj o::funcall/Cinfo) (-> |#!bigloo_wallow| o functions))
(define-inline (funcall/Cinfo-functions-set! o::funcall/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o functions) v))
(define-inline (funcall/Cinfo-strength::symbol o::funcall/Cinfo) (-> |#!bigloo_wallow| o strength))
(define-inline (funcall/Cinfo-strength-set! o::funcall/Cinfo v::symbol) (set! (-> |#!bigloo_wallow| o strength) v))
(define-inline (funcall/Cinfo-args::obj o::funcall/Cinfo) (-> |#!bigloo_wallow| o args))
(define-inline (funcall/Cinfo-args-set! o::funcall/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o args) v))
(define-inline (funcall/Cinfo-fun::node o::funcall/Cinfo) (-> |#!bigloo_wallow| o fun))
(define-inline (funcall/Cinfo-fun-set! o::funcall/Cinfo v::node) (set! (-> |#!bigloo_wallow| o fun) v))
(define-inline (funcall/Cinfo-type::type o::funcall/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (funcall/Cinfo-type-set! o::funcall/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (funcall/Cinfo-loc::obj o::funcall/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (funcall/Cinfo-loc-set! o::funcall/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; setq/Cinfo
(define-inline (make-setq/Cinfo::setq/Cinfo loc1614::obj type1615::type var1616::var value1617::node approx1618::approx) (instantiate::setq/Cinfo (loc loc1614) (type type1615) (var var1616) (value value1617) (approx approx1618)))
(define-inline (setq/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ setq/Cinfo cfa_info)))
(define (setq/Cinfo-nil::setq/Cinfo) (class-nil (@ setq/Cinfo cfa_info)))
(define-inline (setq/Cinfo-approx::approx o::setq/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (setq/Cinfo-approx-set! o::setq/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (setq/Cinfo-value::node o::setq/Cinfo) (-> |#!bigloo_wallow| o value))
(define-inline (setq/Cinfo-value-set! o::setq/Cinfo v::node) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (setq/Cinfo-var::var o::setq/Cinfo) (-> |#!bigloo_wallow| o var))
(define-inline (setq/Cinfo-var-set! o::setq/Cinfo v::var) (set! (-> |#!bigloo_wallow| o var) v))
(define-inline (setq/Cinfo-type::type o::setq/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (setq/Cinfo-type-set! o::setq/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (setq/Cinfo-loc::obj o::setq/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (setq/Cinfo-loc-set! o::setq/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; conditional/Cinfo
(define-inline (make-conditional/Cinfo::conditional/Cinfo loc1603::obj type1604::type side-effect1605::obj key1606::obj test1607::node true1608::node false1609::node approx1610::approx) (instantiate::conditional/Cinfo (loc loc1603) (type type1604) (side-effect side-effect1605) (key key1606) (test test1607) (true true1608) (false false1609) (approx approx1610)))
(define-inline (conditional/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ conditional/Cinfo cfa_info)))
(define (conditional/Cinfo-nil::conditional/Cinfo) (class-nil (@ conditional/Cinfo cfa_info)))
(define-inline (conditional/Cinfo-approx::approx o::conditional/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (conditional/Cinfo-approx-set! o::conditional/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (conditional/Cinfo-false::node o::conditional/Cinfo) (-> |#!bigloo_wallow| o false))
(define-inline (conditional/Cinfo-false-set! o::conditional/Cinfo v::node) (set! (-> |#!bigloo_wallow| o false) v))
(define-inline (conditional/Cinfo-true::node o::conditional/Cinfo) (-> |#!bigloo_wallow| o true))
(define-inline (conditional/Cinfo-true-set! o::conditional/Cinfo v::node) (set! (-> |#!bigloo_wallow| o true) v))
(define-inline (conditional/Cinfo-test::node o::conditional/Cinfo) (-> |#!bigloo_wallow| o test))
(define-inline (conditional/Cinfo-test-set! o::conditional/Cinfo v::node) (set! (-> |#!bigloo_wallow| o test) v))
(define-inline (conditional/Cinfo-key::obj o::conditional/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (conditional/Cinfo-key-set! o::conditional/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (conditional/Cinfo-side-effect::obj o::conditional/Cinfo) (-> |#!bigloo_wallow| o side-effect))
(define-inline (conditional/Cinfo-side-effect-set! o::conditional/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (conditional/Cinfo-type::type o::conditional/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (conditional/Cinfo-type-set! o::conditional/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (conditional/Cinfo-loc::obj o::conditional/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (conditional/Cinfo-loc-set! o::conditional/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; fail/Cinfo
(define-inline (make-fail/Cinfo::fail/Cinfo loc1596::obj type1597::type proc1598::node msg1599::node obj1600::node approx1601::approx) (instantiate::fail/Cinfo (loc loc1596) (type type1597) (proc proc1598) (msg msg1599) (obj obj1600) (approx approx1601)))
(define-inline (fail/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ fail/Cinfo cfa_info)))
(define (fail/Cinfo-nil::fail/Cinfo) (class-nil (@ fail/Cinfo cfa_info)))
(define-inline (fail/Cinfo-approx::approx o::fail/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (fail/Cinfo-approx-set! o::fail/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (fail/Cinfo-obj::node o::fail/Cinfo) (-> |#!bigloo_wallow| o obj))
(define-inline (fail/Cinfo-obj-set! o::fail/Cinfo v::node) (set! (-> |#!bigloo_wallow| o obj) v))
(define-inline (fail/Cinfo-msg::node o::fail/Cinfo) (-> |#!bigloo_wallow| o msg))
(define-inline (fail/Cinfo-msg-set! o::fail/Cinfo v::node) (set! (-> |#!bigloo_wallow| o msg) v))
(define-inline (fail/Cinfo-proc::node o::fail/Cinfo) (-> |#!bigloo_wallow| o proc))
(define-inline (fail/Cinfo-proc-set! o::fail/Cinfo v::node) (set! (-> |#!bigloo_wallow| o proc) v))
(define-inline (fail/Cinfo-type::type o::fail/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (fail/Cinfo-type-set! o::fail/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (fail/Cinfo-loc::obj o::fail/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (fail/Cinfo-loc-set! o::fail/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; switch/Cinfo
(define-inline (make-switch/Cinfo::switch/Cinfo loc1587::obj type1588::type side-effect1589::obj key1590::obj test1591::node clauses1592::obj item-type1593::type approx1594::approx) (instantiate::switch/Cinfo (loc loc1587) (type type1588) (side-effect side-effect1589) (key key1590) (test test1591) (clauses clauses1592) (item-type item-type1593) (approx approx1594)))
(define-inline (switch/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ switch/Cinfo cfa_info)))
(define (switch/Cinfo-nil::switch/Cinfo) (class-nil (@ switch/Cinfo cfa_info)))
(define-inline (switch/Cinfo-approx::approx o::switch/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (switch/Cinfo-approx-set! o::switch/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (switch/Cinfo-item-type::type o::switch/Cinfo) (-> |#!bigloo_wallow| o item-type))
(define-inline (switch/Cinfo-item-type-set! o::switch/Cinfo v::type) (set! (-> |#!bigloo_wallow| o item-type) v))
(define-inline (switch/Cinfo-clauses::obj o::switch/Cinfo) (-> |#!bigloo_wallow| o clauses))
(define-inline (switch/Cinfo-clauses-set! o::switch/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o clauses) v))
(define-inline (switch/Cinfo-test::node o::switch/Cinfo) (-> |#!bigloo_wallow| o test))
(define-inline (switch/Cinfo-test-set! o::switch/Cinfo v::node) (set! (-> |#!bigloo_wallow| o test) v))
(define-inline (switch/Cinfo-key::obj o::switch/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (switch/Cinfo-key-set! o::switch/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (switch/Cinfo-side-effect::obj o::switch/Cinfo) (-> |#!bigloo_wallow| o side-effect))
(define-inline (switch/Cinfo-side-effect-set! o::switch/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (switch/Cinfo-type::type o::switch/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (switch/Cinfo-type-set! o::switch/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (switch/Cinfo-loc::obj o::switch/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (switch/Cinfo-loc-set! o::switch/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; set-ex-it/Cinfo
(define-inline (make-set-ex-it/Cinfo::set-ex-it/Cinfo loc1581::obj type1582::type var1583::var body1584::node approx1585::approx) (instantiate::set-ex-it/Cinfo (loc loc1581) (type type1582) (var var1583) (body body1584) (approx approx1585)))
(define-inline (set-ex-it/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ set-ex-it/Cinfo cfa_info)))
(define (set-ex-it/Cinfo-nil::set-ex-it/Cinfo) (class-nil (@ set-ex-it/Cinfo cfa_info)))
(define-inline (set-ex-it/Cinfo-approx::approx o::set-ex-it/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (set-ex-it/Cinfo-approx-set! o::set-ex-it/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (set-ex-it/Cinfo-body::node o::set-ex-it/Cinfo) (-> |#!bigloo_wallow| o body))
(define-inline (set-ex-it/Cinfo-body-set! o::set-ex-it/Cinfo v::node) (set! (-> |#!bigloo_wallow| o body) v))
(define-inline (set-ex-it/Cinfo-var::var o::set-ex-it/Cinfo) (-> |#!bigloo_wallow| o var))
(define-inline (set-ex-it/Cinfo-var-set! o::set-ex-it/Cinfo v::var) (set! (-> |#!bigloo_wallow| o var) v))
(define-inline (set-ex-it/Cinfo-type::type o::set-ex-it/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (set-ex-it/Cinfo-type-set! o::set-ex-it/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (set-ex-it/Cinfo-loc::obj o::set-ex-it/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (set-ex-it/Cinfo-loc-set! o::set-ex-it/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; jump-ex-it/Cinfo
(define-inline (make-jump-ex-it/Cinfo::jump-ex-it/Cinfo loc1575::obj type1576::type exit1577::node value1578::node approx1579::approx) (instantiate::jump-ex-it/Cinfo (loc loc1575) (type type1576) (exit exit1577) (value value1578) (approx approx1579)))
(define-inline (jump-ex-it/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ jump-ex-it/Cinfo cfa_info)))
(define (jump-ex-it/Cinfo-nil::jump-ex-it/Cinfo) (class-nil (@ jump-ex-it/Cinfo cfa_info)))
(define-inline (jump-ex-it/Cinfo-approx::approx o::jump-ex-it/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (jump-ex-it/Cinfo-approx-set! o::jump-ex-it/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (jump-ex-it/Cinfo-value::node o::jump-ex-it/Cinfo) (-> |#!bigloo_wallow| o value))
(define-inline (jump-ex-it/Cinfo-value-set! o::jump-ex-it/Cinfo v::node) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (jump-ex-it/Cinfo-exit::node o::jump-ex-it/Cinfo) (-> |#!bigloo_wallow| o exit))
(define-inline (jump-ex-it/Cinfo-exit-set! o::jump-ex-it/Cinfo v::node) (set! (-> |#!bigloo_wallow| o exit) v))
(define-inline (jump-ex-it/Cinfo-type::type o::jump-ex-it/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (jump-ex-it/Cinfo-type-set! o::jump-ex-it/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (jump-ex-it/Cinfo-loc::obj o::jump-ex-it/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (jump-ex-it/Cinfo-loc-set! o::jump-ex-it/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; pre-make-box
(define-inline (make-pre-make-box::pre-make-box loc1568::obj type1569::type side-effect1570::obj key1571::obj value1572::node vtype1573::type) (instantiate::pre-make-box (loc loc1568) (type type1569) (side-effect side-effect1570) (key key1571) (value value1572) (vtype vtype1573)))
(define-inline (pre-make-box?::bool obj::obj) ((@ isa? __object) obj (@ pre-make-box cfa_info)))
(define (pre-make-box-nil::pre-make-box) (class-nil (@ pre-make-box cfa_info)))
(define-inline (pre-make-box-vtype::type o::pre-make-box) (-> |#!bigloo_wallow| o vtype))
(define-inline (pre-make-box-vtype-set! o::pre-make-box v::type) (set! (-> |#!bigloo_wallow| o vtype) v))
(define-inline (pre-make-box-value::node o::pre-make-box) (-> |#!bigloo_wallow| o value))
(define-inline (pre-make-box-value-set! o::pre-make-box v::node) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (pre-make-box-key::obj o::pre-make-box) (-> |#!bigloo_wallow| o key))
(define-inline (pre-make-box-key-set! o::pre-make-box v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (pre-make-box-side-effect::obj o::pre-make-box) (-> |#!bigloo_wallow| o side-effect))
(define-inline (pre-make-box-side-effect-set! o::pre-make-box v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (pre-make-box-type::type o::pre-make-box) (-> |#!bigloo_wallow| o type))
(define-inline (pre-make-box-type-set! o::pre-make-box v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (pre-make-box-loc::obj o::pre-make-box) (-> |#!bigloo_wallow| o loc))
(define-inline (pre-make-box-loc-set! o::pre-make-box v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; make-box/Cinfo
(define-inline (make-make-box/Cinfo::make-box/Cinfo loc1560::obj type1561::type side-effect1562::obj key1563::obj value1564::node vtype1565::type approx1566::approx) (instantiate::make-box/Cinfo (loc loc1560) (type type1561) (side-effect side-effect1562) (key key1563) (value value1564) (vtype vtype1565) (approx approx1566)))
(define-inline (make-box/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ make-box/Cinfo cfa_info)))
(define (make-box/Cinfo-nil::make-box/Cinfo) (class-nil (@ make-box/Cinfo cfa_info)))
(define-inline (make-box/Cinfo-approx::approx o::make-box/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (make-box/Cinfo-approx-set! o::make-box/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (make-box/Cinfo-vtype::type o::make-box/Cinfo) (-> |#!bigloo_wallow| o vtype))
(define-inline (make-box/Cinfo-vtype-set! o::make-box/Cinfo v::type) (set! (-> |#!bigloo_wallow| o vtype) v))
(define-inline (make-box/Cinfo-value::node o::make-box/Cinfo) (-> |#!bigloo_wallow| o value))
(define-inline (make-box/Cinfo-value-set! o::make-box/Cinfo v::node) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (make-box/Cinfo-key::obj o::make-box/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (make-box/Cinfo-key-set! o::make-box/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (make-box/Cinfo-side-effect::obj o::make-box/Cinfo) (-> |#!bigloo_wallow| o side-effect))
(define-inline (make-box/Cinfo-side-effect-set! o::make-box/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (make-box/Cinfo-type::type o::make-box/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (make-box/Cinfo-type-set! o::make-box/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (make-box/Cinfo-loc::obj o::make-box/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (make-box/Cinfo-loc-set! o::make-box/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; make-box/O-Cinfo
(define-inline (make-make-box/O-Cinfo::make-box/O-Cinfo loc1551::obj type1552::type side-effect1553::obj key1554::obj value1555::node vtype1556::type approx1557::approx value-approx1558::approx) (instantiate::make-box/O-Cinfo (loc loc1551) (type type1552) (side-effect side-effect1553) (key key1554) (value value1555) (vtype vtype1556) (approx approx1557) (value-approx value-approx1558)))
(define-inline (make-box/O-Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ make-box/O-Cinfo cfa_info)))
(define (make-box/O-Cinfo-nil::make-box/O-Cinfo) (class-nil (@ make-box/O-Cinfo cfa_info)))
(define-inline (make-box/O-Cinfo-value-approx::approx o::make-box/O-Cinfo) (-> |#!bigloo_wallow| o value-approx))
(define-inline (make-box/O-Cinfo-value-approx-set! o::make-box/O-Cinfo v::approx) (set! (-> |#!bigloo_wallow| o value-approx) v))
(define-inline (make-box/O-Cinfo-approx::approx o::make-box/O-Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (make-box/O-Cinfo-approx-set! o::make-box/O-Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (make-box/O-Cinfo-vtype::type o::make-box/O-Cinfo) (-> |#!bigloo_wallow| o vtype))
(define-inline (make-box/O-Cinfo-vtype-set! o::make-box/O-Cinfo v::type) (set! (-> |#!bigloo_wallow| o vtype) v))
(define-inline (make-box/O-Cinfo-value::node o::make-box/O-Cinfo) (-> |#!bigloo_wallow| o value))
(define-inline (make-box/O-Cinfo-value-set! o::make-box/O-Cinfo v::node) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (make-box/O-Cinfo-key::obj o::make-box/O-Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (make-box/O-Cinfo-key-set! o::make-box/O-Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (make-box/O-Cinfo-side-effect::obj o::make-box/O-Cinfo) (-> |#!bigloo_wallow| o side-effect))
(define-inline (make-box/O-Cinfo-side-effect-set! o::make-box/O-Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (make-box/O-Cinfo-type::type o::make-box/O-Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (make-box/O-Cinfo-type-set! o::make-box/O-Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (make-box/O-Cinfo-loc::obj o::make-box/O-Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (make-box/O-Cinfo-loc-set! o::make-box/O-Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; box-set!/Cinfo
(define-inline (make-box-set!/Cinfo::box-set!/Cinfo loc1544::obj type1545::type var1546::var value1547::node vtype1548::type approx1549::approx) (instantiate::box-set!/Cinfo (loc loc1544) (type type1545) (var var1546) (value value1547) (vtype vtype1548) (approx approx1549)))
(define-inline (box-set!/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ box-set!/Cinfo cfa_info)))
(define (box-set!/Cinfo-nil::box-set!/Cinfo) (class-nil (@ box-set!/Cinfo cfa_info)))
(define-inline (box-set!/Cinfo-approx::approx o::box-set!/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (box-set!/Cinfo-approx-set! o::box-set!/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (box-set!/Cinfo-vtype::type o::box-set!/Cinfo) (-> |#!bigloo_wallow| o vtype))
(define-inline (box-set!/Cinfo-vtype-set! o::box-set!/Cinfo v::type) (set! (-> |#!bigloo_wallow| o vtype) v))
(define-inline (box-set!/Cinfo-value::node o::box-set!/Cinfo) (-> |#!bigloo_wallow| o value))
(define-inline (box-set!/Cinfo-value-set! o::box-set!/Cinfo v::node) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (box-set!/Cinfo-var::var o::box-set!/Cinfo) (-> |#!bigloo_wallow| o var))
(define-inline (box-set!/Cinfo-var-set! o::box-set!/Cinfo v::var) (set! (-> |#!bigloo_wallow| o var) v))
(define-inline (box-set!/Cinfo-type::type o::box-set!/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (box-set!/Cinfo-type-set! o::box-set!/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (box-set!/Cinfo-loc::obj o::box-set!/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (box-set!/Cinfo-loc-set! o::box-set!/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; box-ref/Cinfo
(define-inline (make-box-ref/Cinfo::box-ref/Cinfo loc1536::obj type1537::type side-effect1538::obj key1539::obj var1540::var vtype1541::type approx1542::approx) (instantiate::box-ref/Cinfo (loc loc1536) (type type1537) (side-effect side-effect1538) (key key1539) (var var1540) (vtype vtype1541) (approx approx1542)))
(define-inline (box-ref/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ box-ref/Cinfo cfa_info)))
(define (box-ref/Cinfo-nil::box-ref/Cinfo) (class-nil (@ box-ref/Cinfo cfa_info)))
(define-inline (box-ref/Cinfo-approx::approx o::box-ref/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (box-ref/Cinfo-approx-set! o::box-ref/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (box-ref/Cinfo-vtype::type o::box-ref/Cinfo) (-> |#!bigloo_wallow| o vtype))
(define-inline (box-ref/Cinfo-vtype-set! o::box-ref/Cinfo v::type) (set! (-> |#!bigloo_wallow| o vtype) v))
(define-inline (box-ref/Cinfo-var::var o::box-ref/Cinfo) (-> |#!bigloo_wallow| o var))
(define-inline (box-ref/Cinfo-var-set! o::box-ref/Cinfo v::var) (set! (-> |#!bigloo_wallow| o var) v))
(define-inline (box-ref/Cinfo-key::obj o::box-ref/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (box-ref/Cinfo-key-set! o::box-ref/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (box-ref/Cinfo-side-effect::obj o::box-ref/Cinfo) (-> |#!bigloo_wallow| o side-effect))
(define-inline (box-ref/Cinfo-side-effect-set! o::box-ref/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (box-ref/Cinfo-type::type o::box-ref/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (box-ref/Cinfo-type-set! o::box-ref/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (box-ref/Cinfo-loc::obj o::box-ref/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (box-ref/Cinfo-loc-set! o::box-ref/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; box-set!/O-Cinfo
(define-inline (make-box-set!/O-Cinfo::box-set!/O-Cinfo loc1529::obj type1530::type var1531::var value1532::node vtype1533::type approx1534::approx) (instantiate::box-set!/O-Cinfo (loc loc1529) (type type1530) (var var1531) (value value1532) (vtype vtype1533) (approx approx1534)))
(define-inline (box-set!/O-Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ box-set!/O-Cinfo cfa_info)))
(define (box-set!/O-Cinfo-nil::box-set!/O-Cinfo) (class-nil (@ box-set!/O-Cinfo cfa_info)))
(define-inline (box-set!/O-Cinfo-approx::approx o::box-set!/O-Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (box-set!/O-Cinfo-approx-set! o::box-set!/O-Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (box-set!/O-Cinfo-vtype::type o::box-set!/O-Cinfo) (-> |#!bigloo_wallow| o vtype))
(define-inline (box-set!/O-Cinfo-vtype-set! o::box-set!/O-Cinfo v::type) (set! (-> |#!bigloo_wallow| o vtype) v))
(define-inline (box-set!/O-Cinfo-value::node o::box-set!/O-Cinfo) (-> |#!bigloo_wallow| o value))
(define-inline (box-set!/O-Cinfo-value-set! o::box-set!/O-Cinfo v::node) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (box-set!/O-Cinfo-var::var o::box-set!/O-Cinfo) (-> |#!bigloo_wallow| o var))
(define-inline (box-set!/O-Cinfo-var-set! o::box-set!/O-Cinfo v::var) (set! (-> |#!bigloo_wallow| o var) v))
(define-inline (box-set!/O-Cinfo-type::type o::box-set!/O-Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (box-set!/O-Cinfo-type-set! o::box-set!/O-Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (box-set!/O-Cinfo-loc::obj o::box-set!/O-Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (box-set!/O-Cinfo-loc-set! o::box-set!/O-Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; box-ref/O-Cinfo
(define-inline (make-box-ref/O-Cinfo::box-ref/O-Cinfo loc1519::obj type1520::type side-effect1521::obj key1522::obj var1524::var vtype1525::type approx1526::approx) (instantiate::box-ref/O-Cinfo (loc loc1519) (type type1520) (side-effect side-effect1521) (key key1522) (var var1524) (vtype vtype1525) (approx approx1526)))
(define-inline (box-ref/O-Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ box-ref/O-Cinfo cfa_info)))
(define (box-ref/O-Cinfo-nil::box-ref/O-Cinfo) (class-nil (@ box-ref/O-Cinfo cfa_info)))
(define-inline (box-ref/O-Cinfo-approx::approx o::box-ref/O-Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (box-ref/O-Cinfo-approx-set! o::box-ref/O-Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (box-ref/O-Cinfo-vtype::type o::box-ref/O-Cinfo) (-> |#!bigloo_wallow| o vtype))
(define-inline (box-ref/O-Cinfo-vtype-set! o::box-ref/O-Cinfo v::type) (set! (-> |#!bigloo_wallow| o vtype) v))
(define-inline (box-ref/O-Cinfo-var::var o::box-ref/O-Cinfo) (-> |#!bigloo_wallow| o var))
(define-inline (box-ref/O-Cinfo-var-set! o::box-ref/O-Cinfo v::var) (set! (-> |#!bigloo_wallow| o var) v))
(define-inline (box-ref/O-Cinfo-key::obj o::box-ref/O-Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (box-ref/O-Cinfo-key-set! o::box-ref/O-Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (box-ref/O-Cinfo-side-effect::obj o::box-ref/O-Cinfo) (-> |#!bigloo_wallow| o side-effect))
(define-inline (box-ref/O-Cinfo-side-effect-set! o::box-ref/O-Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (box-ref/O-Cinfo-type::type o::box-ref/O-Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (box-ref/O-Cinfo-type-set! o::box-ref/O-Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (box-ref/O-Cinfo-loc::obj o::box-ref/O-Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (box-ref/O-Cinfo-loc-set! o::box-ref/O-Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))
))
