;; ==========================================================
;; Class accessors
;; Bigloo (4.3a)
;; Inria -- Sophia Antipolis     Tue Mar 1 13:02:49 CET 2016 
;; (bigloo -classgen Ast/node.scm -o Ast/nodetype.sch)
;; ==========================================================

;; The directives
(directives

;; node
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-node::node loc1671::obj type1672::type)
    (inline node?::bool ::obj)
    (node-nil::node)
    (inline node-type::type ::node)
    (inline node-type-set! ::node ::type)
    (inline node-loc::obj ::node))))

;; node/effect
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-node/effect::node/effect loc1666::obj type1667::type side-effect1668::obj key1669::obj)
    (inline node/effect?::bool ::obj)
    (node/effect-nil::node/effect)
    (inline node/effect-key::obj ::node/effect)
    (inline node/effect-key-set! ::node/effect ::obj)
    (inline node/effect-side-effect::obj ::node/effect)
    (inline node/effect-side-effect-set! ::node/effect ::obj)
    (inline node/effect-type::type ::node/effect)
    (inline node/effect-type-set! ::node/effect ::type)
    (inline node/effect-loc::obj ::node/effect))))

;; atom
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-atom::atom loc1662::obj type1663::type value1664::obj)
    (inline atom?::bool ::obj)
    (atom-nil::atom)
    (inline atom-value::obj ::atom)
    (inline atom-value-set! ::atom ::obj)
    (inline atom-type::type ::atom)
    (inline atom-type-set! ::atom ::type)
    (inline atom-loc::obj ::atom))))

;; var
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-var::var loc1658::obj type1659::type variable1660::variable)
    (inline var?::bool ::obj)
    (var-nil::var)
    (inline var-variable::variable ::var)
    (inline var-variable-set! ::var ::variable)
    (inline var-type::type ::var)
    (inline var-type-set! ::var ::type)
    (inline var-loc::obj ::var))))

;; closure
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-closure::closure loc1654::obj type1655::type variable1656::variable)
    (inline closure?::bool ::obj)
    (closure-nil::closure)
    (inline closure-variable::variable ::closure)
    (inline closure-variable-set! ::closure ::variable)
    (inline closure-type::type ::closure)
    (inline closure-type-set! ::closure ::type)
    (inline closure-loc::obj ::closure))))

;; kwote
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-kwote::kwote loc1650::obj type1651::type value1652::obj)
    (inline kwote?::bool ::obj)
    (kwote-nil::kwote)
    (inline kwote-value::obj ::kwote)
    (inline kwote-type::type ::kwote)
    (inline kwote-type-set! ::kwote ::type)
    (inline kwote-loc::obj ::kwote))))

;; sequence
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-sequence::sequence loc1642::obj type1643::type side-effect1644::obj key1645::obj nodes1646::obj unsafe1647::bool)
    (inline sequence?::bool ::obj)
    (sequence-nil::sequence)
    (inline sequence-unsafe::bool ::sequence)
    (inline sequence-nodes::obj ::sequence)
    (inline sequence-key::obj ::sequence)
    (inline sequence-key-set! ::sequence ::obj)
    (inline sequence-side-effect::obj ::sequence)
    (inline sequence-side-effect-set! ::sequence ::obj)
    (inline sequence-type::type ::sequence)
    (inline sequence-type-set! ::sequence ::type)
    (inline sequence-loc::obj ::sequence))))

;; app
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-app::app loc1635::obj type1636::type side-effect1637::obj key1638::obj fun1639::var args1640::obj)
    (inline app?::bool ::obj)
    (app-nil::app)
    (inline app-args::obj ::app)
    (inline app-args-set! ::app ::obj)
    (inline app-fun::var ::app)
    (inline app-fun-set! ::app ::var)
    (inline app-key::obj ::app)
    (inline app-key-set! ::app ::obj)
    (inline app-side-effect::obj ::app)
    (inline app-side-effect-set! ::app ::obj)
    (inline app-type::type ::app)
    (inline app-type-set! ::app ::type)
    (inline app-loc::obj ::app))))

;; app-ly
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-app-ly::app-ly loc1630::obj type1631::type fun1632::node arg1633::node)
    (inline app-ly?::bool ::obj)
    (app-ly-nil::app-ly)
    (inline app-ly-arg::node ::app-ly)
    (inline app-ly-arg-set! ::app-ly ::node)
    (inline app-ly-fun::node ::app-ly)
    (inline app-ly-fun-set! ::app-ly ::node)
    (inline app-ly-type::type ::app-ly)
    (inline app-ly-type-set! ::app-ly ::type)
    (inline app-ly-loc::obj ::app-ly))))

;; funcall
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-funcall::funcall loc1623::obj type1624::type fun1625::node args1626::obj strength1627::symbol functions1628::obj)
    (inline funcall?::bool ::obj)
    (funcall-nil::funcall)
    (inline funcall-functions::obj ::funcall)
    (inline funcall-functions-set! ::funcall ::obj)
    (inline funcall-strength::symbol ::funcall)
    (inline funcall-strength-set! ::funcall ::symbol)
    (inline funcall-args::obj ::funcall)
    (inline funcall-args-set! ::funcall ::obj)
    (inline funcall-fun::node ::funcall)
    (inline funcall-fun-set! ::funcall ::node)
    (inline funcall-type::type ::funcall)
    (inline funcall-type-set! ::funcall ::type)
    (inline funcall-loc::obj ::funcall))))

;; extern
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-extern::extern loc1616::obj type1617::type side-effect1618::obj key1619::obj expr*1620::pair-nil effect1621::obj)
    (inline extern?::bool ::obj)
    (extern-nil::extern)
    (inline extern-effect::obj ::extern)
    (inline extern-effect-set! ::extern ::obj)
    (inline extern-expr*::pair-nil ::extern)
    (inline extern-expr*-set! ::extern ::pair-nil)
    (inline extern-key::obj ::extern)
    (inline extern-key-set! ::extern ::obj)
    (inline extern-side-effect::obj ::extern)
    (inline extern-side-effect-set! ::extern ::obj)
    (inline extern-type::type ::extern)
    (inline extern-type-set! ::extern ::type)
    (inline extern-loc::obj ::extern))))

;; pragma
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-pragma::pragma loc1608::obj type1609::type side-effect1610::obj key1611::obj expr*1612::pair-nil effect1613::obj format1614::bstring)
    (inline pragma?::bool ::obj)
    (pragma-nil::pragma)
    (inline pragma-format::bstring ::pragma)
    (inline pragma-effect::obj ::pragma)
    (inline pragma-effect-set! ::pragma ::obj)
    (inline pragma-expr*::pair-nil ::pragma)
    (inline pragma-expr*-set! ::pragma ::pair-nil)
    (inline pragma-key::obj ::pragma)
    (inline pragma-key-set! ::pragma ::obj)
    (inline pragma-side-effect::obj ::pragma)
    (inline pragma-side-effect-set! ::pragma ::obj)
    (inline pragma-type::type ::pragma)
    (inline pragma-type-set! ::pragma ::type)
    (inline pragma-loc::obj ::pragma))))

;; private
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-private::private loc1600::obj type1601::type side-effect1602::obj key1603::obj expr*1604::pair-nil effect1605::obj c-format1606::bstring)
    (inline private?::bool ::obj)
    (private-nil::private)
    (inline private-c-format::bstring ::private)
    (inline private-effect::obj ::private)
    (inline private-effect-set! ::private ::obj)
    (inline private-expr*::pair-nil ::private)
    (inline private-expr*-set! ::private ::pair-nil)
    (inline private-key::obj ::private)
    (inline private-key-set! ::private ::obj)
    (inline private-side-effect::obj ::private)
    (inline private-side-effect-set! ::private ::obj)
    (inline private-type::type ::private)
    (inline private-type-set! ::private ::type)
    (inline private-loc::obj ::private))))

;; getfield
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-getfield::getfield loc1589::obj type1590::type side-effect1591::obj key1592::obj expr*1593::pair-nil effect1594::obj c-format1595::bstring fname1596::bstring ftype1597::type otype1598::type)
    (inline getfield?::bool ::obj)
    (getfield-nil::getfield)
    (inline getfield-otype::type ::getfield)
    (inline getfield-otype-set! ::getfield ::type)
    (inline getfield-ftype::type ::getfield)
    (inline getfield-ftype-set! ::getfield ::type)
    (inline getfield-fname::bstring ::getfield)
    (inline getfield-c-format::bstring ::getfield)
    (inline getfield-effect::obj ::getfield)
    (inline getfield-effect-set! ::getfield ::obj)
    (inline getfield-expr*::pair-nil ::getfield)
    (inline getfield-expr*-set! ::getfield ::pair-nil)
    (inline getfield-key::obj ::getfield)
    (inline getfield-key-set! ::getfield ::obj)
    (inline getfield-side-effect::obj ::getfield)
    (inline getfield-side-effect-set! ::getfield ::obj)
    (inline getfield-type::type ::getfield)
    (inline getfield-type-set! ::getfield ::type)
    (inline getfield-loc::obj ::getfield))))

;; setfield
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-setfield::setfield loc1578::obj type1579::type side-effect1580::obj key1581::obj expr*1582::pair-nil effect1583::obj c-format1584::bstring fname1585::bstring ftype1586::type otype1587::type)
    (inline setfield?::bool ::obj)
    (setfield-nil::setfield)
    (inline setfield-otype::type ::setfield)
    (inline setfield-otype-set! ::setfield ::type)
    (inline setfield-ftype::type ::setfield)
    (inline setfield-ftype-set! ::setfield ::type)
    (inline setfield-fname::bstring ::setfield)
    (inline setfield-c-format::bstring ::setfield)
    (inline setfield-effect::obj ::setfield)
    (inline setfield-effect-set! ::setfield ::obj)
    (inline setfield-expr*::pair-nil ::setfield)
    (inline setfield-expr*-set! ::setfield ::pair-nil)
    (inline setfield-key::obj ::setfield)
    (inline setfield-key-set! ::setfield ::obj)
    (inline setfield-side-effect::obj ::setfield)
    (inline setfield-side-effect-set! ::setfield ::obj)
    (inline setfield-type::type ::setfield)
    (inline setfield-type-set! ::setfield ::type)
    (inline setfield-loc::obj ::setfield))))

;; widening
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-widening::widening loc1569::obj type1570::type side-effect1571::obj key1572::obj expr*1573::pair-nil effect1574::obj c-format1575::bstring otype1576::type)
    (inline widening?::bool ::obj)
    (widening-nil::widening)
    (inline widening-otype::type ::widening)
    (inline widening-otype-set! ::widening ::type)
    (inline widening-c-format::bstring ::widening)
    (inline widening-effect::obj ::widening)
    (inline widening-effect-set! ::widening ::obj)
    (inline widening-expr*::pair-nil ::widening)
    (inline widening-expr*-set! ::widening ::pair-nil)
    (inline widening-key::obj ::widening)
    (inline widening-key-set! ::widening ::obj)
    (inline widening-side-effect::obj ::widening)
    (inline widening-side-effect-set! ::widening ::obj)
    (inline widening-type::type ::widening)
    (inline widening-type-set! ::widening ::type)
    (inline widening-loc::obj ::widening))))

;; new
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-new::new loc1560::obj type1561::type side-effect1562::obj key1563::obj expr*1564::pair-nil effect1565::obj c-format1566::bstring args-type1567::pair-nil)
    (inline new?::bool ::obj)
    (new-nil::new)
    (inline new-args-type::pair-nil ::new)
    (inline new-args-type-set! ::new ::pair-nil)
    (inline new-c-format::bstring ::new)
    (inline new-effect::obj ::new)
    (inline new-effect-set! ::new ::obj)
    (inline new-expr*::pair-nil ::new)
    (inline new-expr*-set! ::new ::pair-nil)
    (inline new-key::obj ::new)
    (inline new-key-set! ::new ::obj)
    (inline new-side-effect::obj ::new)
    (inline new-side-effect-set! ::new ::obj)
    (inline new-type::type ::new)
    (inline new-type-set! ::new ::type)
    (inline new-loc::obj ::new))))

;; valloc
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-valloc::valloc loc1549::obj type1550::type side-effect1551::obj key1552::obj expr*1553::pair-nil effect1554::obj c-format1555::bstring ftype1556::type otype1557::type)
    (inline valloc?::bool ::obj)
    (valloc-nil::valloc)
    (inline valloc-otype::type ::valloc)
    (inline valloc-otype-set! ::valloc ::type)
    (inline valloc-ftype::type ::valloc)
    (inline valloc-ftype-set! ::valloc ::type)
    (inline valloc-c-format::bstring ::valloc)
    (inline valloc-effect::obj ::valloc)
    (inline valloc-effect-set! ::valloc ::obj)
    (inline valloc-expr*::pair-nil ::valloc)
    (inline valloc-expr*-set! ::valloc ::pair-nil)
    (inline valloc-key::obj ::valloc)
    (inline valloc-key-set! ::valloc ::obj)
    (inline valloc-side-effect::obj ::valloc)
    (inline valloc-side-effect-set! ::valloc ::obj)
    (inline valloc-type::type ::valloc)
    (inline valloc-type-set! ::valloc ::type)
    (inline valloc-loc::obj ::valloc))))

;; vref
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-vref::vref loc1537::obj type1538::type side-effect1539::obj key1540::obj expr*1541::pair-nil effect1542::obj c-format1543::bstring ftype1544::type otype1545::type vtype1546::type unsafe1547::bool)
    (inline vref?::bool ::obj)
    (vref-nil::vref)
    (inline vref-unsafe::bool ::vref)
    (inline vref-vtype::type ::vref)
    (inline vref-vtype-set! ::vref ::type)
    (inline vref-otype::type ::vref)
    (inline vref-otype-set! ::vref ::type)
    (inline vref-ftype::type ::vref)
    (inline vref-ftype-set! ::vref ::type)
    (inline vref-c-format::bstring ::vref)
    (inline vref-effect::obj ::vref)
    (inline vref-effect-set! ::vref ::obj)
    (inline vref-expr*::pair-nil ::vref)
    (inline vref-expr*-set! ::vref ::pair-nil)
    (inline vref-key::obj ::vref)
    (inline vref-key-set! ::vref ::obj)
    (inline vref-side-effect::obj ::vref)
    (inline vref-side-effect-set! ::vref ::obj)
    (inline vref-type::type ::vref)
    (inline vref-type-set! ::vref ::type)
    (inline vref-loc::obj ::vref))))

;; vset!
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-vset!::vset! loc1525::obj type1526::type side-effect1527::obj key1528::obj expr*1529::pair-nil effect1530::obj c-format1531::bstring ftype1532::type otype1533::type vtype1534::type unsafe1535::bool)
    (inline vset!?::bool ::obj)
    (vset!-nil::vset!)
    (inline vset!-unsafe::bool ::vset!)
    (inline vset!-vtype::type ::vset!)
    (inline vset!-vtype-set! ::vset! ::type)
    (inline vset!-otype::type ::vset!)
    (inline vset!-otype-set! ::vset! ::type)
    (inline vset!-ftype::type ::vset!)
    (inline vset!-ftype-set! ::vset! ::type)
    (inline vset!-c-format::bstring ::vset!)
    (inline vset!-effect::obj ::vset!)
    (inline vset!-effect-set! ::vset! ::obj)
    (inline vset!-expr*::pair-nil ::vset!)
    (inline vset!-expr*-set! ::vset! ::pair-nil)
    (inline vset!-key::obj ::vset!)
    (inline vset!-key-set! ::vset! ::obj)
    (inline vset!-side-effect::obj ::vset!)
    (inline vset!-side-effect-set! ::vset! ::obj)
    (inline vset!-type::type ::vset!)
    (inline vset!-type-set! ::vset! ::type)
    (inline vset!-loc::obj ::vset!))))

;; vlength
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-vlength::vlength loc1515::obj type1516::type side-effect1517::obj key1518::obj expr*1519::pair-nil effect1520::obj c-format1521::bstring vtype1522::type ftype1523::obj)
    (inline vlength?::bool ::obj)
    (vlength-nil::vlength)
    (inline vlength-ftype::obj ::vlength)
    (inline vlength-vtype::type ::vlength)
    (inline vlength-vtype-set! ::vlength ::type)
    (inline vlength-c-format::bstring ::vlength)
    (inline vlength-effect::obj ::vlength)
    (inline vlength-effect-set! ::vlength ::obj)
    (inline vlength-expr*::pair-nil ::vlength)
    (inline vlength-expr*-set! ::vlength ::pair-nil)
    (inline vlength-key::obj ::vlength)
    (inline vlength-key-set! ::vlength ::obj)
    (inline vlength-side-effect::obj ::vlength)
    (inline vlength-side-effect-set! ::vlength ::obj)
    (inline vlength-type::type ::vlength)
    (inline vlength-type-set! ::vlength ::type)
    (inline vlength-loc::obj ::vlength))))

;; instanceof
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-instanceof::instanceof loc1506::obj type1507::type side-effect1508::obj key1509::obj expr*1510::pair-nil effect1511::obj c-format1512::bstring class1513::type)
    (inline instanceof?::bool ::obj)
    (instanceof-nil::instanceof)
    (inline instanceof-class::type ::instanceof)
    (inline instanceof-class-set! ::instanceof ::type)
    (inline instanceof-c-format::bstring ::instanceof)
    (inline instanceof-effect::obj ::instanceof)
    (inline instanceof-effect-set! ::instanceof ::obj)
    (inline instanceof-expr*::pair-nil ::instanceof)
    (inline instanceof-expr*-set! ::instanceof ::pair-nil)
    (inline instanceof-key::obj ::instanceof)
    (inline instanceof-key-set! ::instanceof ::obj)
    (inline instanceof-side-effect::obj ::instanceof)
    (inline instanceof-side-effect-set! ::instanceof ::obj)
    (inline instanceof-type::type ::instanceof)
    (inline instanceof-type-set! ::instanceof ::type)
    (inline instanceof-loc::obj ::instanceof))))

;; cast-null
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cast-null::cast-null loc1498::obj type1499::type side-effect1500::obj key1501::obj expr*1502::pair-nil effect1503::obj c-format1504::bstring)
    (inline cast-null?::bool ::obj)
    (cast-null-nil::cast-null)
    (inline cast-null-c-format::bstring ::cast-null)
    (inline cast-null-effect::obj ::cast-null)
    (inline cast-null-effect-set! ::cast-null ::obj)
    (inline cast-null-expr*::pair-nil ::cast-null)
    (inline cast-null-expr*-set! ::cast-null ::pair-nil)
    (inline cast-null-key::obj ::cast-null)
    (inline cast-null-key-set! ::cast-null ::obj)
    (inline cast-null-side-effect::obj ::cast-null)
    (inline cast-null-side-effect-set! ::cast-null ::obj)
    (inline cast-null-type::type ::cast-null)
    (inline cast-null-type-set! ::cast-null ::type)
    (inline cast-null-loc::obj ::cast-null))))

;; cast
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cast::cast loc1494::obj type1495::type arg1496::node)
    (inline cast?::bool ::obj)
    (cast-nil::cast)
    (inline cast-arg::node ::cast)
    (inline cast-arg-set! ::cast ::node)
    (inline cast-type::type ::cast)
    (inline cast-type-set! ::cast ::type)
    (inline cast-loc::obj ::cast))))

;; setq
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-setq::setq loc1489::obj type1490::type var1491::var value1492::node)
    (inline setq?::bool ::obj)
    (setq-nil::setq)
    (inline setq-value::node ::setq)
    (inline setq-value-set! ::setq ::node)
    (inline setq-var::var ::setq)
    (inline setq-var-set! ::setq ::var)
    (inline setq-type::type ::setq)
    (inline setq-type-set! ::setq ::type)
    (inline setq-loc::obj ::setq))))

;; conditional
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-conditional::conditional loc1481::obj type1482::type side-effect1483::obj key1484::obj test1485::node true1486::node false1487::node)
    (inline conditional?::bool ::obj)
    (conditional-nil::conditional)
    (inline conditional-false::node ::conditional)
    (inline conditional-false-set! ::conditional ::node)
    (inline conditional-true::node ::conditional)
    (inline conditional-true-set! ::conditional ::node)
    (inline conditional-test::node ::conditional)
    (inline conditional-test-set! ::conditional ::node)
    (inline conditional-key::obj ::conditional)
    (inline conditional-key-set! ::conditional ::obj)
    (inline conditional-side-effect::obj ::conditional)
    (inline conditional-side-effect-set! ::conditional ::obj)
    (inline conditional-type::type ::conditional)
    (inline conditional-type-set! ::conditional ::type)
    (inline conditional-loc::obj ::conditional))))

;; fail
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-fail::fail loc1475::obj type1476::type proc1477::node msg1478::node obj1479::node)
    (inline fail?::bool ::obj)
    (fail-nil::fail)
    (inline fail-obj::node ::fail)
    (inline fail-obj-set! ::fail ::node)
    (inline fail-msg::node ::fail)
    (inline fail-msg-set! ::fail ::node)
    (inline fail-proc::node ::fail)
    (inline fail-proc-set! ::fail ::node)
    (inline fail-type::type ::fail)
    (inline fail-type-set! ::fail ::type)
    (inline fail-loc::obj ::fail))))

;; select
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-select::select loc1467::obj type1468::type side-effect1469::obj key1470::obj test1471::node clauses1472::obj item-type1473::type)
    (inline select?::bool ::obj)
    (select-nil::select)
    (inline select-item-type::type ::select)
    (inline select-item-type-set! ::select ::type)
    (inline select-clauses::obj ::select)
    (inline select-test::node ::select)
    (inline select-test-set! ::select ::node)
    (inline select-key::obj ::select)
    (inline select-key-set! ::select ::obj)
    (inline select-side-effect::obj ::select)
    (inline select-side-effect-set! ::select ::obj)
    (inline select-type::type ::select)
    (inline select-type-set! ::select ::type)
    (inline select-loc::obj ::select))))

;; let-fun
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-let-fun::let-fun loc1460::obj type1461::type side-effect1462::obj key1463::obj locals1464::obj body1465::node)
    (inline let-fun?::bool ::obj)
    (let-fun-nil::let-fun)
    (inline let-fun-body::node ::let-fun)
    (inline let-fun-body-set! ::let-fun ::node)
    (inline let-fun-locals::obj ::let-fun)
    (inline let-fun-locals-set! ::let-fun ::obj)
    (inline let-fun-key::obj ::let-fun)
    (inline let-fun-key-set! ::let-fun ::obj)
    (inline let-fun-side-effect::obj ::let-fun)
    (inline let-fun-side-effect-set! ::let-fun ::obj)
    (inline let-fun-type::type ::let-fun)
    (inline let-fun-type-set! ::let-fun ::type)
    (inline let-fun-loc::obj ::let-fun))))

;; let-var
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-let-var::let-var loc1451::obj type1452::type side-effect1453::obj key1454::obj bindings1455::obj body1456::node removable?1457::bool)
    (inline let-var?::bool ::obj)
    (let-var-nil::let-var)
    (inline let-var-removable?::bool ::let-var)
    (inline let-var-removable?-set! ::let-var ::bool)
    (inline let-var-body::node ::let-var)
    (inline let-var-body-set! ::let-var ::node)
    (inline let-var-bindings::obj ::let-var)
    (inline let-var-bindings-set! ::let-var ::obj)
    (inline let-var-key::obj ::let-var)
    (inline let-var-key-set! ::let-var ::obj)
    (inline let-var-side-effect::obj ::let-var)
    (inline let-var-side-effect-set! ::let-var ::obj)
    (inline let-var-type::type ::let-var)
    (inline let-var-type-set! ::let-var ::type)
    (inline let-var-loc::obj ::let-var))))

;; set-ex-it
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-set-ex-it::set-ex-it loc1446::obj type1447::type var1448::var body1449::node)
    (inline set-ex-it?::bool ::obj)
    (set-ex-it-nil::set-ex-it)
    (inline set-ex-it-body::node ::set-ex-it)
    (inline set-ex-it-body-set! ::set-ex-it ::node)
    (inline set-ex-it-var::var ::set-ex-it)
    (inline set-ex-it-var-set! ::set-ex-it ::var)
    (inline set-ex-it-type::type ::set-ex-it)
    (inline set-ex-it-type-set! ::set-ex-it ::type)
    (inline set-ex-it-loc::obj ::set-ex-it))))

;; jump-ex-it
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-jump-ex-it::jump-ex-it loc1440::obj type1441::type exit1442::node value1443::node)
    (inline jump-ex-it?::bool ::obj)
    (jump-ex-it-nil::jump-ex-it)
    (inline jump-ex-it-value::node ::jump-ex-it)
    (inline jump-ex-it-value-set! ::jump-ex-it ::node)
    (inline jump-ex-it-exit::node ::jump-ex-it)
    (inline jump-ex-it-exit-set! ::jump-ex-it ::node)
    (inline jump-ex-it-type::type ::jump-ex-it)
    (inline jump-ex-it-type-set! ::jump-ex-it ::type)
    (inline jump-ex-it-loc::obj ::jump-ex-it))))

;; retblock
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-retblock::retblock loc1435::obj type1436::type body1438::node)
    (inline retblock?::bool ::obj)
    (retblock-nil::retblock)
    (inline retblock-body::node ::retblock)
    (inline retblock-body-set! ::retblock ::node)
    (inline retblock-type::type ::retblock)
    (inline retblock-type-set! ::retblock ::type)
    (inline retblock-loc::obj ::retblock))))

;; return
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-return::return loc1430::obj type1431::type block1432::retblock value1433::node)
    (inline return?::bool ::obj)
    (return-nil::return)
    (inline return-value::node ::return)
    (inline return-value-set! ::return ::node)
    (inline return-block::retblock ::return)
    (inline return-block-set! ::return ::retblock)
    (inline return-type::type ::return)
    (inline return-type-set! ::return ::type)
    (inline return-loc::obj ::return))))

;; make-box
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-make-box::make-box loc1423::obj type1424::type side-effect1425::obj key1426::obj value1427::node vtype1428::type)
    (inline make-box?::bool ::obj)
    (make-box-nil::make-box)
    (inline make-box-vtype::type ::make-box)
    (inline make-box-vtype-set! ::make-box ::type)
    (inline make-box-value::node ::make-box)
    (inline make-box-value-set! ::make-box ::node)
    (inline make-box-key::obj ::make-box)
    (inline make-box-key-set! ::make-box ::obj)
    (inline make-box-side-effect::obj ::make-box)
    (inline make-box-side-effect-set! ::make-box ::obj)
    (inline make-box-type::type ::make-box)
    (inline make-box-type-set! ::make-box ::type)
    (inline make-box-loc::obj ::make-box))))

;; box-ref
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-box-ref::box-ref loc1416::obj type1417::type side-effect1418::obj key1419::obj var1420::var vtype1421::type)
    (inline box-ref?::bool ::obj)
    (box-ref-nil::box-ref)
    (inline box-ref-vtype::type ::box-ref)
    (inline box-ref-vtype-set! ::box-ref ::type)
    (inline box-ref-var::var ::box-ref)
    (inline box-ref-var-set! ::box-ref ::var)
    (inline box-ref-key::obj ::box-ref)
    (inline box-ref-key-set! ::box-ref ::obj)
    (inline box-ref-side-effect::obj ::box-ref)
    (inline box-ref-side-effect-set! ::box-ref ::obj)
    (inline box-ref-type::type ::box-ref)
    (inline box-ref-type-set! ::box-ref ::type)
    (inline box-ref-loc::obj ::box-ref))))

;; box-set!
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-box-set!::box-set! loc1410::obj type1411::type var1412::var value1413::node vtype1414::type)
    (inline box-set!?::bool ::obj)
    (box-set!-nil::box-set!)
    (inline box-set!-vtype::type ::box-set!)
    (inline box-set!-vtype-set! ::box-set! ::type)
    (inline box-set!-value::node ::box-set!)
    (inline box-set!-value-set! ::box-set! ::node)
    (inline box-set!-var::var ::box-set!)
    (inline box-set!-var-set! ::box-set! ::var)
    (inline box-set!-type::type ::box-set!)
    (inline box-set!-type-set! ::box-set! ::type)
    (inline box-set!-loc::obj ::box-set!))))

;; sync
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-sync::sync loc1404::obj type1405::type mutex1406::node prelock1407::node body1408::node)
    (inline sync?::bool ::obj)
    (sync-nil::sync)
    (inline sync-body::node ::sync)
    (inline sync-body-set! ::sync ::node)
    (inline sync-prelock::node ::sync)
    (inline sync-prelock-set! ::sync ::node)
    (inline sync-mutex::node ::sync)
    (inline sync-mutex-set! ::sync ::node)
    (inline sync-type::type ::sync)
    (inline sync-type-set! ::sync ::type)
    (inline sync-loc::obj ::sync)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; node
(define-inline (make-node::node loc1671::obj type1672::type) (instantiate::node (loc loc1671) (type type1672)))
(define-inline (node?::bool obj::obj) ((@ isa? __object) obj (@ node ast_node)))
(define (node-nil::node) (class-nil (@ node ast_node)))
(define-inline (node-type::type o::node) (-> |#!bigloo_wallow| o type))
(define-inline (node-type-set! o::node v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (node-loc::obj o::node) (-> |#!bigloo_wallow| o loc))
(define-inline (node-loc-set! o::node v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; node/effect
(define-inline (make-node/effect::node/effect loc1666::obj type1667::type side-effect1668::obj key1669::obj) (instantiate::node/effect (loc loc1666) (type type1667) (side-effect side-effect1668) (key key1669)))
(define-inline (node/effect?::bool obj::obj) ((@ isa? __object) obj (@ node/effect ast_node)))
(define (node/effect-nil::node/effect) (class-nil (@ node/effect ast_node)))
(define-inline (node/effect-key::obj o::node/effect) (-> |#!bigloo_wallow| o key))
(define-inline (node/effect-key-set! o::node/effect v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (node/effect-side-effect::obj o::node/effect) (-> |#!bigloo_wallow| o side-effect))
(define-inline (node/effect-side-effect-set! o::node/effect v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (node/effect-type::type o::node/effect) (-> |#!bigloo_wallow| o type))
(define-inline (node/effect-type-set! o::node/effect v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (node/effect-loc::obj o::node/effect) (-> |#!bigloo_wallow| o loc))
(define-inline (node/effect-loc-set! o::node/effect v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; atom
(define-inline (make-atom::atom loc1662::obj type1663::type value1664::obj) (instantiate::atom (loc loc1662) (type type1663) (value value1664)))
(define-inline (atom?::bool obj::obj) ((@ isa? __object) obj (@ atom ast_node)))
(define (atom-nil::atom) (class-nil (@ atom ast_node)))
(define-inline (atom-value::obj o::atom) (-> |#!bigloo_wallow| o value))
(define-inline (atom-value-set! o::atom v::obj) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (atom-type::type o::atom) (-> |#!bigloo_wallow| o type))
(define-inline (atom-type-set! o::atom v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (atom-loc::obj o::atom) (-> |#!bigloo_wallow| o loc))
(define-inline (atom-loc-set! o::atom v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; var
(define-inline (make-var::var loc1658::obj type1659::type variable1660::variable) (instantiate::var (loc loc1658) (type type1659) (variable variable1660)))
(define-inline (var?::bool obj::obj) ((@ isa? __object) obj (@ var ast_node)))
(define (var-nil::var) (class-nil (@ var ast_node)))
(define-inline (var-variable::variable o::var) (-> |#!bigloo_wallow| o variable))
(define-inline (var-variable-set! o::var v::variable) (set! (-> |#!bigloo_wallow| o variable) v))
(define-inline (var-type::type o::var) (-> |#!bigloo_wallow| o type))
(define-inline (var-type-set! o::var v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (var-loc::obj o::var) (-> |#!bigloo_wallow| o loc))
(define-inline (var-loc-set! o::var v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; closure
(define-inline (make-closure::closure loc1654::obj type1655::type variable1656::variable) (instantiate::closure (loc loc1654) (type type1655) (variable variable1656)))
(define-inline (closure?::bool obj::obj) ((@ isa? __object) obj (@ closure ast_node)))
(define (closure-nil::closure) (class-nil (@ closure ast_node)))
(define-inline (closure-variable::variable o::closure) (-> |#!bigloo_wallow| o variable))
(define-inline (closure-variable-set! o::closure v::variable) (set! (-> |#!bigloo_wallow| o variable) v))
(define-inline (closure-type::type o::closure) (-> |#!bigloo_wallow| o type))
(define-inline (closure-type-set! o::closure v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (closure-loc::obj o::closure) (-> |#!bigloo_wallow| o loc))
(define-inline (closure-loc-set! o::closure v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; kwote
(define-inline (make-kwote::kwote loc1650::obj type1651::type value1652::obj) (instantiate::kwote (loc loc1650) (type type1651) (value value1652)))
(define-inline (kwote?::bool obj::obj) ((@ isa? __object) obj (@ kwote ast_node)))
(define (kwote-nil::kwote) (class-nil (@ kwote ast_node)))
(define-inline (kwote-value::obj o::kwote) (-> |#!bigloo_wallow| o value))
(define-inline (kwote-value-set! o::kwote v::obj) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (kwote-type::type o::kwote) (-> |#!bigloo_wallow| o type))
(define-inline (kwote-type-set! o::kwote v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (kwote-loc::obj o::kwote) (-> |#!bigloo_wallow| o loc))
(define-inline (kwote-loc-set! o::kwote v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; sequence
(define-inline (make-sequence::sequence loc1642::obj type1643::type side-effect1644::obj key1645::obj nodes1646::obj unsafe1647::bool) (instantiate::sequence (loc loc1642) (type type1643) (side-effect side-effect1644) (key key1645) (nodes nodes1646) (unsafe unsafe1647)))
(define-inline (sequence?::bool obj::obj) ((@ isa? __object) obj (@ sequence ast_node)))
(define (sequence-nil::sequence) (class-nil (@ sequence ast_node)))
(define-inline (sequence-unsafe::bool o::sequence) (-> |#!bigloo_wallow| o unsafe))
(define-inline (sequence-unsafe-set! o::sequence v::bool) (set! (-> |#!bigloo_wallow| o unsafe) v))
(define-inline (sequence-nodes::obj o::sequence) (-> |#!bigloo_wallow| o nodes))
(define-inline (sequence-nodes-set! o::sequence v::obj) (set! (-> |#!bigloo_wallow| o nodes) v))
(define-inline (sequence-key::obj o::sequence) (-> |#!bigloo_wallow| o key))
(define-inline (sequence-key-set! o::sequence v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (sequence-side-effect::obj o::sequence) (-> |#!bigloo_wallow| o side-effect))
(define-inline (sequence-side-effect-set! o::sequence v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (sequence-type::type o::sequence) (-> |#!bigloo_wallow| o type))
(define-inline (sequence-type-set! o::sequence v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (sequence-loc::obj o::sequence) (-> |#!bigloo_wallow| o loc))
(define-inline (sequence-loc-set! o::sequence v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; app
(define-inline (make-app::app loc1635::obj type1636::type side-effect1637::obj key1638::obj fun1639::var args1640::obj) (instantiate::app (loc loc1635) (type type1636) (side-effect side-effect1637) (key key1638) (fun fun1639) (args args1640)))
(define-inline (app?::bool obj::obj) ((@ isa? __object) obj (@ app ast_node)))
(define (app-nil::app) (class-nil (@ app ast_node)))
(define-inline (app-args::obj o::app) (-> |#!bigloo_wallow| o args))
(define-inline (app-args-set! o::app v::obj) (set! (-> |#!bigloo_wallow| o args) v))
(define-inline (app-fun::var o::app) (-> |#!bigloo_wallow| o fun))
(define-inline (app-fun-set! o::app v::var) (set! (-> |#!bigloo_wallow| o fun) v))
(define-inline (app-key::obj o::app) (-> |#!bigloo_wallow| o key))
(define-inline (app-key-set! o::app v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (app-side-effect::obj o::app) (-> |#!bigloo_wallow| o side-effect))
(define-inline (app-side-effect-set! o::app v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (app-type::type o::app) (-> |#!bigloo_wallow| o type))
(define-inline (app-type-set! o::app v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (app-loc::obj o::app) (-> |#!bigloo_wallow| o loc))
(define-inline (app-loc-set! o::app v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; app-ly
(define-inline (make-app-ly::app-ly loc1630::obj type1631::type fun1632::node arg1633::node) (instantiate::app-ly (loc loc1630) (type type1631) (fun fun1632) (arg arg1633)))
(define-inline (app-ly?::bool obj::obj) ((@ isa? __object) obj (@ app-ly ast_node)))
(define (app-ly-nil::app-ly) (class-nil (@ app-ly ast_node)))
(define-inline (app-ly-arg::node o::app-ly) (-> |#!bigloo_wallow| o arg))
(define-inline (app-ly-arg-set! o::app-ly v::node) (set! (-> |#!bigloo_wallow| o arg) v))
(define-inline (app-ly-fun::node o::app-ly) (-> |#!bigloo_wallow| o fun))
(define-inline (app-ly-fun-set! o::app-ly v::node) (set! (-> |#!bigloo_wallow| o fun) v))
(define-inline (app-ly-type::type o::app-ly) (-> |#!bigloo_wallow| o type))
(define-inline (app-ly-type-set! o::app-ly v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (app-ly-loc::obj o::app-ly) (-> |#!bigloo_wallow| o loc))
(define-inline (app-ly-loc-set! o::app-ly v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; funcall
(define-inline (make-funcall::funcall loc1623::obj type1624::type fun1625::node args1626::obj strength1627::symbol functions1628::obj) (instantiate::funcall (loc loc1623) (type type1624) (fun fun1625) (args args1626) (strength strength1627) (functions functions1628)))
(define-inline (funcall?::bool obj::obj) ((@ isa? __object) obj (@ funcall ast_node)))
(define (funcall-nil::funcall) (class-nil (@ funcall ast_node)))
(define-inline (funcall-functions::obj o::funcall) (-> |#!bigloo_wallow| o functions))
(define-inline (funcall-functions-set! o::funcall v::obj) (set! (-> |#!bigloo_wallow| o functions) v))
(define-inline (funcall-strength::symbol o::funcall) (-> |#!bigloo_wallow| o strength))
(define-inline (funcall-strength-set! o::funcall v::symbol) (set! (-> |#!bigloo_wallow| o strength) v))
(define-inline (funcall-args::obj o::funcall) (-> |#!bigloo_wallow| o args))
(define-inline (funcall-args-set! o::funcall v::obj) (set! (-> |#!bigloo_wallow| o args) v))
(define-inline (funcall-fun::node o::funcall) (-> |#!bigloo_wallow| o fun))
(define-inline (funcall-fun-set! o::funcall v::node) (set! (-> |#!bigloo_wallow| o fun) v))
(define-inline (funcall-type::type o::funcall) (-> |#!bigloo_wallow| o type))
(define-inline (funcall-type-set! o::funcall v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (funcall-loc::obj o::funcall) (-> |#!bigloo_wallow| o loc))
(define-inline (funcall-loc-set! o::funcall v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; extern
(define-inline (make-extern::extern loc1616::obj type1617::type side-effect1618::obj key1619::obj expr*1620::pair-nil effect1621::obj) (instantiate::extern (loc loc1616) (type type1617) (side-effect side-effect1618) (key key1619) (expr* expr*1620) (effect effect1621)))
(define-inline (extern?::bool obj::obj) ((@ isa? __object) obj (@ extern ast_node)))
(define (extern-nil::extern) (class-nil (@ extern ast_node)))
(define-inline (extern-effect::obj o::extern) (-> |#!bigloo_wallow| o effect))
(define-inline (extern-effect-set! o::extern v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (extern-expr*::pair-nil o::extern) (-> |#!bigloo_wallow| o expr*))
(define-inline (extern-expr*-set! o::extern v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (extern-key::obj o::extern) (-> |#!bigloo_wallow| o key))
(define-inline (extern-key-set! o::extern v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (extern-side-effect::obj o::extern) (-> |#!bigloo_wallow| o side-effect))
(define-inline (extern-side-effect-set! o::extern v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (extern-type::type o::extern) (-> |#!bigloo_wallow| o type))
(define-inline (extern-type-set! o::extern v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (extern-loc::obj o::extern) (-> |#!bigloo_wallow| o loc))
(define-inline (extern-loc-set! o::extern v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; pragma
(define-inline (make-pragma::pragma loc1608::obj type1609::type side-effect1610::obj key1611::obj expr*1612::pair-nil effect1613::obj format1614::bstring) (instantiate::pragma (loc loc1608) (type type1609) (side-effect side-effect1610) (key key1611) (expr* expr*1612) (effect effect1613) (format format1614)))
(define-inline (pragma?::bool obj::obj) ((@ isa? __object) obj (@ pragma ast_node)))
(define (pragma-nil::pragma) (class-nil (@ pragma ast_node)))
(define-inline (pragma-format::bstring o::pragma) (-> |#!bigloo_wallow| o format))
(define-inline (pragma-format-set! o::pragma v::bstring) (set! (-> |#!bigloo_wallow| o format) v))
(define-inline (pragma-effect::obj o::pragma) (-> |#!bigloo_wallow| o effect))
(define-inline (pragma-effect-set! o::pragma v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (pragma-expr*::pair-nil o::pragma) (-> |#!bigloo_wallow| o expr*))
(define-inline (pragma-expr*-set! o::pragma v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (pragma-key::obj o::pragma) (-> |#!bigloo_wallow| o key))
(define-inline (pragma-key-set! o::pragma v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (pragma-side-effect::obj o::pragma) (-> |#!bigloo_wallow| o side-effect))
(define-inline (pragma-side-effect-set! o::pragma v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (pragma-type::type o::pragma) (-> |#!bigloo_wallow| o type))
(define-inline (pragma-type-set! o::pragma v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (pragma-loc::obj o::pragma) (-> |#!bigloo_wallow| o loc))
(define-inline (pragma-loc-set! o::pragma v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; private
(define-inline (make-private::private loc1600::obj type1601::type side-effect1602::obj key1603::obj expr*1604::pair-nil effect1605::obj c-format1606::bstring) (instantiate::private (loc loc1600) (type type1601) (side-effect side-effect1602) (key key1603) (expr* expr*1604) (effect effect1605) (c-format c-format1606)))
(define-inline (private?::bool obj::obj) ((@ isa? __object) obj (@ private ast_node)))
(define (private-nil::private) (class-nil (@ private ast_node)))
(define-inline (private-c-format::bstring o::private) (-> |#!bigloo_wallow| o c-format))
(define-inline (private-c-format-set! o::private v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (private-effect::obj o::private) (-> |#!bigloo_wallow| o effect))
(define-inline (private-effect-set! o::private v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (private-expr*::pair-nil o::private) (-> |#!bigloo_wallow| o expr*))
(define-inline (private-expr*-set! o::private v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (private-key::obj o::private) (-> |#!bigloo_wallow| o key))
(define-inline (private-key-set! o::private v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (private-side-effect::obj o::private) (-> |#!bigloo_wallow| o side-effect))
(define-inline (private-side-effect-set! o::private v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (private-type::type o::private) (-> |#!bigloo_wallow| o type))
(define-inline (private-type-set! o::private v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (private-loc::obj o::private) (-> |#!bigloo_wallow| o loc))
(define-inline (private-loc-set! o::private v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; getfield
(define-inline (make-getfield::getfield loc1589::obj type1590::type side-effect1591::obj key1592::obj expr*1593::pair-nil effect1594::obj c-format1595::bstring fname1596::bstring ftype1597::type otype1598::type) (instantiate::getfield (loc loc1589) (type type1590) (side-effect side-effect1591) (key key1592) (expr* expr*1593) (effect effect1594) (c-format c-format1595) (fname fname1596) (ftype ftype1597) (otype otype1598)))
(define-inline (getfield?::bool obj::obj) ((@ isa? __object) obj (@ getfield ast_node)))
(define (getfield-nil::getfield) (class-nil (@ getfield ast_node)))
(define-inline (getfield-otype::type o::getfield) (-> |#!bigloo_wallow| o otype))
(define-inline (getfield-otype-set! o::getfield v::type) (set! (-> |#!bigloo_wallow| o otype) v))
(define-inline (getfield-ftype::type o::getfield) (-> |#!bigloo_wallow| o ftype))
(define-inline (getfield-ftype-set! o::getfield v::type) (set! (-> |#!bigloo_wallow| o ftype) v))
(define-inline (getfield-fname::bstring o::getfield) (-> |#!bigloo_wallow| o fname))
(define-inline (getfield-fname-set! o::getfield v::bstring) (set! (-> |#!bigloo_wallow| o fname) v))
(define-inline (getfield-c-format::bstring o::getfield) (-> |#!bigloo_wallow| o c-format))
(define-inline (getfield-c-format-set! o::getfield v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (getfield-effect::obj o::getfield) (-> |#!bigloo_wallow| o effect))
(define-inline (getfield-effect-set! o::getfield v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (getfield-expr*::pair-nil o::getfield) (-> |#!bigloo_wallow| o expr*))
(define-inline (getfield-expr*-set! o::getfield v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (getfield-key::obj o::getfield) (-> |#!bigloo_wallow| o key))
(define-inline (getfield-key-set! o::getfield v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (getfield-side-effect::obj o::getfield) (-> |#!bigloo_wallow| o side-effect))
(define-inline (getfield-side-effect-set! o::getfield v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (getfield-type::type o::getfield) (-> |#!bigloo_wallow| o type))
(define-inline (getfield-type-set! o::getfield v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (getfield-loc::obj o::getfield) (-> |#!bigloo_wallow| o loc))
(define-inline (getfield-loc-set! o::getfield v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; setfield
(define-inline (make-setfield::setfield loc1578::obj type1579::type side-effect1580::obj key1581::obj expr*1582::pair-nil effect1583::obj c-format1584::bstring fname1585::bstring ftype1586::type otype1587::type) (instantiate::setfield (loc loc1578) (type type1579) (side-effect side-effect1580) (key key1581) (expr* expr*1582) (effect effect1583) (c-format c-format1584) (fname fname1585) (ftype ftype1586) (otype otype1587)))
(define-inline (setfield?::bool obj::obj) ((@ isa? __object) obj (@ setfield ast_node)))
(define (setfield-nil::setfield) (class-nil (@ setfield ast_node)))
(define-inline (setfield-otype::type o::setfield) (-> |#!bigloo_wallow| o otype))
(define-inline (setfield-otype-set! o::setfield v::type) (set! (-> |#!bigloo_wallow| o otype) v))
(define-inline (setfield-ftype::type o::setfield) (-> |#!bigloo_wallow| o ftype))
(define-inline (setfield-ftype-set! o::setfield v::type) (set! (-> |#!bigloo_wallow| o ftype) v))
(define-inline (setfield-fname::bstring o::setfield) (-> |#!bigloo_wallow| o fname))
(define-inline (setfield-fname-set! o::setfield v::bstring) (set! (-> |#!bigloo_wallow| o fname) v))
(define-inline (setfield-c-format::bstring o::setfield) (-> |#!bigloo_wallow| o c-format))
(define-inline (setfield-c-format-set! o::setfield v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (setfield-effect::obj o::setfield) (-> |#!bigloo_wallow| o effect))
(define-inline (setfield-effect-set! o::setfield v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (setfield-expr*::pair-nil o::setfield) (-> |#!bigloo_wallow| o expr*))
(define-inline (setfield-expr*-set! o::setfield v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (setfield-key::obj o::setfield) (-> |#!bigloo_wallow| o key))
(define-inline (setfield-key-set! o::setfield v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (setfield-side-effect::obj o::setfield) (-> |#!bigloo_wallow| o side-effect))
(define-inline (setfield-side-effect-set! o::setfield v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (setfield-type::type o::setfield) (-> |#!bigloo_wallow| o type))
(define-inline (setfield-type-set! o::setfield v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (setfield-loc::obj o::setfield) (-> |#!bigloo_wallow| o loc))
(define-inline (setfield-loc-set! o::setfield v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; widening
(define-inline (make-widening::widening loc1569::obj type1570::type side-effect1571::obj key1572::obj expr*1573::pair-nil effect1574::obj c-format1575::bstring otype1576::type) (instantiate::widening (loc loc1569) (type type1570) (side-effect side-effect1571) (key key1572) (expr* expr*1573) (effect effect1574) (c-format c-format1575) (otype otype1576)))
(define-inline (widening?::bool obj::obj) ((@ isa? __object) obj (@ widening ast_node)))
(define (widening-nil::widening) (class-nil (@ widening ast_node)))
(define-inline (widening-otype::type o::widening) (-> |#!bigloo_wallow| o otype))
(define-inline (widening-otype-set! o::widening v::type) (set! (-> |#!bigloo_wallow| o otype) v))
(define-inline (widening-c-format::bstring o::widening) (-> |#!bigloo_wallow| o c-format))
(define-inline (widening-c-format-set! o::widening v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (widening-effect::obj o::widening) (-> |#!bigloo_wallow| o effect))
(define-inline (widening-effect-set! o::widening v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (widening-expr*::pair-nil o::widening) (-> |#!bigloo_wallow| o expr*))
(define-inline (widening-expr*-set! o::widening v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (widening-key::obj o::widening) (-> |#!bigloo_wallow| o key))
(define-inline (widening-key-set! o::widening v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (widening-side-effect::obj o::widening) (-> |#!bigloo_wallow| o side-effect))
(define-inline (widening-side-effect-set! o::widening v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (widening-type::type o::widening) (-> |#!bigloo_wallow| o type))
(define-inline (widening-type-set! o::widening v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (widening-loc::obj o::widening) (-> |#!bigloo_wallow| o loc))
(define-inline (widening-loc-set! o::widening v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; new
(define-inline (make-new::new loc1560::obj type1561::type side-effect1562::obj key1563::obj expr*1564::pair-nil effect1565::obj c-format1566::bstring args-type1567::pair-nil) (instantiate::new (loc loc1560) (type type1561) (side-effect side-effect1562) (key key1563) (expr* expr*1564) (effect effect1565) (c-format c-format1566) (args-type args-type1567)))
(define-inline (new?::bool obj::obj) ((@ isa? __object) obj (@ new ast_node)))
(define (new-nil::new) (class-nil (@ new ast_node)))
(define-inline (new-args-type::pair-nil o::new) (-> |#!bigloo_wallow| o args-type))
(define-inline (new-args-type-set! o::new v::pair-nil) (set! (-> |#!bigloo_wallow| o args-type) v))
(define-inline (new-c-format::bstring o::new) (-> |#!bigloo_wallow| o c-format))
(define-inline (new-c-format-set! o::new v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (new-effect::obj o::new) (-> |#!bigloo_wallow| o effect))
(define-inline (new-effect-set! o::new v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (new-expr*::pair-nil o::new) (-> |#!bigloo_wallow| o expr*))
(define-inline (new-expr*-set! o::new v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (new-key::obj o::new) (-> |#!bigloo_wallow| o key))
(define-inline (new-key-set! o::new v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (new-side-effect::obj o::new) (-> |#!bigloo_wallow| o side-effect))
(define-inline (new-side-effect-set! o::new v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (new-type::type o::new) (-> |#!bigloo_wallow| o type))
(define-inline (new-type-set! o::new v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (new-loc::obj o::new) (-> |#!bigloo_wallow| o loc))
(define-inline (new-loc-set! o::new v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; valloc
(define-inline (make-valloc::valloc loc1549::obj type1550::type side-effect1551::obj key1552::obj expr*1553::pair-nil effect1554::obj c-format1555::bstring ftype1556::type otype1557::type) (instantiate::valloc (loc loc1549) (type type1550) (side-effect side-effect1551) (key key1552) (expr* expr*1553) (effect effect1554) (c-format c-format1555) (ftype ftype1556) (otype otype1557)))
(define-inline (valloc?::bool obj::obj) ((@ isa? __object) obj (@ valloc ast_node)))
(define (valloc-nil::valloc) (class-nil (@ valloc ast_node)))
(define-inline (valloc-otype::type o::valloc) (-> |#!bigloo_wallow| o otype))
(define-inline (valloc-otype-set! o::valloc v::type) (set! (-> |#!bigloo_wallow| o otype) v))
(define-inline (valloc-ftype::type o::valloc) (-> |#!bigloo_wallow| o ftype))
(define-inline (valloc-ftype-set! o::valloc v::type) (set! (-> |#!bigloo_wallow| o ftype) v))
(define-inline (valloc-c-format::bstring o::valloc) (-> |#!bigloo_wallow| o c-format))
(define-inline (valloc-c-format-set! o::valloc v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (valloc-effect::obj o::valloc) (-> |#!bigloo_wallow| o effect))
(define-inline (valloc-effect-set! o::valloc v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (valloc-expr*::pair-nil o::valloc) (-> |#!bigloo_wallow| o expr*))
(define-inline (valloc-expr*-set! o::valloc v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (valloc-key::obj o::valloc) (-> |#!bigloo_wallow| o key))
(define-inline (valloc-key-set! o::valloc v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (valloc-side-effect::obj o::valloc) (-> |#!bigloo_wallow| o side-effect))
(define-inline (valloc-side-effect-set! o::valloc v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (valloc-type::type o::valloc) (-> |#!bigloo_wallow| o type))
(define-inline (valloc-type-set! o::valloc v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (valloc-loc::obj o::valloc) (-> |#!bigloo_wallow| o loc))
(define-inline (valloc-loc-set! o::valloc v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; vref
(define-inline (make-vref::vref loc1537::obj type1538::type side-effect1539::obj key1540::obj expr*1541::pair-nil effect1542::obj c-format1543::bstring ftype1544::type otype1545::type vtype1546::type unsafe1547::bool) (instantiate::vref (loc loc1537) (type type1538) (side-effect side-effect1539) (key key1540) (expr* expr*1541) (effect effect1542) (c-format c-format1543) (ftype ftype1544) (otype otype1545) (vtype vtype1546) (unsafe unsafe1547)))
(define-inline (vref?::bool obj::obj) ((@ isa? __object) obj (@ vref ast_node)))
(define (vref-nil::vref) (class-nil (@ vref ast_node)))
(define-inline (vref-unsafe::bool o::vref) (-> |#!bigloo_wallow| o unsafe))
(define-inline (vref-unsafe-set! o::vref v::bool) (set! (-> |#!bigloo_wallow| o unsafe) v))
(define-inline (vref-vtype::type o::vref) (-> |#!bigloo_wallow| o vtype))
(define-inline (vref-vtype-set! o::vref v::type) (set! (-> |#!bigloo_wallow| o vtype) v))
(define-inline (vref-otype::type o::vref) (-> |#!bigloo_wallow| o otype))
(define-inline (vref-otype-set! o::vref v::type) (set! (-> |#!bigloo_wallow| o otype) v))
(define-inline (vref-ftype::type o::vref) (-> |#!bigloo_wallow| o ftype))
(define-inline (vref-ftype-set! o::vref v::type) (set! (-> |#!bigloo_wallow| o ftype) v))
(define-inline (vref-c-format::bstring o::vref) (-> |#!bigloo_wallow| o c-format))
(define-inline (vref-c-format-set! o::vref v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (vref-effect::obj o::vref) (-> |#!bigloo_wallow| o effect))
(define-inline (vref-effect-set! o::vref v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (vref-expr*::pair-nil o::vref) (-> |#!bigloo_wallow| o expr*))
(define-inline (vref-expr*-set! o::vref v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (vref-key::obj o::vref) (-> |#!bigloo_wallow| o key))
(define-inline (vref-key-set! o::vref v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (vref-side-effect::obj o::vref) (-> |#!bigloo_wallow| o side-effect))
(define-inline (vref-side-effect-set! o::vref v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (vref-type::type o::vref) (-> |#!bigloo_wallow| o type))
(define-inline (vref-type-set! o::vref v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (vref-loc::obj o::vref) (-> |#!bigloo_wallow| o loc))
(define-inline (vref-loc-set! o::vref v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; vset!
(define-inline (make-vset!::vset! loc1525::obj type1526::type side-effect1527::obj key1528::obj expr*1529::pair-nil effect1530::obj c-format1531::bstring ftype1532::type otype1533::type vtype1534::type unsafe1535::bool) (instantiate::vset! (loc loc1525) (type type1526) (side-effect side-effect1527) (key key1528) (expr* expr*1529) (effect effect1530) (c-format c-format1531) (ftype ftype1532) (otype otype1533) (vtype vtype1534) (unsafe unsafe1535)))
(define-inline (vset!?::bool obj::obj) ((@ isa? __object) obj (@ vset! ast_node)))
(define (vset!-nil::vset!) (class-nil (@ vset! ast_node)))
(define-inline (vset!-unsafe::bool o::vset!) (-> |#!bigloo_wallow| o unsafe))
(define-inline (vset!-unsafe-set! o::vset! v::bool) (set! (-> |#!bigloo_wallow| o unsafe) v))
(define-inline (vset!-vtype::type o::vset!) (-> |#!bigloo_wallow| o vtype))
(define-inline (vset!-vtype-set! o::vset! v::type) (set! (-> |#!bigloo_wallow| o vtype) v))
(define-inline (vset!-otype::type o::vset!) (-> |#!bigloo_wallow| o otype))
(define-inline (vset!-otype-set! o::vset! v::type) (set! (-> |#!bigloo_wallow| o otype) v))
(define-inline (vset!-ftype::type o::vset!) (-> |#!bigloo_wallow| o ftype))
(define-inline (vset!-ftype-set! o::vset! v::type) (set! (-> |#!bigloo_wallow| o ftype) v))
(define-inline (vset!-c-format::bstring o::vset!) (-> |#!bigloo_wallow| o c-format))
(define-inline (vset!-c-format-set! o::vset! v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (vset!-effect::obj o::vset!) (-> |#!bigloo_wallow| o effect))
(define-inline (vset!-effect-set! o::vset! v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (vset!-expr*::pair-nil o::vset!) (-> |#!bigloo_wallow| o expr*))
(define-inline (vset!-expr*-set! o::vset! v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (vset!-key::obj o::vset!) (-> |#!bigloo_wallow| o key))
(define-inline (vset!-key-set! o::vset! v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (vset!-side-effect::obj o::vset!) (-> |#!bigloo_wallow| o side-effect))
(define-inline (vset!-side-effect-set! o::vset! v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (vset!-type::type o::vset!) (-> |#!bigloo_wallow| o type))
(define-inline (vset!-type-set! o::vset! v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (vset!-loc::obj o::vset!) (-> |#!bigloo_wallow| o loc))
(define-inline (vset!-loc-set! o::vset! v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; vlength
(define-inline (make-vlength::vlength loc1515::obj type1516::type side-effect1517::obj key1518::obj expr*1519::pair-nil effect1520::obj c-format1521::bstring vtype1522::type ftype1523::obj) (instantiate::vlength (loc loc1515) (type type1516) (side-effect side-effect1517) (key key1518) (expr* expr*1519) (effect effect1520) (c-format c-format1521) (vtype vtype1522) (ftype ftype1523)))
(define-inline (vlength?::bool obj::obj) ((@ isa? __object) obj (@ vlength ast_node)))
(define (vlength-nil::vlength) (class-nil (@ vlength ast_node)))
(define-inline (vlength-ftype::obj o::vlength) (-> |#!bigloo_wallow| o ftype))
(define-inline (vlength-ftype-set! o::vlength v::obj) (set! (-> |#!bigloo_wallow| o ftype) v))
(define-inline (vlength-vtype::type o::vlength) (-> |#!bigloo_wallow| o vtype))
(define-inline (vlength-vtype-set! o::vlength v::type) (set! (-> |#!bigloo_wallow| o vtype) v))
(define-inline (vlength-c-format::bstring o::vlength) (-> |#!bigloo_wallow| o c-format))
(define-inline (vlength-c-format-set! o::vlength v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (vlength-effect::obj o::vlength) (-> |#!bigloo_wallow| o effect))
(define-inline (vlength-effect-set! o::vlength v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (vlength-expr*::pair-nil o::vlength) (-> |#!bigloo_wallow| o expr*))
(define-inline (vlength-expr*-set! o::vlength v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (vlength-key::obj o::vlength) (-> |#!bigloo_wallow| o key))
(define-inline (vlength-key-set! o::vlength v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (vlength-side-effect::obj o::vlength) (-> |#!bigloo_wallow| o side-effect))
(define-inline (vlength-side-effect-set! o::vlength v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (vlength-type::type o::vlength) (-> |#!bigloo_wallow| o type))
(define-inline (vlength-type-set! o::vlength v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (vlength-loc::obj o::vlength) (-> |#!bigloo_wallow| o loc))
(define-inline (vlength-loc-set! o::vlength v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; instanceof
(define-inline (make-instanceof::instanceof loc1506::obj type1507::type side-effect1508::obj key1509::obj expr*1510::pair-nil effect1511::obj c-format1512::bstring class1513::type) (instantiate::instanceof (loc loc1506) (type type1507) (side-effect side-effect1508) (key key1509) (expr* expr*1510) (effect effect1511) (c-format c-format1512) (class class1513)))
(define-inline (instanceof?::bool obj::obj) ((@ isa? __object) obj (@ instanceof ast_node)))
(define (instanceof-nil::instanceof) (class-nil (@ instanceof ast_node)))
(define-inline (instanceof-class::type o::instanceof) (-> |#!bigloo_wallow| o class))
(define-inline (instanceof-class-set! o::instanceof v::type) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (instanceof-c-format::bstring o::instanceof) (-> |#!bigloo_wallow| o c-format))
(define-inline (instanceof-c-format-set! o::instanceof v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (instanceof-effect::obj o::instanceof) (-> |#!bigloo_wallow| o effect))
(define-inline (instanceof-effect-set! o::instanceof v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (instanceof-expr*::pair-nil o::instanceof) (-> |#!bigloo_wallow| o expr*))
(define-inline (instanceof-expr*-set! o::instanceof v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (instanceof-key::obj o::instanceof) (-> |#!bigloo_wallow| o key))
(define-inline (instanceof-key-set! o::instanceof v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (instanceof-side-effect::obj o::instanceof) (-> |#!bigloo_wallow| o side-effect))
(define-inline (instanceof-side-effect-set! o::instanceof v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (instanceof-type::type o::instanceof) (-> |#!bigloo_wallow| o type))
(define-inline (instanceof-type-set! o::instanceof v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (instanceof-loc::obj o::instanceof) (-> |#!bigloo_wallow| o loc))
(define-inline (instanceof-loc-set! o::instanceof v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; cast-null
(define-inline (make-cast-null::cast-null loc1498::obj type1499::type side-effect1500::obj key1501::obj expr*1502::pair-nil effect1503::obj c-format1504::bstring) (instantiate::cast-null (loc loc1498) (type type1499) (side-effect side-effect1500) (key key1501) (expr* expr*1502) (effect effect1503) (c-format c-format1504)))
(define-inline (cast-null?::bool obj::obj) ((@ isa? __object) obj (@ cast-null ast_node)))
(define (cast-null-nil::cast-null) (class-nil (@ cast-null ast_node)))
(define-inline (cast-null-c-format::bstring o::cast-null) (-> |#!bigloo_wallow| o c-format))
(define-inline (cast-null-c-format-set! o::cast-null v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (cast-null-effect::obj o::cast-null) (-> |#!bigloo_wallow| o effect))
(define-inline (cast-null-effect-set! o::cast-null v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (cast-null-expr*::pair-nil o::cast-null) (-> |#!bigloo_wallow| o expr*))
(define-inline (cast-null-expr*-set! o::cast-null v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (cast-null-key::obj o::cast-null) (-> |#!bigloo_wallow| o key))
(define-inline (cast-null-key-set! o::cast-null v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (cast-null-side-effect::obj o::cast-null) (-> |#!bigloo_wallow| o side-effect))
(define-inline (cast-null-side-effect-set! o::cast-null v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (cast-null-type::type o::cast-null) (-> |#!bigloo_wallow| o type))
(define-inline (cast-null-type-set! o::cast-null v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (cast-null-loc::obj o::cast-null) (-> |#!bigloo_wallow| o loc))
(define-inline (cast-null-loc-set! o::cast-null v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; cast
(define-inline (make-cast::cast loc1494::obj type1495::type arg1496::node) (instantiate::cast (loc loc1494) (type type1495) (arg arg1496)))
(define-inline (cast?::bool obj::obj) ((@ isa? __object) obj (@ cast ast_node)))
(define (cast-nil::cast) (class-nil (@ cast ast_node)))
(define-inline (cast-arg::node o::cast) (-> |#!bigloo_wallow| o arg))
(define-inline (cast-arg-set! o::cast v::node) (set! (-> |#!bigloo_wallow| o arg) v))
(define-inline (cast-type::type o::cast) (-> |#!bigloo_wallow| o type))
(define-inline (cast-type-set! o::cast v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (cast-loc::obj o::cast) (-> |#!bigloo_wallow| o loc))
(define-inline (cast-loc-set! o::cast v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; setq
(define-inline (make-setq::setq loc1489::obj type1490::type var1491::var value1492::node) (instantiate::setq (loc loc1489) (type type1490) (var var1491) (value value1492)))
(define-inline (setq?::bool obj::obj) ((@ isa? __object) obj (@ setq ast_node)))
(define (setq-nil::setq) (class-nil (@ setq ast_node)))
(define-inline (setq-value::node o::setq) (-> |#!bigloo_wallow| o value))
(define-inline (setq-value-set! o::setq v::node) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (setq-var::var o::setq) (-> |#!bigloo_wallow| o var))
(define-inline (setq-var-set! o::setq v::var) (set! (-> |#!bigloo_wallow| o var) v))
(define-inline (setq-type::type o::setq) (-> |#!bigloo_wallow| o type))
(define-inline (setq-type-set! o::setq v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (setq-loc::obj o::setq) (-> |#!bigloo_wallow| o loc))
(define-inline (setq-loc-set! o::setq v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; conditional
(define-inline (make-conditional::conditional loc1481::obj type1482::type side-effect1483::obj key1484::obj test1485::node true1486::node false1487::node) (instantiate::conditional (loc loc1481) (type type1482) (side-effect side-effect1483) (key key1484) (test test1485) (true true1486) (false false1487)))
(define-inline (conditional?::bool obj::obj) ((@ isa? __object) obj (@ conditional ast_node)))
(define (conditional-nil::conditional) (class-nil (@ conditional ast_node)))
(define-inline (conditional-false::node o::conditional) (-> |#!bigloo_wallow| o false))
(define-inline (conditional-false-set! o::conditional v::node) (set! (-> |#!bigloo_wallow| o false) v))
(define-inline (conditional-true::node o::conditional) (-> |#!bigloo_wallow| o true))
(define-inline (conditional-true-set! o::conditional v::node) (set! (-> |#!bigloo_wallow| o true) v))
(define-inline (conditional-test::node o::conditional) (-> |#!bigloo_wallow| o test))
(define-inline (conditional-test-set! o::conditional v::node) (set! (-> |#!bigloo_wallow| o test) v))
(define-inline (conditional-key::obj o::conditional) (-> |#!bigloo_wallow| o key))
(define-inline (conditional-key-set! o::conditional v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (conditional-side-effect::obj o::conditional) (-> |#!bigloo_wallow| o side-effect))
(define-inline (conditional-side-effect-set! o::conditional v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (conditional-type::type o::conditional) (-> |#!bigloo_wallow| o type))
(define-inline (conditional-type-set! o::conditional v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (conditional-loc::obj o::conditional) (-> |#!bigloo_wallow| o loc))
(define-inline (conditional-loc-set! o::conditional v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; fail
(define-inline (make-fail::fail loc1475::obj type1476::type proc1477::node msg1478::node obj1479::node) (instantiate::fail (loc loc1475) (type type1476) (proc proc1477) (msg msg1478) (obj obj1479)))
(define-inline (fail?::bool obj::obj) ((@ isa? __object) obj (@ fail ast_node)))
(define (fail-nil::fail) (class-nil (@ fail ast_node)))
(define-inline (fail-obj::node o::fail) (-> |#!bigloo_wallow| o obj))
(define-inline (fail-obj-set! o::fail v::node) (set! (-> |#!bigloo_wallow| o obj) v))
(define-inline (fail-msg::node o::fail) (-> |#!bigloo_wallow| o msg))
(define-inline (fail-msg-set! o::fail v::node) (set! (-> |#!bigloo_wallow| o msg) v))
(define-inline (fail-proc::node o::fail) (-> |#!bigloo_wallow| o proc))
(define-inline (fail-proc-set! o::fail v::node) (set! (-> |#!bigloo_wallow| o proc) v))
(define-inline (fail-type::type o::fail) (-> |#!bigloo_wallow| o type))
(define-inline (fail-type-set! o::fail v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (fail-loc::obj o::fail) (-> |#!bigloo_wallow| o loc))
(define-inline (fail-loc-set! o::fail v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; select
(define-inline (make-select::select loc1467::obj type1468::type side-effect1469::obj key1470::obj test1471::node clauses1472::obj item-type1473::type) (instantiate::select (loc loc1467) (type type1468) (side-effect side-effect1469) (key key1470) (test test1471) (clauses clauses1472) (item-type item-type1473)))
(define-inline (select?::bool obj::obj) ((@ isa? __object) obj (@ select ast_node)))
(define (select-nil::select) (class-nil (@ select ast_node)))
(define-inline (select-item-type::type o::select) (-> |#!bigloo_wallow| o item-type))
(define-inline (select-item-type-set! o::select v::type) (set! (-> |#!bigloo_wallow| o item-type) v))
(define-inline (select-clauses::obj o::select) (-> |#!bigloo_wallow| o clauses))
(define-inline (select-clauses-set! o::select v::obj) (set! (-> |#!bigloo_wallow| o clauses) v))
(define-inline (select-test::node o::select) (-> |#!bigloo_wallow| o test))
(define-inline (select-test-set! o::select v::node) (set! (-> |#!bigloo_wallow| o test) v))
(define-inline (select-key::obj o::select) (-> |#!bigloo_wallow| o key))
(define-inline (select-key-set! o::select v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (select-side-effect::obj o::select) (-> |#!bigloo_wallow| o side-effect))
(define-inline (select-side-effect-set! o::select v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (select-type::type o::select) (-> |#!bigloo_wallow| o type))
(define-inline (select-type-set! o::select v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (select-loc::obj o::select) (-> |#!bigloo_wallow| o loc))
(define-inline (select-loc-set! o::select v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; let-fun
(define-inline (make-let-fun::let-fun loc1460::obj type1461::type side-effect1462::obj key1463::obj locals1464::obj body1465::node) (instantiate::let-fun (loc loc1460) (type type1461) (side-effect side-effect1462) (key key1463) (locals locals1464) (body body1465)))
(define-inline (let-fun?::bool obj::obj) ((@ isa? __object) obj (@ let-fun ast_node)))
(define (let-fun-nil::let-fun) (class-nil (@ let-fun ast_node)))
(define-inline (let-fun-body::node o::let-fun) (-> |#!bigloo_wallow| o body))
(define-inline (let-fun-body-set! o::let-fun v::node) (set! (-> |#!bigloo_wallow| o body) v))
(define-inline (let-fun-locals::obj o::let-fun) (-> |#!bigloo_wallow| o locals))
(define-inline (let-fun-locals-set! o::let-fun v::obj) (set! (-> |#!bigloo_wallow| o locals) v))
(define-inline (let-fun-key::obj o::let-fun) (-> |#!bigloo_wallow| o key))
(define-inline (let-fun-key-set! o::let-fun v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (let-fun-side-effect::obj o::let-fun) (-> |#!bigloo_wallow| o side-effect))
(define-inline (let-fun-side-effect-set! o::let-fun v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (let-fun-type::type o::let-fun) (-> |#!bigloo_wallow| o type))
(define-inline (let-fun-type-set! o::let-fun v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (let-fun-loc::obj o::let-fun) (-> |#!bigloo_wallow| o loc))
(define-inline (let-fun-loc-set! o::let-fun v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; let-var
(define-inline (make-let-var::let-var loc1451::obj type1452::type side-effect1453::obj key1454::obj bindings1455::obj body1456::node removable?1457::bool) (instantiate::let-var (loc loc1451) (type type1452) (side-effect side-effect1453) (key key1454) (bindings bindings1455) (body body1456) (removable? removable?1457)))
(define-inline (let-var?::bool obj::obj) ((@ isa? __object) obj (@ let-var ast_node)))
(define (let-var-nil::let-var) (class-nil (@ let-var ast_node)))
(define-inline (let-var-removable?::bool o::let-var) (-> |#!bigloo_wallow| o removable?))
(define-inline (let-var-removable?-set! o::let-var v::bool) (set! (-> |#!bigloo_wallow| o removable?) v))
(define-inline (let-var-body::node o::let-var) (-> |#!bigloo_wallow| o body))
(define-inline (let-var-body-set! o::let-var v::node) (set! (-> |#!bigloo_wallow| o body) v))
(define-inline (let-var-bindings::obj o::let-var) (-> |#!bigloo_wallow| o bindings))
(define-inline (let-var-bindings-set! o::let-var v::obj) (set! (-> |#!bigloo_wallow| o bindings) v))
(define-inline (let-var-key::obj o::let-var) (-> |#!bigloo_wallow| o key))
(define-inline (let-var-key-set! o::let-var v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (let-var-side-effect::obj o::let-var) (-> |#!bigloo_wallow| o side-effect))
(define-inline (let-var-side-effect-set! o::let-var v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (let-var-type::type o::let-var) (-> |#!bigloo_wallow| o type))
(define-inline (let-var-type-set! o::let-var v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (let-var-loc::obj o::let-var) (-> |#!bigloo_wallow| o loc))
(define-inline (let-var-loc-set! o::let-var v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; set-ex-it
(define-inline (make-set-ex-it::set-ex-it loc1446::obj type1447::type var1448::var body1449::node) (instantiate::set-ex-it (loc loc1446) (type type1447) (var var1448) (body body1449)))
(define-inline (set-ex-it?::bool obj::obj) ((@ isa? __object) obj (@ set-ex-it ast_node)))
(define (set-ex-it-nil::set-ex-it) (class-nil (@ set-ex-it ast_node)))
(define-inline (set-ex-it-body::node o::set-ex-it) (-> |#!bigloo_wallow| o body))
(define-inline (set-ex-it-body-set! o::set-ex-it v::node) (set! (-> |#!bigloo_wallow| o body) v))
(define-inline (set-ex-it-var::var o::set-ex-it) (-> |#!bigloo_wallow| o var))
(define-inline (set-ex-it-var-set! o::set-ex-it v::var) (set! (-> |#!bigloo_wallow| o var) v))
(define-inline (set-ex-it-type::type o::set-ex-it) (-> |#!bigloo_wallow| o type))
(define-inline (set-ex-it-type-set! o::set-ex-it v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (set-ex-it-loc::obj o::set-ex-it) (-> |#!bigloo_wallow| o loc))
(define-inline (set-ex-it-loc-set! o::set-ex-it v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; jump-ex-it
(define-inline (make-jump-ex-it::jump-ex-it loc1440::obj type1441::type exit1442::node value1443::node) (instantiate::jump-ex-it (loc loc1440) (type type1441) (exit exit1442) (value value1443)))
(define-inline (jump-ex-it?::bool obj::obj) ((@ isa? __object) obj (@ jump-ex-it ast_node)))
(define (jump-ex-it-nil::jump-ex-it) (class-nil (@ jump-ex-it ast_node)))
(define-inline (jump-ex-it-value::node o::jump-ex-it) (-> |#!bigloo_wallow| o value))
(define-inline (jump-ex-it-value-set! o::jump-ex-it v::node) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (jump-ex-it-exit::node o::jump-ex-it) (-> |#!bigloo_wallow| o exit))
(define-inline (jump-ex-it-exit-set! o::jump-ex-it v::node) (set! (-> |#!bigloo_wallow| o exit) v))
(define-inline (jump-ex-it-type::type o::jump-ex-it) (-> |#!bigloo_wallow| o type))
(define-inline (jump-ex-it-type-set! o::jump-ex-it v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (jump-ex-it-loc::obj o::jump-ex-it) (-> |#!bigloo_wallow| o loc))
(define-inline (jump-ex-it-loc-set! o::jump-ex-it v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; retblock
(define-inline (make-retblock::retblock loc1435::obj type1436::type body1438::node) (instantiate::retblock (loc loc1435) (type type1436) (body body1438)))
(define-inline (retblock?::bool obj::obj) ((@ isa? __object) obj (@ retblock ast_node)))
(define (retblock-nil::retblock) (class-nil (@ retblock ast_node)))
(define-inline (retblock-body::node o::retblock) (-> |#!bigloo_wallow| o body))
(define-inline (retblock-body-set! o::retblock v::node) (set! (-> |#!bigloo_wallow| o body) v))
(define-inline (retblock-type::type o::retblock) (-> |#!bigloo_wallow| o type))
(define-inline (retblock-type-set! o::retblock v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (retblock-loc::obj o::retblock) (-> |#!bigloo_wallow| o loc))
(define-inline (retblock-loc-set! o::retblock v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; return
(define-inline (make-return::return loc1430::obj type1431::type block1432::retblock value1433::node) (instantiate::return (loc loc1430) (type type1431) (block block1432) (value value1433)))
(define-inline (return?::bool obj::obj) ((@ isa? __object) obj (@ return ast_node)))
(define (return-nil::return) (class-nil (@ return ast_node)))
(define-inline (return-value::node o::return) (-> |#!bigloo_wallow| o value))
(define-inline (return-value-set! o::return v::node) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (return-block::retblock o::return) (-> |#!bigloo_wallow| o block))
(define-inline (return-block-set! o::return v::retblock) (set! (-> |#!bigloo_wallow| o block) v))
(define-inline (return-type::type o::return) (-> |#!bigloo_wallow| o type))
(define-inline (return-type-set! o::return v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (return-loc::obj o::return) (-> |#!bigloo_wallow| o loc))
(define-inline (return-loc-set! o::return v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; make-box
(define-inline (make-make-box::make-box loc1423::obj type1424::type side-effect1425::obj key1426::obj value1427::node vtype1428::type) (instantiate::make-box (loc loc1423) (type type1424) (side-effect side-effect1425) (key key1426) (value value1427) (vtype vtype1428)))
(define-inline (make-box?::bool obj::obj) ((@ isa? __object) obj (@ make-box ast_node)))
(define (make-box-nil::make-box) (class-nil (@ make-box ast_node)))
(define-inline (make-box-vtype::type o::make-box) (-> |#!bigloo_wallow| o vtype))
(define-inline (make-box-vtype-set! o::make-box v::type) (set! (-> |#!bigloo_wallow| o vtype) v))
(define-inline (make-box-value::node o::make-box) (-> |#!bigloo_wallow| o value))
(define-inline (make-box-value-set! o::make-box v::node) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (make-box-key::obj o::make-box) (-> |#!bigloo_wallow| o key))
(define-inline (make-box-key-set! o::make-box v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (make-box-side-effect::obj o::make-box) (-> |#!bigloo_wallow| o side-effect))
(define-inline (make-box-side-effect-set! o::make-box v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (make-box-type::type o::make-box) (-> |#!bigloo_wallow| o type))
(define-inline (make-box-type-set! o::make-box v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (make-box-loc::obj o::make-box) (-> |#!bigloo_wallow| o loc))
(define-inline (make-box-loc-set! o::make-box v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; box-ref
(define-inline (make-box-ref::box-ref loc1416::obj type1417::type side-effect1418::obj key1419::obj var1420::var vtype1421::type) (instantiate::box-ref (loc loc1416) (type type1417) (side-effect side-effect1418) (key key1419) (var var1420) (vtype vtype1421)))
(define-inline (box-ref?::bool obj::obj) ((@ isa? __object) obj (@ box-ref ast_node)))
(define (box-ref-nil::box-ref) (class-nil (@ box-ref ast_node)))
(define-inline (box-ref-vtype::type o::box-ref) (-> |#!bigloo_wallow| o vtype))
(define-inline (box-ref-vtype-set! o::box-ref v::type) (set! (-> |#!bigloo_wallow| o vtype) v))
(define-inline (box-ref-var::var o::box-ref) (-> |#!bigloo_wallow| o var))
(define-inline (box-ref-var-set! o::box-ref v::var) (set! (-> |#!bigloo_wallow| o var) v))
(define-inline (box-ref-key::obj o::box-ref) (-> |#!bigloo_wallow| o key))
(define-inline (box-ref-key-set! o::box-ref v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (box-ref-side-effect::obj o::box-ref) (-> |#!bigloo_wallow| o side-effect))
(define-inline (box-ref-side-effect-set! o::box-ref v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (box-ref-type::type o::box-ref) (-> |#!bigloo_wallow| o type))
(define-inline (box-ref-type-set! o::box-ref v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (box-ref-loc::obj o::box-ref) (-> |#!bigloo_wallow| o loc))
(define-inline (box-ref-loc-set! o::box-ref v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; box-set!
(define-inline (make-box-set!::box-set! loc1410::obj type1411::type var1412::var value1413::node vtype1414::type) (instantiate::box-set! (loc loc1410) (type type1411) (var var1412) (value value1413) (vtype vtype1414)))
(define-inline (box-set!?::bool obj::obj) ((@ isa? __object) obj (@ box-set! ast_node)))
(define (box-set!-nil::box-set!) (class-nil (@ box-set! ast_node)))
(define-inline (box-set!-vtype::type o::box-set!) (-> |#!bigloo_wallow| o vtype))
(define-inline (box-set!-vtype-set! o::box-set! v::type) (set! (-> |#!bigloo_wallow| o vtype) v))
(define-inline (box-set!-value::node o::box-set!) (-> |#!bigloo_wallow| o value))
(define-inline (box-set!-value-set! o::box-set! v::node) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (box-set!-var::var o::box-set!) (-> |#!bigloo_wallow| o var))
(define-inline (box-set!-var-set! o::box-set! v::var) (set! (-> |#!bigloo_wallow| o var) v))
(define-inline (box-set!-type::type o::box-set!) (-> |#!bigloo_wallow| o type))
(define-inline (box-set!-type-set! o::box-set! v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (box-set!-loc::obj o::box-set!) (-> |#!bigloo_wallow| o loc))
(define-inline (box-set!-loc-set! o::box-set! v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; sync
(define-inline (make-sync::sync loc1404::obj type1405::type mutex1406::node prelock1407::node body1408::node) (instantiate::sync (loc loc1404) (type type1405) (mutex mutex1406) (prelock prelock1407) (body body1408)))
(define-inline (sync?::bool obj::obj) ((@ isa? __object) obj (@ sync ast_node)))
(define (sync-nil::sync) (class-nil (@ sync ast_node)))
(define-inline (sync-body::node o::sync) (-> |#!bigloo_wallow| o body))
(define-inline (sync-body-set! o::sync v::node) (set! (-> |#!bigloo_wallow| o body) v))
(define-inline (sync-prelock::node o::sync) (-> |#!bigloo_wallow| o prelock))
(define-inline (sync-prelock-set! o::sync v::node) (set! (-> |#!bigloo_wallow| o prelock) v))
(define-inline (sync-mutex::node o::sync) (-> |#!bigloo_wallow| o mutex))
(define-inline (sync-mutex-set! o::sync v::node) (set! (-> |#!bigloo_wallow| o mutex) v))
(define-inline (sync-type::type o::sync) (-> |#!bigloo_wallow| o type))
(define-inline (sync-type-set! o::sync v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (sync-loc::obj o::sync) (-> |#!bigloo_wallow| o loc))
(define-inline (sync-loc-set! o::sync v::obj) (set! (-> |#!bigloo_wallow| o loc) v))
))
