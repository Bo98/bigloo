;; ==========================================================
;; Class accessors
;; Bigloo (3.9b)
;; Inria -- Sophia Antipolis     Wed Nov 14 18:40:15 CET 2012 
;; (bigloo.new -classgen Ast/node.scm -o Ast/nodetype.sch)
;; ==========================================================

;; The directives
(directives

;; node
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-node::node loc1656::obj type1657::type)
    (inline node?::bool ::obj)
    (node-nil::node)
    (inline node-type::type ::node)
    (inline node-type-set! ::node ::type)
    (inline node-loc::obj ::node))))

;; node/effect
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-node/effect::node/effect loc1650::obj type1651::type side-effect1652::obj key1653::obj)
    (inline node/effect?::bool ::obj)
    (node/effect-nil::node/effect)
    (inline node/effect-key::obj ::node/effect)
    (inline node/effect-key-set! ::node/effect ::obj)
    (inline node/effect-side-effect::obj ::node/effect)
    (inline node/effect-side-effect-set! ::node/effect ::obj)
    (inline node/effect-type::type ::node/effect)
    (inline node/effect-type-set! ::node/effect ::type)
    (inline node/effect-loc::obj ::node/effect))))

;; atom
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-atom::atom loc1646::obj type1647::type value1648::obj)
    (inline atom?::bool ::obj)
    (atom-nil::atom)
    (inline atom-value::obj ::atom)
    (inline atom-value-set! ::atom ::obj)
    (inline atom-type::type ::atom)
    (inline atom-type-set! ::atom ::type)
    (inline atom-loc::obj ::atom))))

;; var
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-var::var loc1642::obj type1643::type variable1644::variable)
    (inline var?::bool ::obj)
    (var-nil::var)
    (inline var-variable::variable ::var)
    (inline var-variable-set! ::var ::variable)
    (inline var-type::type ::var)
    (inline var-type-set! ::var ::type)
    (inline var-loc::obj ::var))))

;; closure
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-closure::closure loc1638::obj type1639::type variable1640::variable)
    (inline closure?::bool ::obj)
    (closure-nil::closure)
    (inline closure-variable::variable ::closure)
    (inline closure-variable-set! ::closure ::variable)
    (inline closure-type::type ::closure)
    (inline closure-type-set! ::closure ::type)
    (inline closure-loc::obj ::closure))))

;; kwote
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-kwote::kwote loc1634::obj type1635::type value1636::obj)
    (inline kwote?::bool ::obj)
    (kwote-nil::kwote)
    (inline kwote-value::obj ::kwote)
    (inline kwote-type::type ::kwote)
    (inline kwote-type-set! ::kwote ::type)
    (inline kwote-loc::obj ::kwote))))

;; sequence
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-sequence::sequence loc1627::obj type1628::type side-effect1629::obj key1630::obj nodes1631::obj unsafe1632::bool)
    (inline sequence?::bool ::obj)
    (sequence-nil::sequence)
    (inline sequence-unsafe::bool ::sequence)
    (inline sequence-nodes::obj ::sequence)
    (inline sequence-key::obj ::sequence)
    (inline sequence-key-set! ::sequence ::obj)
    (inline sequence-side-effect::obj ::sequence)
    (inline sequence-side-effect-set! ::sequence ::obj)
    (inline sequence-type::type ::sequence)
    (inline sequence-type-set! ::sequence ::type)
    (inline sequence-loc::obj ::sequence))))

;; app
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-app::app loc1620::obj type1621::type side-effect1622::obj key1623::obj fun1624::var args1625::obj)
    (inline app?::bool ::obj)
    (app-nil::app)
    (inline app-args::obj ::app)
    (inline app-args-set! ::app ::obj)
    (inline app-fun::var ::app)
    (inline app-fun-set! ::app ::var)
    (inline app-key::obj ::app)
    (inline app-key-set! ::app ::obj)
    (inline app-side-effect::obj ::app)
    (inline app-side-effect-set! ::app ::obj)
    (inline app-type::type ::app)
    (inline app-type-set! ::app ::type)
    (inline app-loc::obj ::app))))

;; app-ly
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-app-ly::app-ly loc1613::obj type1614::type fun1615::node arg1617::node)
    (inline app-ly?::bool ::obj)
    (app-ly-nil::app-ly)
    (inline app-ly-arg::node ::app-ly)
    (inline app-ly-arg-set! ::app-ly ::node)
    (inline app-ly-fun::node ::app-ly)
    (inline app-ly-fun-set! ::app-ly ::node)
    (inline app-ly-type::type ::app-ly)
    (inline app-ly-type-set! ::app-ly ::type)
    (inline app-ly-loc::obj ::app-ly))))

;; funcall
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-funcall::funcall loc1606::obj type1607::type fun1608::node args1609::obj strength1610::symbol functions1611::obj)
    (inline funcall?::bool ::obj)
    (funcall-nil::funcall)
    (inline funcall-functions::obj ::funcall)
    (inline funcall-functions-set! ::funcall ::obj)
    (inline funcall-strength::symbol ::funcall)
    (inline funcall-strength-set! ::funcall ::symbol)
    (inline funcall-args::obj ::funcall)
    (inline funcall-args-set! ::funcall ::obj)
    (inline funcall-fun::node ::funcall)
    (inline funcall-fun-set! ::funcall ::node)
    (inline funcall-type::type ::funcall)
    (inline funcall-type-set! ::funcall ::type)
    (inline funcall-loc::obj ::funcall))))

;; extern
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-extern::extern loc1598::obj type1599::type side-effect1600::obj key1601::obj expr*1602::pair-nil effect1603::obj)
    (inline extern?::bool ::obj)
    (extern-nil::extern)
    (inline extern-effect::obj ::extern)
    (inline extern-effect-set! ::extern ::obj)
    (inline extern-expr*::pair-nil ::extern)
    (inline extern-expr*-set! ::extern ::pair-nil)
    (inline extern-key::obj ::extern)
    (inline extern-key-set! ::extern ::obj)
    (inline extern-side-effect::obj ::extern)
    (inline extern-side-effect-set! ::extern ::obj)
    (inline extern-type::type ::extern)
    (inline extern-type-set! ::extern ::type)
    (inline extern-loc::obj ::extern))))

;; pragma
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-pragma::pragma loc1590::obj type1591::type side-effect1592::obj key1593::obj expr*1594::pair-nil effect1595::obj format1596::bstring)
    (inline pragma?::bool ::obj)
    (pragma-nil::pragma)
    (inline pragma-format::bstring ::pragma)
    (inline pragma-effect::obj ::pragma)
    (inline pragma-effect-set! ::pragma ::obj)
    (inline pragma-expr*::pair-nil ::pragma)
    (inline pragma-expr*-set! ::pragma ::pair-nil)
    (inline pragma-key::obj ::pragma)
    (inline pragma-key-set! ::pragma ::obj)
    (inline pragma-side-effect::obj ::pragma)
    (inline pragma-side-effect-set! ::pragma ::obj)
    (inline pragma-type::type ::pragma)
    (inline pragma-type-set! ::pragma ::type)
    (inline pragma-loc::obj ::pragma))))

;; private
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-private::private loc1582::obj type1583::type side-effect1584::obj key1585::obj expr*1586::pair-nil effect1587::obj c-format1588::bstring)
    (inline private?::bool ::obj)
    (private-nil::private)
    (inline private-c-format::bstring ::private)
    (inline private-effect::obj ::private)
    (inline private-effect-set! ::private ::obj)
    (inline private-expr*::pair-nil ::private)
    (inline private-expr*-set! ::private ::pair-nil)
    (inline private-key::obj ::private)
    (inline private-key-set! ::private ::obj)
    (inline private-side-effect::obj ::private)
    (inline private-side-effect-set! ::private ::obj)
    (inline private-type::type ::private)
    (inline private-type-set! ::private ::type)
    (inline private-loc::obj ::private))))

;; getfield
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-getfield::getfield loc1571::obj type1572::type side-effect1573::obj key1574::obj expr*1575::pair-nil effect1576::obj c-format1577::bstring fname1578::bstring ftype1579::type otype1580::type)
    (inline getfield?::bool ::obj)
    (getfield-nil::getfield)
    (inline getfield-otype::type ::getfield)
    (inline getfield-otype-set! ::getfield ::type)
    (inline getfield-ftype::type ::getfield)
    (inline getfield-ftype-set! ::getfield ::type)
    (inline getfield-fname::bstring ::getfield)
    (inline getfield-c-format::bstring ::getfield)
    (inline getfield-effect::obj ::getfield)
    (inline getfield-effect-set! ::getfield ::obj)
    (inline getfield-expr*::pair-nil ::getfield)
    (inline getfield-expr*-set! ::getfield ::pair-nil)
    (inline getfield-key::obj ::getfield)
    (inline getfield-key-set! ::getfield ::obj)
    (inline getfield-side-effect::obj ::getfield)
    (inline getfield-side-effect-set! ::getfield ::obj)
    (inline getfield-type::type ::getfield)
    (inline getfield-type-set! ::getfield ::type)
    (inline getfield-loc::obj ::getfield))))

;; setfield
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-setfield::setfield loc1560::obj type1561::type side-effect1562::obj key1563::obj expr*1564::pair-nil effect1565::obj c-format1566::bstring fname1567::bstring ftype1568::type otype1569::type)
    (inline setfield?::bool ::obj)
    (setfield-nil::setfield)
    (inline setfield-otype::type ::setfield)
    (inline setfield-otype-set! ::setfield ::type)
    (inline setfield-ftype::type ::setfield)
    (inline setfield-ftype-set! ::setfield ::type)
    (inline setfield-fname::bstring ::setfield)
    (inline setfield-c-format::bstring ::setfield)
    (inline setfield-effect::obj ::setfield)
    (inline setfield-effect-set! ::setfield ::obj)
    (inline setfield-expr*::pair-nil ::setfield)
    (inline setfield-expr*-set! ::setfield ::pair-nil)
    (inline setfield-key::obj ::setfield)
    (inline setfield-key-set! ::setfield ::obj)
    (inline setfield-side-effect::obj ::setfield)
    (inline setfield-side-effect-set! ::setfield ::obj)
    (inline setfield-type::type ::setfield)
    (inline setfield-type-set! ::setfield ::type)
    (inline setfield-loc::obj ::setfield))))

;; widening
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-widening::widening loc1551::obj type1552::type side-effect1553::obj key1554::obj expr*1555::pair-nil effect1556::obj c-format1557::bstring otype1558::type)
    (inline widening?::bool ::obj)
    (widening-nil::widening)
    (inline widening-otype::type ::widening)
    (inline widening-otype-set! ::widening ::type)
    (inline widening-c-format::bstring ::widening)
    (inline widening-effect::obj ::widening)
    (inline widening-effect-set! ::widening ::obj)
    (inline widening-expr*::pair-nil ::widening)
    (inline widening-expr*-set! ::widening ::pair-nil)
    (inline widening-key::obj ::widening)
    (inline widening-key-set! ::widening ::obj)
    (inline widening-side-effect::obj ::widening)
    (inline widening-side-effect-set! ::widening ::obj)
    (inline widening-type::type ::widening)
    (inline widening-type-set! ::widening ::type)
    (inline widening-loc::obj ::widening))))

;; new
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-new::new loc1542::obj type1543::type side-effect1544::obj key1545::obj expr*1546::pair-nil effect1547::obj c-format1548::bstring args-type1549::pair-nil)
    (inline new?::bool ::obj)
    (new-nil::new)
    (inline new-args-type::pair-nil ::new)
    (inline new-args-type-set! ::new ::pair-nil)
    (inline new-c-format::bstring ::new)
    (inline new-effect::obj ::new)
    (inline new-effect-set! ::new ::obj)
    (inline new-expr*::pair-nil ::new)
    (inline new-expr*-set! ::new ::pair-nil)
    (inline new-key::obj ::new)
    (inline new-key-set! ::new ::obj)
    (inline new-side-effect::obj ::new)
    (inline new-side-effect-set! ::new ::obj)
    (inline new-type::type ::new)
    (inline new-type-set! ::new ::type)
    (inline new-loc::obj ::new))))

;; valloc
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-valloc::valloc loc1532::obj type1533::type side-effect1534::obj key1535::obj expr*1536::pair-nil effect1537::obj c-format1538::bstring ftype1539::type otype1540::type)
    (inline valloc?::bool ::obj)
    (valloc-nil::valloc)
    (inline valloc-otype::type ::valloc)
    (inline valloc-otype-set! ::valloc ::type)
    (inline valloc-ftype::type ::valloc)
    (inline valloc-ftype-set! ::valloc ::type)
    (inline valloc-c-format::bstring ::valloc)
    (inline valloc-effect::obj ::valloc)
    (inline valloc-effect-set! ::valloc ::obj)
    (inline valloc-expr*::pair-nil ::valloc)
    (inline valloc-expr*-set! ::valloc ::pair-nil)
    (inline valloc-key::obj ::valloc)
    (inline valloc-key-set! ::valloc ::obj)
    (inline valloc-side-effect::obj ::valloc)
    (inline valloc-side-effect-set! ::valloc ::obj)
    (inline valloc-type::type ::valloc)
    (inline valloc-type-set! ::valloc ::type)
    (inline valloc-loc::obj ::valloc))))

;; vref
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-vref::vref loc1520::obj type1521::type side-effect1522::obj key1523::obj expr*1524::pair-nil effect1525::obj c-format1526::bstring ftype1527::type otype1528::type vtype1529::type unsafe1530::bool)
    (inline vref?::bool ::obj)
    (vref-nil::vref)
    (inline vref-unsafe::bool ::vref)
    (inline vref-vtype::type ::vref)
    (inline vref-vtype-set! ::vref ::type)
    (inline vref-otype::type ::vref)
    (inline vref-otype-set! ::vref ::type)
    (inline vref-ftype::type ::vref)
    (inline vref-ftype-set! ::vref ::type)
    (inline vref-c-format::bstring ::vref)
    (inline vref-effect::obj ::vref)
    (inline vref-effect-set! ::vref ::obj)
    (inline vref-expr*::pair-nil ::vref)
    (inline vref-expr*-set! ::vref ::pair-nil)
    (inline vref-key::obj ::vref)
    (inline vref-key-set! ::vref ::obj)
    (inline vref-side-effect::obj ::vref)
    (inline vref-side-effect-set! ::vref ::obj)
    (inline vref-type::type ::vref)
    (inline vref-type-set! ::vref ::type)
    (inline vref-loc::obj ::vref))))

;; vset!
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-vset!::vset! loc1508::obj type1509::type side-effect1510::obj key1511::obj expr*1512::pair-nil effect1513::obj c-format1514::bstring ftype1515::type otype1516::type vtype1517::type unsafe1518::bool)
    (inline vset!?::bool ::obj)
    (vset!-nil::vset!)
    (inline vset!-unsafe::bool ::vset!)
    (inline vset!-vtype::type ::vset!)
    (inline vset!-vtype-set! ::vset! ::type)
    (inline vset!-otype::type ::vset!)
    (inline vset!-otype-set! ::vset! ::type)
    (inline vset!-ftype::type ::vset!)
    (inline vset!-ftype-set! ::vset! ::type)
    (inline vset!-c-format::bstring ::vset!)
    (inline vset!-effect::obj ::vset!)
    (inline vset!-effect-set! ::vset! ::obj)
    (inline vset!-expr*::pair-nil ::vset!)
    (inline vset!-expr*-set! ::vset! ::pair-nil)
    (inline vset!-key::obj ::vset!)
    (inline vset!-key-set! ::vset! ::obj)
    (inline vset!-side-effect::obj ::vset!)
    (inline vset!-side-effect-set! ::vset! ::obj)
    (inline vset!-type::type ::vset!)
    (inline vset!-type-set! ::vset! ::type)
    (inline vset!-loc::obj ::vset!))))

;; vlength
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-vlength::vlength loc1499::obj type1500::type side-effect1501::obj key1502::obj expr*1503::pair-nil effect1504::obj c-format1505::bstring vtype1506::type)
    (inline vlength?::bool ::obj)
    (vlength-nil::vlength)
    (inline vlength-vtype::type ::vlength)
    (inline vlength-vtype-set! ::vlength ::type)
    (inline vlength-c-format::bstring ::vlength)
    (inline vlength-effect::obj ::vlength)
    (inline vlength-effect-set! ::vlength ::obj)
    (inline vlength-expr*::pair-nil ::vlength)
    (inline vlength-expr*-set! ::vlength ::pair-nil)
    (inline vlength-key::obj ::vlength)
    (inline vlength-key-set! ::vlength ::obj)
    (inline vlength-side-effect::obj ::vlength)
    (inline vlength-side-effect-set! ::vlength ::obj)
    (inline vlength-type::type ::vlength)
    (inline vlength-type-set! ::vlength ::type)
    (inline vlength-loc::obj ::vlength))))

;; instanceof
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-instanceof::instanceof loc1490::obj type1491::type side-effect1492::obj key1493::obj expr*1494::pair-nil effect1495::obj c-format1496::bstring class1497::type)
    (inline instanceof?::bool ::obj)
    (instanceof-nil::instanceof)
    (inline instanceof-class::type ::instanceof)
    (inline instanceof-class-set! ::instanceof ::type)
    (inline instanceof-c-format::bstring ::instanceof)
    (inline instanceof-effect::obj ::instanceof)
    (inline instanceof-effect-set! ::instanceof ::obj)
    (inline instanceof-expr*::pair-nil ::instanceof)
    (inline instanceof-expr*-set! ::instanceof ::pair-nil)
    (inline instanceof-key::obj ::instanceof)
    (inline instanceof-key-set! ::instanceof ::obj)
    (inline instanceof-side-effect::obj ::instanceof)
    (inline instanceof-side-effect-set! ::instanceof ::obj)
    (inline instanceof-type::type ::instanceof)
    (inline instanceof-type-set! ::instanceof ::type)
    (inline instanceof-loc::obj ::instanceof))))

;; cast-null
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cast-null::cast-null loc1482::obj type1483::type side-effect1484::obj key1485::obj expr*1486::pair-nil effect1487::obj c-format1488::bstring)
    (inline cast-null?::bool ::obj)
    (cast-null-nil::cast-null)
    (inline cast-null-c-format::bstring ::cast-null)
    (inline cast-null-effect::obj ::cast-null)
    (inline cast-null-effect-set! ::cast-null ::obj)
    (inline cast-null-expr*::pair-nil ::cast-null)
    (inline cast-null-expr*-set! ::cast-null ::pair-nil)
    (inline cast-null-key::obj ::cast-null)
    (inline cast-null-key-set! ::cast-null ::obj)
    (inline cast-null-side-effect::obj ::cast-null)
    (inline cast-null-side-effect-set! ::cast-null ::obj)
    (inline cast-null-type::type ::cast-null)
    (inline cast-null-type-set! ::cast-null ::type)
    (inline cast-null-loc::obj ::cast-null))))

;; cast
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cast::cast loc1477::obj type1478::type arg1480::node)
    (inline cast?::bool ::obj)
    (cast-nil::cast)
    (inline cast-arg::node ::cast)
    (inline cast-arg-set! ::cast ::node)
    (inline cast-type::type ::cast)
    (inline cast-type-set! ::cast ::type)
    (inline cast-loc::obj ::cast))))

;; setq
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-setq::setq loc1472::obj type1473::type var1474::var value1475::node)
    (inline setq?::bool ::obj)
    (setq-nil::setq)
    (inline setq-value::node ::setq)
    (inline setq-value-set! ::setq ::node)
    (inline setq-var::var ::setq)
    (inline setq-var-set! ::setq ::var)
    (inline setq-type::type ::setq)
    (inline setq-type-set! ::setq ::type)
    (inline setq-loc::obj ::setq))))

;; conditional
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-conditional::conditional loc1464::obj type1465::type side-effect1466::obj key1467::obj test1468::node true1469::node false1470::node)
    (inline conditional?::bool ::obj)
    (conditional-nil::conditional)
    (inline conditional-false::node ::conditional)
    (inline conditional-false-set! ::conditional ::node)
    (inline conditional-true::node ::conditional)
    (inline conditional-true-set! ::conditional ::node)
    (inline conditional-test::node ::conditional)
    (inline conditional-test-set! ::conditional ::node)
    (inline conditional-key::obj ::conditional)
    (inline conditional-key-set! ::conditional ::obj)
    (inline conditional-side-effect::obj ::conditional)
    (inline conditional-side-effect-set! ::conditional ::obj)
    (inline conditional-type::type ::conditional)
    (inline conditional-type-set! ::conditional ::type)
    (inline conditional-loc::obj ::conditional))))

;; fail
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-fail::fail loc1458::obj type1459::type proc1460::node msg1461::node obj1462::node)
    (inline fail?::bool ::obj)
    (fail-nil::fail)
    (inline fail-obj::node ::fail)
    (inline fail-obj-set! ::fail ::node)
    (inline fail-msg::node ::fail)
    (inline fail-msg-set! ::fail ::node)
    (inline fail-proc::node ::fail)
    (inline fail-proc-set! ::fail ::node)
    (inline fail-type::type ::fail)
    (inline fail-type-set! ::fail ::type)
    (inline fail-loc::obj ::fail))))

;; select
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-select::select loc1449::obj type1450::type side-effect1451::obj key1452::obj test1454::node clauses1455::obj item-type1456::type)
    (inline select?::bool ::obj)
    (select-nil::select)
    (inline select-item-type::type ::select)
    (inline select-clauses::obj ::select)
    (inline select-test::node ::select)
    (inline select-test-set! ::select ::node)
    (inline select-key::obj ::select)
    (inline select-key-set! ::select ::obj)
    (inline select-side-effect::obj ::select)
    (inline select-side-effect-set! ::select ::obj)
    (inline select-type::type ::select)
    (inline select-type-set! ::select ::type)
    (inline select-loc::obj ::select))))

;; let-fun
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-let-fun::let-fun loc1442::obj type1443::type side-effect1444::obj key1445::obj locals1446::obj body1447::node)
    (inline let-fun?::bool ::obj)
    (let-fun-nil::let-fun)
    (inline let-fun-body::node ::let-fun)
    (inline let-fun-body-set! ::let-fun ::node)
    (inline let-fun-locals::obj ::let-fun)
    (inline let-fun-locals-set! ::let-fun ::obj)
    (inline let-fun-key::obj ::let-fun)
    (inline let-fun-key-set! ::let-fun ::obj)
    (inline let-fun-side-effect::obj ::let-fun)
    (inline let-fun-side-effect-set! ::let-fun ::obj)
    (inline let-fun-type::type ::let-fun)
    (inline let-fun-type-set! ::let-fun ::type)
    (inline let-fun-loc::obj ::let-fun))))

;; let-var
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-let-var::let-var loc1434::obj type1435::type side-effect1436::obj key1437::obj bindings1438::obj body1439::node removable?1440::bool)
    (inline let-var?::bool ::obj)
    (let-var-nil::let-var)
    (inline let-var-removable?::bool ::let-var)
    (inline let-var-removable?-set! ::let-var ::bool)
    (inline let-var-body::node ::let-var)
    (inline let-var-body-set! ::let-var ::node)
    (inline let-var-bindings::obj ::let-var)
    (inline let-var-bindings-set! ::let-var ::obj)
    (inline let-var-key::obj ::let-var)
    (inline let-var-key-set! ::let-var ::obj)
    (inline let-var-side-effect::obj ::let-var)
    (inline let-var-side-effect-set! ::let-var ::obj)
    (inline let-var-type::type ::let-var)
    (inline let-var-type-set! ::let-var ::type)
    (inline let-var-loc::obj ::let-var))))

;; set-ex-it
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-set-ex-it::set-ex-it loc1429::obj type1430::type var1431::var body1432::node)
    (inline set-ex-it?::bool ::obj)
    (set-ex-it-nil::set-ex-it)
    (inline set-ex-it-body::node ::set-ex-it)
    (inline set-ex-it-body-set! ::set-ex-it ::node)
    (inline set-ex-it-var::var ::set-ex-it)
    (inline set-ex-it-var-set! ::set-ex-it ::var)
    (inline set-ex-it-type::type ::set-ex-it)
    (inline set-ex-it-type-set! ::set-ex-it ::type)
    (inline set-ex-it-loc::obj ::set-ex-it))))

;; jump-ex-it
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-jump-ex-it::jump-ex-it loc1424::obj type1425::type exit1426::node value1427::node)
    (inline jump-ex-it?::bool ::obj)
    (jump-ex-it-nil::jump-ex-it)
    (inline jump-ex-it-value::node ::jump-ex-it)
    (inline jump-ex-it-value-set! ::jump-ex-it ::node)
    (inline jump-ex-it-exit::node ::jump-ex-it)
    (inline jump-ex-it-exit-set! ::jump-ex-it ::node)
    (inline jump-ex-it-type::type ::jump-ex-it)
    (inline jump-ex-it-type-set! ::jump-ex-it ::type)
    (inline jump-ex-it-loc::obj ::jump-ex-it))))

;; make-box
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-make-box::make-box loc1418::obj type1419::type side-effect1420::obj key1421::obj value1422::node)
    (inline make-box?::bool ::obj)
    (make-box-nil::make-box)
    (inline make-box-value::node ::make-box)
    (inline make-box-value-set! ::make-box ::node)
    (inline make-box-key::obj ::make-box)
    (inline make-box-key-set! ::make-box ::obj)
    (inline make-box-side-effect::obj ::make-box)
    (inline make-box-side-effect-set! ::make-box ::obj)
    (inline make-box-type::type ::make-box)
    (inline make-box-type-set! ::make-box ::type)
    (inline make-box-loc::obj ::make-box))))

;; box-ref
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-box-ref::box-ref loc1412::obj type1413::type side-effect1414::obj key1415::obj var1416::var)
    (inline box-ref?::bool ::obj)
    (box-ref-nil::box-ref)
    (inline box-ref-var::var ::box-ref)
    (inline box-ref-var-set! ::box-ref ::var)
    (inline box-ref-key::obj ::box-ref)
    (inline box-ref-key-set! ::box-ref ::obj)
    (inline box-ref-side-effect::obj ::box-ref)
    (inline box-ref-side-effect-set! ::box-ref ::obj)
    (inline box-ref-type::type ::box-ref)
    (inline box-ref-type-set! ::box-ref ::type)
    (inline box-ref-loc::obj ::box-ref))))

;; box-set!
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-box-set!::box-set! loc1407::obj type1408::type var1409::var value1410::node)
    (inline box-set!?::bool ::obj)
    (box-set!-nil::box-set!)
    (inline box-set!-value::node ::box-set!)
    (inline box-set!-value-set! ::box-set! ::node)
    (inline box-set!-var::var ::box-set!)
    (inline box-set!-var-set! ::box-set! ::var)
    (inline box-set!-type::type ::box-set!)
    (inline box-set!-type-set! ::box-set! ::type)
    (inline box-set!-loc::obj ::box-set!))))

;; sync
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-sync::sync loc1402::obj type1403::type mutex1404::node nodes1405::pair-nil)
    (inline sync?::bool ::obj)
    (sync-nil::sync)
    (inline sync-nodes::pair-nil ::sync)
    (inline sync-mutex::node ::sync)
    (inline sync-mutex-set! ::sync ::node)
    (inline sync-type::type ::sync)
    (inline sync-type-set! ::sync ::type)
    (inline sync-loc::obj ::sync)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; node
(define-inline (make-node::node loc1656::obj type1657::type) (instantiate::node (loc loc1656) (type type1657)))
(define-inline (node?::bool obj::obj) ((@ isa? __object) obj (@ node ast_node)))
(define (node-nil::node) (class-nil (@ node ast_node)))
(define-inline (node-type::type o::node) (with-access::node o (type) type))
(define-inline (node-type-set! o::node v::type) (with-access::node o (type) (set! type v)))
(define-inline (node-loc::obj o::node) (with-access::node o (loc) loc))
(define-inline (node-loc-set! o::node v::obj) (with-access::node o (loc) (set! loc v)))

;; node/effect
(define-inline (make-node/effect::node/effect loc1650::obj type1651::type side-effect1652::obj key1653::obj) (instantiate::node/effect (loc loc1650) (type type1651) (side-effect side-effect1652) (key key1653)))
(define-inline (node/effect?::bool obj::obj) ((@ isa? __object) obj (@ node/effect ast_node)))
(define (node/effect-nil::node/effect) (class-nil (@ node/effect ast_node)))
(define-inline (node/effect-key::obj o::node/effect) (with-access::node/effect o (key) key))
(define-inline (node/effect-key-set! o::node/effect v::obj) (with-access::node/effect o (key) (set! key v)))
(define-inline (node/effect-side-effect::obj o::node/effect) (with-access::node/effect o (side-effect) side-effect))
(define-inline (node/effect-side-effect-set! o::node/effect v::obj) (with-access::node/effect o (side-effect) (set! side-effect v)))
(define-inline (node/effect-type::type o::node/effect) (with-access::node/effect o (type) type))
(define-inline (node/effect-type-set! o::node/effect v::type) (with-access::node/effect o (type) (set! type v)))
(define-inline (node/effect-loc::obj o::node/effect) (with-access::node/effect o (loc) loc))
(define-inline (node/effect-loc-set! o::node/effect v::obj) (with-access::node/effect o (loc) (set! loc v)))

;; atom
(define-inline (make-atom::atom loc1646::obj type1647::type value1648::obj) (instantiate::atom (loc loc1646) (type type1647) (value value1648)))
(define-inline (atom?::bool obj::obj) ((@ isa? __object) obj (@ atom ast_node)))
(define (atom-nil::atom) (class-nil (@ atom ast_node)))
(define-inline (atom-value::obj o::atom) (with-access::atom o (value) value))
(define-inline (atom-value-set! o::atom v::obj) (with-access::atom o (value) (set! value v)))
(define-inline (atom-type::type o::atom) (with-access::atom o (type) type))
(define-inline (atom-type-set! o::atom v::type) (with-access::atom o (type) (set! type v)))
(define-inline (atom-loc::obj o::atom) (with-access::atom o (loc) loc))
(define-inline (atom-loc-set! o::atom v::obj) (with-access::atom o (loc) (set! loc v)))

;; var
(define-inline (make-var::var loc1642::obj type1643::type variable1644::variable) (instantiate::var (loc loc1642) (type type1643) (variable variable1644)))
(define-inline (var?::bool obj::obj) ((@ isa? __object) obj (@ var ast_node)))
(define (var-nil::var) (class-nil (@ var ast_node)))
(define-inline (var-variable::variable o::var) (with-access::var o (variable) variable))
(define-inline (var-variable-set! o::var v::variable) (with-access::var o (variable) (set! variable v)))
(define-inline (var-type::type o::var) (with-access::var o (type) type))
(define-inline (var-type-set! o::var v::type) (with-access::var o (type) (set! type v)))
(define-inline (var-loc::obj o::var) (with-access::var o (loc) loc))
(define-inline (var-loc-set! o::var v::obj) (with-access::var o (loc) (set! loc v)))

;; closure
(define-inline (make-closure::closure loc1638::obj type1639::type variable1640::variable) (instantiate::closure (loc loc1638) (type type1639) (variable variable1640)))
(define-inline (closure?::bool obj::obj) ((@ isa? __object) obj (@ closure ast_node)))
(define (closure-nil::closure) (class-nil (@ closure ast_node)))
(define-inline (closure-variable::variable o::closure) (with-access::closure o (variable) variable))
(define-inline (closure-variable-set! o::closure v::variable) (with-access::closure o (variable) (set! variable v)))
(define-inline (closure-type::type o::closure) (with-access::closure o (type) type))
(define-inline (closure-type-set! o::closure v::type) (with-access::closure o (type) (set! type v)))
(define-inline (closure-loc::obj o::closure) (with-access::closure o (loc) loc))
(define-inline (closure-loc-set! o::closure v::obj) (with-access::closure o (loc) (set! loc v)))

;; kwote
(define-inline (make-kwote::kwote loc1634::obj type1635::type value1636::obj) (instantiate::kwote (loc loc1634) (type type1635) (value value1636)))
(define-inline (kwote?::bool obj::obj) ((@ isa? __object) obj (@ kwote ast_node)))
(define (kwote-nil::kwote) (class-nil (@ kwote ast_node)))
(define-inline (kwote-value::obj o::kwote) (with-access::kwote o (value) value))
(define-inline (kwote-value-set! o::kwote v::obj) (with-access::kwote o (value) (set! value v)))
(define-inline (kwote-type::type o::kwote) (with-access::kwote o (type) type))
(define-inline (kwote-type-set! o::kwote v::type) (with-access::kwote o (type) (set! type v)))
(define-inline (kwote-loc::obj o::kwote) (with-access::kwote o (loc) loc))
(define-inline (kwote-loc-set! o::kwote v::obj) (with-access::kwote o (loc) (set! loc v)))

;; sequence
(define-inline (make-sequence::sequence loc1627::obj type1628::type side-effect1629::obj key1630::obj nodes1631::obj unsafe1632::bool) (instantiate::sequence (loc loc1627) (type type1628) (side-effect side-effect1629) (key key1630) (nodes nodes1631) (unsafe unsafe1632)))
(define-inline (sequence?::bool obj::obj) ((@ isa? __object) obj (@ sequence ast_node)))
(define (sequence-nil::sequence) (class-nil (@ sequence ast_node)))
(define-inline (sequence-unsafe::bool o::sequence) (with-access::sequence o (unsafe) unsafe))
(define-inline (sequence-unsafe-set! o::sequence v::bool) (with-access::sequence o (unsafe) (set! unsafe v)))
(define-inline (sequence-nodes::obj o::sequence) (with-access::sequence o (nodes) nodes))
(define-inline (sequence-nodes-set! o::sequence v::obj) (with-access::sequence o (nodes) (set! nodes v)))
(define-inline (sequence-key::obj o::sequence) (with-access::sequence o (key) key))
(define-inline (sequence-key-set! o::sequence v::obj) (with-access::sequence o (key) (set! key v)))
(define-inline (sequence-side-effect::obj o::sequence) (with-access::sequence o (side-effect) side-effect))
(define-inline (sequence-side-effect-set! o::sequence v::obj) (with-access::sequence o (side-effect) (set! side-effect v)))
(define-inline (sequence-type::type o::sequence) (with-access::sequence o (type) type))
(define-inline (sequence-type-set! o::sequence v::type) (with-access::sequence o (type) (set! type v)))
(define-inline (sequence-loc::obj o::sequence) (with-access::sequence o (loc) loc))
(define-inline (sequence-loc-set! o::sequence v::obj) (with-access::sequence o (loc) (set! loc v)))

;; app
(define-inline (make-app::app loc1620::obj type1621::type side-effect1622::obj key1623::obj fun1624::var args1625::obj) (instantiate::app (loc loc1620) (type type1621) (side-effect side-effect1622) (key key1623) (fun fun1624) (args args1625)))
(define-inline (app?::bool obj::obj) ((@ isa? __object) obj (@ app ast_node)))
(define (app-nil::app) (class-nil (@ app ast_node)))
(define-inline (app-args::obj o::app) (with-access::app o (args) args))
(define-inline (app-args-set! o::app v::obj) (with-access::app o (args) (set! args v)))
(define-inline (app-fun::var o::app) (with-access::app o (fun) fun))
(define-inline (app-fun-set! o::app v::var) (with-access::app o (fun) (set! fun v)))
(define-inline (app-key::obj o::app) (with-access::app o (key) key))
(define-inline (app-key-set! o::app v::obj) (with-access::app o (key) (set! key v)))
(define-inline (app-side-effect::obj o::app) (with-access::app o (side-effect) side-effect))
(define-inline (app-side-effect-set! o::app v::obj) (with-access::app o (side-effect) (set! side-effect v)))
(define-inline (app-type::type o::app) (with-access::app o (type) type))
(define-inline (app-type-set! o::app v::type) (with-access::app o (type) (set! type v)))
(define-inline (app-loc::obj o::app) (with-access::app o (loc) loc))
(define-inline (app-loc-set! o::app v::obj) (with-access::app o (loc) (set! loc v)))

;; app-ly
(define-inline (make-app-ly::app-ly loc1613::obj type1614::type fun1615::node arg1617::node) (instantiate::app-ly (loc loc1613) (type type1614) (fun fun1615) (arg arg1617)))
(define-inline (app-ly?::bool obj::obj) ((@ isa? __object) obj (@ app-ly ast_node)))
(define (app-ly-nil::app-ly) (class-nil (@ app-ly ast_node)))
(define-inline (app-ly-arg::node o::app-ly) (with-access::app-ly o (arg) arg))
(define-inline (app-ly-arg-set! o::app-ly v::node) (with-access::app-ly o (arg) (set! arg v)))
(define-inline (app-ly-fun::node o::app-ly) (with-access::app-ly o (fun) fun))
(define-inline (app-ly-fun-set! o::app-ly v::node) (with-access::app-ly o (fun) (set! fun v)))
(define-inline (app-ly-type::type o::app-ly) (with-access::app-ly o (type) type))
(define-inline (app-ly-type-set! o::app-ly v::type) (with-access::app-ly o (type) (set! type v)))
(define-inline (app-ly-loc::obj o::app-ly) (with-access::app-ly o (loc) loc))
(define-inline (app-ly-loc-set! o::app-ly v::obj) (with-access::app-ly o (loc) (set! loc v)))

;; funcall
(define-inline (make-funcall::funcall loc1606::obj type1607::type fun1608::node args1609::obj strength1610::symbol functions1611::obj) (instantiate::funcall (loc loc1606) (type type1607) (fun fun1608) (args args1609) (strength strength1610) (functions functions1611)))
(define-inline (funcall?::bool obj::obj) ((@ isa? __object) obj (@ funcall ast_node)))
(define (funcall-nil::funcall) (class-nil (@ funcall ast_node)))
(define-inline (funcall-functions::obj o::funcall) (with-access::funcall o (functions) functions))
(define-inline (funcall-functions-set! o::funcall v::obj) (with-access::funcall o (functions) (set! functions v)))
(define-inline (funcall-strength::symbol o::funcall) (with-access::funcall o (strength) strength))
(define-inline (funcall-strength-set! o::funcall v::symbol) (with-access::funcall o (strength) (set! strength v)))
(define-inline (funcall-args::obj o::funcall) (with-access::funcall o (args) args))
(define-inline (funcall-args-set! o::funcall v::obj) (with-access::funcall o (args) (set! args v)))
(define-inline (funcall-fun::node o::funcall) (with-access::funcall o (fun) fun))
(define-inline (funcall-fun-set! o::funcall v::node) (with-access::funcall o (fun) (set! fun v)))
(define-inline (funcall-type::type o::funcall) (with-access::funcall o (type) type))
(define-inline (funcall-type-set! o::funcall v::type) (with-access::funcall o (type) (set! type v)))
(define-inline (funcall-loc::obj o::funcall) (with-access::funcall o (loc) loc))
(define-inline (funcall-loc-set! o::funcall v::obj) (with-access::funcall o (loc) (set! loc v)))

;; extern
(define-inline (make-extern::extern loc1598::obj type1599::type side-effect1600::obj key1601::obj expr*1602::pair-nil effect1603::obj) (instantiate::extern (loc loc1598) (type type1599) (side-effect side-effect1600) (key key1601) (expr* expr*1602) (effect effect1603)))
(define-inline (extern?::bool obj::obj) ((@ isa? __object) obj (@ extern ast_node)))
(define (extern-nil::extern) (class-nil (@ extern ast_node)))
(define-inline (extern-effect::obj o::extern) (with-access::extern o (effect) effect))
(define-inline (extern-effect-set! o::extern v::obj) (with-access::extern o (effect) (set! effect v)))
(define-inline (extern-expr*::pair-nil o::extern) (with-access::extern o (expr*) expr*))
(define-inline (extern-expr*-set! o::extern v::pair-nil) (with-access::extern o (expr*) (set! expr* v)))
(define-inline (extern-key::obj o::extern) (with-access::extern o (key) key))
(define-inline (extern-key-set! o::extern v::obj) (with-access::extern o (key) (set! key v)))
(define-inline (extern-side-effect::obj o::extern) (with-access::extern o (side-effect) side-effect))
(define-inline (extern-side-effect-set! o::extern v::obj) (with-access::extern o (side-effect) (set! side-effect v)))
(define-inline (extern-type::type o::extern) (with-access::extern o (type) type))
(define-inline (extern-type-set! o::extern v::type) (with-access::extern o (type) (set! type v)))
(define-inline (extern-loc::obj o::extern) (with-access::extern o (loc) loc))
(define-inline (extern-loc-set! o::extern v::obj) (with-access::extern o (loc) (set! loc v)))

;; pragma
(define-inline (make-pragma::pragma loc1590::obj type1591::type side-effect1592::obj key1593::obj expr*1594::pair-nil effect1595::obj format1596::bstring) (instantiate::pragma (loc loc1590) (type type1591) (side-effect side-effect1592) (key key1593) (expr* expr*1594) (effect effect1595) (format format1596)))
(define-inline (pragma?::bool obj::obj) ((@ isa? __object) obj (@ pragma ast_node)))
(define (pragma-nil::pragma) (class-nil (@ pragma ast_node)))
(define-inline (pragma-format::bstring o::pragma) (with-access::pragma o (format) format))
(define-inline (pragma-format-set! o::pragma v::bstring) (with-access::pragma o (format) (set! format v)))
(define-inline (pragma-effect::obj o::pragma) (with-access::pragma o (effect) effect))
(define-inline (pragma-effect-set! o::pragma v::obj) (with-access::pragma o (effect) (set! effect v)))
(define-inline (pragma-expr*::pair-nil o::pragma) (with-access::pragma o (expr*) expr*))
(define-inline (pragma-expr*-set! o::pragma v::pair-nil) (with-access::pragma o (expr*) (set! expr* v)))
(define-inline (pragma-key::obj o::pragma) (with-access::pragma o (key) key))
(define-inline (pragma-key-set! o::pragma v::obj) (with-access::pragma o (key) (set! key v)))
(define-inline (pragma-side-effect::obj o::pragma) (with-access::pragma o (side-effect) side-effect))
(define-inline (pragma-side-effect-set! o::pragma v::obj) (with-access::pragma o (side-effect) (set! side-effect v)))
(define-inline (pragma-type::type o::pragma) (with-access::pragma o (type) type))
(define-inline (pragma-type-set! o::pragma v::type) (with-access::pragma o (type) (set! type v)))
(define-inline (pragma-loc::obj o::pragma) (with-access::pragma o (loc) loc))
(define-inline (pragma-loc-set! o::pragma v::obj) (with-access::pragma o (loc) (set! loc v)))

;; private
(define-inline (make-private::private loc1582::obj type1583::type side-effect1584::obj key1585::obj expr*1586::pair-nil effect1587::obj c-format1588::bstring) (instantiate::private (loc loc1582) (type type1583) (side-effect side-effect1584) (key key1585) (expr* expr*1586) (effect effect1587) (c-format c-format1588)))
(define-inline (private?::bool obj::obj) ((@ isa? __object) obj (@ private ast_node)))
(define (private-nil::private) (class-nil (@ private ast_node)))
(define-inline (private-c-format::bstring o::private) (with-access::private o (c-format) c-format))
(define-inline (private-c-format-set! o::private v::bstring) (with-access::private o (c-format) (set! c-format v)))
(define-inline (private-effect::obj o::private) (with-access::private o (effect) effect))
(define-inline (private-effect-set! o::private v::obj) (with-access::private o (effect) (set! effect v)))
(define-inline (private-expr*::pair-nil o::private) (with-access::private o (expr*) expr*))
(define-inline (private-expr*-set! o::private v::pair-nil) (with-access::private o (expr*) (set! expr* v)))
(define-inline (private-key::obj o::private) (with-access::private o (key) key))
(define-inline (private-key-set! o::private v::obj) (with-access::private o (key) (set! key v)))
(define-inline (private-side-effect::obj o::private) (with-access::private o (side-effect) side-effect))
(define-inline (private-side-effect-set! o::private v::obj) (with-access::private o (side-effect) (set! side-effect v)))
(define-inline (private-type::type o::private) (with-access::private o (type) type))
(define-inline (private-type-set! o::private v::type) (with-access::private o (type) (set! type v)))
(define-inline (private-loc::obj o::private) (with-access::private o (loc) loc))
(define-inline (private-loc-set! o::private v::obj) (with-access::private o (loc) (set! loc v)))

;; getfield
(define-inline (make-getfield::getfield loc1571::obj type1572::type side-effect1573::obj key1574::obj expr*1575::pair-nil effect1576::obj c-format1577::bstring fname1578::bstring ftype1579::type otype1580::type) (instantiate::getfield (loc loc1571) (type type1572) (side-effect side-effect1573) (key key1574) (expr* expr*1575) (effect effect1576) (c-format c-format1577) (fname fname1578) (ftype ftype1579) (otype otype1580)))
(define-inline (getfield?::bool obj::obj) ((@ isa? __object) obj (@ getfield ast_node)))
(define (getfield-nil::getfield) (class-nil (@ getfield ast_node)))
(define-inline (getfield-otype::type o::getfield) (with-access::getfield o (otype) otype))
(define-inline (getfield-otype-set! o::getfield v::type) (with-access::getfield o (otype) (set! otype v)))
(define-inline (getfield-ftype::type o::getfield) (with-access::getfield o (ftype) ftype))
(define-inline (getfield-ftype-set! o::getfield v::type) (with-access::getfield o (ftype) (set! ftype v)))
(define-inline (getfield-fname::bstring o::getfield) (with-access::getfield o (fname) fname))
(define-inline (getfield-fname-set! o::getfield v::bstring) (with-access::getfield o (fname) (set! fname v)))
(define-inline (getfield-c-format::bstring o::getfield) (with-access::getfield o (c-format) c-format))
(define-inline (getfield-c-format-set! o::getfield v::bstring) (with-access::getfield o (c-format) (set! c-format v)))
(define-inline (getfield-effect::obj o::getfield) (with-access::getfield o (effect) effect))
(define-inline (getfield-effect-set! o::getfield v::obj) (with-access::getfield o (effect) (set! effect v)))
(define-inline (getfield-expr*::pair-nil o::getfield) (with-access::getfield o (expr*) expr*))
(define-inline (getfield-expr*-set! o::getfield v::pair-nil) (with-access::getfield o (expr*) (set! expr* v)))
(define-inline (getfield-key::obj o::getfield) (with-access::getfield o (key) key))
(define-inline (getfield-key-set! o::getfield v::obj) (with-access::getfield o (key) (set! key v)))
(define-inline (getfield-side-effect::obj o::getfield) (with-access::getfield o (side-effect) side-effect))
(define-inline (getfield-side-effect-set! o::getfield v::obj) (with-access::getfield o (side-effect) (set! side-effect v)))
(define-inline (getfield-type::type o::getfield) (with-access::getfield o (type) type))
(define-inline (getfield-type-set! o::getfield v::type) (with-access::getfield o (type) (set! type v)))
(define-inline (getfield-loc::obj o::getfield) (with-access::getfield o (loc) loc))
(define-inline (getfield-loc-set! o::getfield v::obj) (with-access::getfield o (loc) (set! loc v)))

;; setfield
(define-inline (make-setfield::setfield loc1560::obj type1561::type side-effect1562::obj key1563::obj expr*1564::pair-nil effect1565::obj c-format1566::bstring fname1567::bstring ftype1568::type otype1569::type) (instantiate::setfield (loc loc1560) (type type1561) (side-effect side-effect1562) (key key1563) (expr* expr*1564) (effect effect1565) (c-format c-format1566) (fname fname1567) (ftype ftype1568) (otype otype1569)))
(define-inline (setfield?::bool obj::obj) ((@ isa? __object) obj (@ setfield ast_node)))
(define (setfield-nil::setfield) (class-nil (@ setfield ast_node)))
(define-inline (setfield-otype::type o::setfield) (with-access::setfield o (otype) otype))
(define-inline (setfield-otype-set! o::setfield v::type) (with-access::setfield o (otype) (set! otype v)))
(define-inline (setfield-ftype::type o::setfield) (with-access::setfield o (ftype) ftype))
(define-inline (setfield-ftype-set! o::setfield v::type) (with-access::setfield o (ftype) (set! ftype v)))
(define-inline (setfield-fname::bstring o::setfield) (with-access::setfield o (fname) fname))
(define-inline (setfield-fname-set! o::setfield v::bstring) (with-access::setfield o (fname) (set! fname v)))
(define-inline (setfield-c-format::bstring o::setfield) (with-access::setfield o (c-format) c-format))
(define-inline (setfield-c-format-set! o::setfield v::bstring) (with-access::setfield o (c-format) (set! c-format v)))
(define-inline (setfield-effect::obj o::setfield) (with-access::setfield o (effect) effect))
(define-inline (setfield-effect-set! o::setfield v::obj) (with-access::setfield o (effect) (set! effect v)))
(define-inline (setfield-expr*::pair-nil o::setfield) (with-access::setfield o (expr*) expr*))
(define-inline (setfield-expr*-set! o::setfield v::pair-nil) (with-access::setfield o (expr*) (set! expr* v)))
(define-inline (setfield-key::obj o::setfield) (with-access::setfield o (key) key))
(define-inline (setfield-key-set! o::setfield v::obj) (with-access::setfield o (key) (set! key v)))
(define-inline (setfield-side-effect::obj o::setfield) (with-access::setfield o (side-effect) side-effect))
(define-inline (setfield-side-effect-set! o::setfield v::obj) (with-access::setfield o (side-effect) (set! side-effect v)))
(define-inline (setfield-type::type o::setfield) (with-access::setfield o (type) type))
(define-inline (setfield-type-set! o::setfield v::type) (with-access::setfield o (type) (set! type v)))
(define-inline (setfield-loc::obj o::setfield) (with-access::setfield o (loc) loc))
(define-inline (setfield-loc-set! o::setfield v::obj) (with-access::setfield o (loc) (set! loc v)))

;; widening
(define-inline (make-widening::widening loc1551::obj type1552::type side-effect1553::obj key1554::obj expr*1555::pair-nil effect1556::obj c-format1557::bstring otype1558::type) (instantiate::widening (loc loc1551) (type type1552) (side-effect side-effect1553) (key key1554) (expr* expr*1555) (effect effect1556) (c-format c-format1557) (otype otype1558)))
(define-inline (widening?::bool obj::obj) ((@ isa? __object) obj (@ widening ast_node)))
(define (widening-nil::widening) (class-nil (@ widening ast_node)))
(define-inline (widening-otype::type o::widening) (with-access::widening o (otype) otype))
(define-inline (widening-otype-set! o::widening v::type) (with-access::widening o (otype) (set! otype v)))
(define-inline (widening-c-format::bstring o::widening) (with-access::widening o (c-format) c-format))
(define-inline (widening-c-format-set! o::widening v::bstring) (with-access::widening o (c-format) (set! c-format v)))
(define-inline (widening-effect::obj o::widening) (with-access::widening o (effect) effect))
(define-inline (widening-effect-set! o::widening v::obj) (with-access::widening o (effect) (set! effect v)))
(define-inline (widening-expr*::pair-nil o::widening) (with-access::widening o (expr*) expr*))
(define-inline (widening-expr*-set! o::widening v::pair-nil) (with-access::widening o (expr*) (set! expr* v)))
(define-inline (widening-key::obj o::widening) (with-access::widening o (key) key))
(define-inline (widening-key-set! o::widening v::obj) (with-access::widening o (key) (set! key v)))
(define-inline (widening-side-effect::obj o::widening) (with-access::widening o (side-effect) side-effect))
(define-inline (widening-side-effect-set! o::widening v::obj) (with-access::widening o (side-effect) (set! side-effect v)))
(define-inline (widening-type::type o::widening) (with-access::widening o (type) type))
(define-inline (widening-type-set! o::widening v::type) (with-access::widening o (type) (set! type v)))
(define-inline (widening-loc::obj o::widening) (with-access::widening o (loc) loc))
(define-inline (widening-loc-set! o::widening v::obj) (with-access::widening o (loc) (set! loc v)))

;; new
(define-inline (make-new::new loc1542::obj type1543::type side-effect1544::obj key1545::obj expr*1546::pair-nil effect1547::obj c-format1548::bstring args-type1549::pair-nil) (instantiate::new (loc loc1542) (type type1543) (side-effect side-effect1544) (key key1545) (expr* expr*1546) (effect effect1547) (c-format c-format1548) (args-type args-type1549)))
(define-inline (new?::bool obj::obj) ((@ isa? __object) obj (@ new ast_node)))
(define (new-nil::new) (class-nil (@ new ast_node)))
(define-inline (new-args-type::pair-nil o::new) (with-access::new o (args-type) args-type))
(define-inline (new-args-type-set! o::new v::pair-nil) (with-access::new o (args-type) (set! args-type v)))
(define-inline (new-c-format::bstring o::new) (with-access::new o (c-format) c-format))
(define-inline (new-c-format-set! o::new v::bstring) (with-access::new o (c-format) (set! c-format v)))
(define-inline (new-effect::obj o::new) (with-access::new o (effect) effect))
(define-inline (new-effect-set! o::new v::obj) (with-access::new o (effect) (set! effect v)))
(define-inline (new-expr*::pair-nil o::new) (with-access::new o (expr*) expr*))
(define-inline (new-expr*-set! o::new v::pair-nil) (with-access::new o (expr*) (set! expr* v)))
(define-inline (new-key::obj o::new) (with-access::new o (key) key))
(define-inline (new-key-set! o::new v::obj) (with-access::new o (key) (set! key v)))
(define-inline (new-side-effect::obj o::new) (with-access::new o (side-effect) side-effect))
(define-inline (new-side-effect-set! o::new v::obj) (with-access::new o (side-effect) (set! side-effect v)))
(define-inline (new-type::type o::new) (with-access::new o (type) type))
(define-inline (new-type-set! o::new v::type) (with-access::new o (type) (set! type v)))
(define-inline (new-loc::obj o::new) (with-access::new o (loc) loc))
(define-inline (new-loc-set! o::new v::obj) (with-access::new o (loc) (set! loc v)))

;; valloc
(define-inline (make-valloc::valloc loc1532::obj type1533::type side-effect1534::obj key1535::obj expr*1536::pair-nil effect1537::obj c-format1538::bstring ftype1539::type otype1540::type) (instantiate::valloc (loc loc1532) (type type1533) (side-effect side-effect1534) (key key1535) (expr* expr*1536) (effect effect1537) (c-format c-format1538) (ftype ftype1539) (otype otype1540)))
(define-inline (valloc?::bool obj::obj) ((@ isa? __object) obj (@ valloc ast_node)))
(define (valloc-nil::valloc) (class-nil (@ valloc ast_node)))
(define-inline (valloc-otype::type o::valloc) (with-access::valloc o (otype) otype))
(define-inline (valloc-otype-set! o::valloc v::type) (with-access::valloc o (otype) (set! otype v)))
(define-inline (valloc-ftype::type o::valloc) (with-access::valloc o (ftype) ftype))
(define-inline (valloc-ftype-set! o::valloc v::type) (with-access::valloc o (ftype) (set! ftype v)))
(define-inline (valloc-c-format::bstring o::valloc) (with-access::valloc o (c-format) c-format))
(define-inline (valloc-c-format-set! o::valloc v::bstring) (with-access::valloc o (c-format) (set! c-format v)))
(define-inline (valloc-effect::obj o::valloc) (with-access::valloc o (effect) effect))
(define-inline (valloc-effect-set! o::valloc v::obj) (with-access::valloc o (effect) (set! effect v)))
(define-inline (valloc-expr*::pair-nil o::valloc) (with-access::valloc o (expr*) expr*))
(define-inline (valloc-expr*-set! o::valloc v::pair-nil) (with-access::valloc o (expr*) (set! expr* v)))
(define-inline (valloc-key::obj o::valloc) (with-access::valloc o (key) key))
(define-inline (valloc-key-set! o::valloc v::obj) (with-access::valloc o (key) (set! key v)))
(define-inline (valloc-side-effect::obj o::valloc) (with-access::valloc o (side-effect) side-effect))
(define-inline (valloc-side-effect-set! o::valloc v::obj) (with-access::valloc o (side-effect) (set! side-effect v)))
(define-inline (valloc-type::type o::valloc) (with-access::valloc o (type) type))
(define-inline (valloc-type-set! o::valloc v::type) (with-access::valloc o (type) (set! type v)))
(define-inline (valloc-loc::obj o::valloc) (with-access::valloc o (loc) loc))
(define-inline (valloc-loc-set! o::valloc v::obj) (with-access::valloc o (loc) (set! loc v)))

;; vref
(define-inline (make-vref::vref loc1520::obj type1521::type side-effect1522::obj key1523::obj expr*1524::pair-nil effect1525::obj c-format1526::bstring ftype1527::type otype1528::type vtype1529::type unsafe1530::bool) (instantiate::vref (loc loc1520) (type type1521) (side-effect side-effect1522) (key key1523) (expr* expr*1524) (effect effect1525) (c-format c-format1526) (ftype ftype1527) (otype otype1528) (vtype vtype1529) (unsafe unsafe1530)))
(define-inline (vref?::bool obj::obj) ((@ isa? __object) obj (@ vref ast_node)))
(define (vref-nil::vref) (class-nil (@ vref ast_node)))
(define-inline (vref-unsafe::bool o::vref) (with-access::vref o (unsafe) unsafe))
(define-inline (vref-unsafe-set! o::vref v::bool) (with-access::vref o (unsafe) (set! unsafe v)))
(define-inline (vref-vtype::type o::vref) (with-access::vref o (vtype) vtype))
(define-inline (vref-vtype-set! o::vref v::type) (with-access::vref o (vtype) (set! vtype v)))
(define-inline (vref-otype::type o::vref) (with-access::vref o (otype) otype))
(define-inline (vref-otype-set! o::vref v::type) (with-access::vref o (otype) (set! otype v)))
(define-inline (vref-ftype::type o::vref) (with-access::vref o (ftype) ftype))
(define-inline (vref-ftype-set! o::vref v::type) (with-access::vref o (ftype) (set! ftype v)))
(define-inline (vref-c-format::bstring o::vref) (with-access::vref o (c-format) c-format))
(define-inline (vref-c-format-set! o::vref v::bstring) (with-access::vref o (c-format) (set! c-format v)))
(define-inline (vref-effect::obj o::vref) (with-access::vref o (effect) effect))
(define-inline (vref-effect-set! o::vref v::obj) (with-access::vref o (effect) (set! effect v)))
(define-inline (vref-expr*::pair-nil o::vref) (with-access::vref o (expr*) expr*))
(define-inline (vref-expr*-set! o::vref v::pair-nil) (with-access::vref o (expr*) (set! expr* v)))
(define-inline (vref-key::obj o::vref) (with-access::vref o (key) key))
(define-inline (vref-key-set! o::vref v::obj) (with-access::vref o (key) (set! key v)))
(define-inline (vref-side-effect::obj o::vref) (with-access::vref o (side-effect) side-effect))
(define-inline (vref-side-effect-set! o::vref v::obj) (with-access::vref o (side-effect) (set! side-effect v)))
(define-inline (vref-type::type o::vref) (with-access::vref o (type) type))
(define-inline (vref-type-set! o::vref v::type) (with-access::vref o (type) (set! type v)))
(define-inline (vref-loc::obj o::vref) (with-access::vref o (loc) loc))
(define-inline (vref-loc-set! o::vref v::obj) (with-access::vref o (loc) (set! loc v)))

;; vset!
(define-inline (make-vset!::vset! loc1508::obj type1509::type side-effect1510::obj key1511::obj expr*1512::pair-nil effect1513::obj c-format1514::bstring ftype1515::type otype1516::type vtype1517::type unsafe1518::bool) (instantiate::vset! (loc loc1508) (type type1509) (side-effect side-effect1510) (key key1511) (expr* expr*1512) (effect effect1513) (c-format c-format1514) (ftype ftype1515) (otype otype1516) (vtype vtype1517) (unsafe unsafe1518)))
(define-inline (vset!?::bool obj::obj) ((@ isa? __object) obj (@ vset! ast_node)))
(define (vset!-nil::vset!) (class-nil (@ vset! ast_node)))
(define-inline (vset!-unsafe::bool o::vset!) (with-access::vset! o (unsafe) unsafe))
(define-inline (vset!-unsafe-set! o::vset! v::bool) (with-access::vset! o (unsafe) (set! unsafe v)))
(define-inline (vset!-vtype::type o::vset!) (with-access::vset! o (vtype) vtype))
(define-inline (vset!-vtype-set! o::vset! v::type) (with-access::vset! o (vtype) (set! vtype v)))
(define-inline (vset!-otype::type o::vset!) (with-access::vset! o (otype) otype))
(define-inline (vset!-otype-set! o::vset! v::type) (with-access::vset! o (otype) (set! otype v)))
(define-inline (vset!-ftype::type o::vset!) (with-access::vset! o (ftype) ftype))
(define-inline (vset!-ftype-set! o::vset! v::type) (with-access::vset! o (ftype) (set! ftype v)))
(define-inline (vset!-c-format::bstring o::vset!) (with-access::vset! o (c-format) c-format))
(define-inline (vset!-c-format-set! o::vset! v::bstring) (with-access::vset! o (c-format) (set! c-format v)))
(define-inline (vset!-effect::obj o::vset!) (with-access::vset! o (effect) effect))
(define-inline (vset!-effect-set! o::vset! v::obj) (with-access::vset! o (effect) (set! effect v)))
(define-inline (vset!-expr*::pair-nil o::vset!) (with-access::vset! o (expr*) expr*))
(define-inline (vset!-expr*-set! o::vset! v::pair-nil) (with-access::vset! o (expr*) (set! expr* v)))
(define-inline (vset!-key::obj o::vset!) (with-access::vset! o (key) key))
(define-inline (vset!-key-set! o::vset! v::obj) (with-access::vset! o (key) (set! key v)))
(define-inline (vset!-side-effect::obj o::vset!) (with-access::vset! o (side-effect) side-effect))
(define-inline (vset!-side-effect-set! o::vset! v::obj) (with-access::vset! o (side-effect) (set! side-effect v)))
(define-inline (vset!-type::type o::vset!) (with-access::vset! o (type) type))
(define-inline (vset!-type-set! o::vset! v::type) (with-access::vset! o (type) (set! type v)))
(define-inline (vset!-loc::obj o::vset!) (with-access::vset! o (loc) loc))
(define-inline (vset!-loc-set! o::vset! v::obj) (with-access::vset! o (loc) (set! loc v)))

;; vlength
(define-inline (make-vlength::vlength loc1499::obj type1500::type side-effect1501::obj key1502::obj expr*1503::pair-nil effect1504::obj c-format1505::bstring vtype1506::type) (instantiate::vlength (loc loc1499) (type type1500) (side-effect side-effect1501) (key key1502) (expr* expr*1503) (effect effect1504) (c-format c-format1505) (vtype vtype1506)))
(define-inline (vlength?::bool obj::obj) ((@ isa? __object) obj (@ vlength ast_node)))
(define (vlength-nil::vlength) (class-nil (@ vlength ast_node)))
(define-inline (vlength-vtype::type o::vlength) (with-access::vlength o (vtype) vtype))
(define-inline (vlength-vtype-set! o::vlength v::type) (with-access::vlength o (vtype) (set! vtype v)))
(define-inline (vlength-c-format::bstring o::vlength) (with-access::vlength o (c-format) c-format))
(define-inline (vlength-c-format-set! o::vlength v::bstring) (with-access::vlength o (c-format) (set! c-format v)))
(define-inline (vlength-effect::obj o::vlength) (with-access::vlength o (effect) effect))
(define-inline (vlength-effect-set! o::vlength v::obj) (with-access::vlength o (effect) (set! effect v)))
(define-inline (vlength-expr*::pair-nil o::vlength) (with-access::vlength o (expr*) expr*))
(define-inline (vlength-expr*-set! o::vlength v::pair-nil) (with-access::vlength o (expr*) (set! expr* v)))
(define-inline (vlength-key::obj o::vlength) (with-access::vlength o (key) key))
(define-inline (vlength-key-set! o::vlength v::obj) (with-access::vlength o (key) (set! key v)))
(define-inline (vlength-side-effect::obj o::vlength) (with-access::vlength o (side-effect) side-effect))
(define-inline (vlength-side-effect-set! o::vlength v::obj) (with-access::vlength o (side-effect) (set! side-effect v)))
(define-inline (vlength-type::type o::vlength) (with-access::vlength o (type) type))
(define-inline (vlength-type-set! o::vlength v::type) (with-access::vlength o (type) (set! type v)))
(define-inline (vlength-loc::obj o::vlength) (with-access::vlength o (loc) loc))
(define-inline (vlength-loc-set! o::vlength v::obj) (with-access::vlength o (loc) (set! loc v)))

;; instanceof
(define-inline (make-instanceof::instanceof loc1490::obj type1491::type side-effect1492::obj key1493::obj expr*1494::pair-nil effect1495::obj c-format1496::bstring class1497::type) (instantiate::instanceof (loc loc1490) (type type1491) (side-effect side-effect1492) (key key1493) (expr* expr*1494) (effect effect1495) (c-format c-format1496) (class class1497)))
(define-inline (instanceof?::bool obj::obj) ((@ isa? __object) obj (@ instanceof ast_node)))
(define (instanceof-nil::instanceof) (class-nil (@ instanceof ast_node)))
(define-inline (instanceof-class::type o::instanceof) (with-access::instanceof o (class) class))
(define-inline (instanceof-class-set! o::instanceof v::type) (with-access::instanceof o (class) (set! class v)))
(define-inline (instanceof-c-format::bstring o::instanceof) (with-access::instanceof o (c-format) c-format))
(define-inline (instanceof-c-format-set! o::instanceof v::bstring) (with-access::instanceof o (c-format) (set! c-format v)))
(define-inline (instanceof-effect::obj o::instanceof) (with-access::instanceof o (effect) effect))
(define-inline (instanceof-effect-set! o::instanceof v::obj) (with-access::instanceof o (effect) (set! effect v)))
(define-inline (instanceof-expr*::pair-nil o::instanceof) (with-access::instanceof o (expr*) expr*))
(define-inline (instanceof-expr*-set! o::instanceof v::pair-nil) (with-access::instanceof o (expr*) (set! expr* v)))
(define-inline (instanceof-key::obj o::instanceof) (with-access::instanceof o (key) key))
(define-inline (instanceof-key-set! o::instanceof v::obj) (with-access::instanceof o (key) (set! key v)))
(define-inline (instanceof-side-effect::obj o::instanceof) (with-access::instanceof o (side-effect) side-effect))
(define-inline (instanceof-side-effect-set! o::instanceof v::obj) (with-access::instanceof o (side-effect) (set! side-effect v)))
(define-inline (instanceof-type::type o::instanceof) (with-access::instanceof o (type) type))
(define-inline (instanceof-type-set! o::instanceof v::type) (with-access::instanceof o (type) (set! type v)))
(define-inline (instanceof-loc::obj o::instanceof) (with-access::instanceof o (loc) loc))
(define-inline (instanceof-loc-set! o::instanceof v::obj) (with-access::instanceof o (loc) (set! loc v)))

;; cast-null
(define-inline (make-cast-null::cast-null loc1482::obj type1483::type side-effect1484::obj key1485::obj expr*1486::pair-nil effect1487::obj c-format1488::bstring) (instantiate::cast-null (loc loc1482) (type type1483) (side-effect side-effect1484) (key key1485) (expr* expr*1486) (effect effect1487) (c-format c-format1488)))
(define-inline (cast-null?::bool obj::obj) ((@ isa? __object) obj (@ cast-null ast_node)))
(define (cast-null-nil::cast-null) (class-nil (@ cast-null ast_node)))
(define-inline (cast-null-c-format::bstring o::cast-null) (with-access::cast-null o (c-format) c-format))
(define-inline (cast-null-c-format-set! o::cast-null v::bstring) (with-access::cast-null o (c-format) (set! c-format v)))
(define-inline (cast-null-effect::obj o::cast-null) (with-access::cast-null o (effect) effect))
(define-inline (cast-null-effect-set! o::cast-null v::obj) (with-access::cast-null o (effect) (set! effect v)))
(define-inline (cast-null-expr*::pair-nil o::cast-null) (with-access::cast-null o (expr*) expr*))
(define-inline (cast-null-expr*-set! o::cast-null v::pair-nil) (with-access::cast-null o (expr*) (set! expr* v)))
(define-inline (cast-null-key::obj o::cast-null) (with-access::cast-null o (key) key))
(define-inline (cast-null-key-set! o::cast-null v::obj) (with-access::cast-null o (key) (set! key v)))
(define-inline (cast-null-side-effect::obj o::cast-null) (with-access::cast-null o (side-effect) side-effect))
(define-inline (cast-null-side-effect-set! o::cast-null v::obj) (with-access::cast-null o (side-effect) (set! side-effect v)))
(define-inline (cast-null-type::type o::cast-null) (with-access::cast-null o (type) type))
(define-inline (cast-null-type-set! o::cast-null v::type) (with-access::cast-null o (type) (set! type v)))
(define-inline (cast-null-loc::obj o::cast-null) (with-access::cast-null o (loc) loc))
(define-inline (cast-null-loc-set! o::cast-null v::obj) (with-access::cast-null o (loc) (set! loc v)))

;; cast
(define-inline (make-cast::cast loc1477::obj type1478::type arg1480::node) (instantiate::cast (loc loc1477) (type type1478) (arg arg1480)))
(define-inline (cast?::bool obj::obj) ((@ isa? __object) obj (@ cast ast_node)))
(define (cast-nil::cast) (class-nil (@ cast ast_node)))
(define-inline (cast-arg::node o::cast) (with-access::cast o (arg) arg))
(define-inline (cast-arg-set! o::cast v::node) (with-access::cast o (arg) (set! arg v)))
(define-inline (cast-type::type o::cast) (with-access::cast o (type) type))
(define-inline (cast-type-set! o::cast v::type) (with-access::cast o (type) (set! type v)))
(define-inline (cast-loc::obj o::cast) (with-access::cast o (loc) loc))
(define-inline (cast-loc-set! o::cast v::obj) (with-access::cast o (loc) (set! loc v)))

;; setq
(define-inline (make-setq::setq loc1472::obj type1473::type var1474::var value1475::node) (instantiate::setq (loc loc1472) (type type1473) (var var1474) (value value1475)))
(define-inline (setq?::bool obj::obj) ((@ isa? __object) obj (@ setq ast_node)))
(define (setq-nil::setq) (class-nil (@ setq ast_node)))
(define-inline (setq-value::node o::setq) (with-access::setq o (value) value))
(define-inline (setq-value-set! o::setq v::node) (with-access::setq o (value) (set! value v)))
(define-inline (setq-var::var o::setq) (with-access::setq o (var) var))
(define-inline (setq-var-set! o::setq v::var) (with-access::setq o (var) (set! var v)))
(define-inline (setq-type::type o::setq) (with-access::setq o (type) type))
(define-inline (setq-type-set! o::setq v::type) (with-access::setq o (type) (set! type v)))
(define-inline (setq-loc::obj o::setq) (with-access::setq o (loc) loc))
(define-inline (setq-loc-set! o::setq v::obj) (with-access::setq o (loc) (set! loc v)))

;; conditional
(define-inline (make-conditional::conditional loc1464::obj type1465::type side-effect1466::obj key1467::obj test1468::node true1469::node false1470::node) (instantiate::conditional (loc loc1464) (type type1465) (side-effect side-effect1466) (key key1467) (test test1468) (true true1469) (false false1470)))
(define-inline (conditional?::bool obj::obj) ((@ isa? __object) obj (@ conditional ast_node)))
(define (conditional-nil::conditional) (class-nil (@ conditional ast_node)))
(define-inline (conditional-false::node o::conditional) (with-access::conditional o (false) false))
(define-inline (conditional-false-set! o::conditional v::node) (with-access::conditional o (false) (set! false v)))
(define-inline (conditional-true::node o::conditional) (with-access::conditional o (true) true))
(define-inline (conditional-true-set! o::conditional v::node) (with-access::conditional o (true) (set! true v)))
(define-inline (conditional-test::node o::conditional) (with-access::conditional o (test) test))
(define-inline (conditional-test-set! o::conditional v::node) (with-access::conditional o (test) (set! test v)))
(define-inline (conditional-key::obj o::conditional) (with-access::conditional o (key) key))
(define-inline (conditional-key-set! o::conditional v::obj) (with-access::conditional o (key) (set! key v)))
(define-inline (conditional-side-effect::obj o::conditional) (with-access::conditional o (side-effect) side-effect))
(define-inline (conditional-side-effect-set! o::conditional v::obj) (with-access::conditional o (side-effect) (set! side-effect v)))
(define-inline (conditional-type::type o::conditional) (with-access::conditional o (type) type))
(define-inline (conditional-type-set! o::conditional v::type) (with-access::conditional o (type) (set! type v)))
(define-inline (conditional-loc::obj o::conditional) (with-access::conditional o (loc) loc))
(define-inline (conditional-loc-set! o::conditional v::obj) (with-access::conditional o (loc) (set! loc v)))

;; fail
(define-inline (make-fail::fail loc1458::obj type1459::type proc1460::node msg1461::node obj1462::node) (instantiate::fail (loc loc1458) (type type1459) (proc proc1460) (msg msg1461) (obj obj1462)))
(define-inline (fail?::bool obj::obj) ((@ isa? __object) obj (@ fail ast_node)))
(define (fail-nil::fail) (class-nil (@ fail ast_node)))
(define-inline (fail-obj::node o::fail) (with-access::fail o (obj) obj))
(define-inline (fail-obj-set! o::fail v::node) (with-access::fail o (obj) (set! obj v)))
(define-inline (fail-msg::node o::fail) (with-access::fail o (msg) msg))
(define-inline (fail-msg-set! o::fail v::node) (with-access::fail o (msg) (set! msg v)))
(define-inline (fail-proc::node o::fail) (with-access::fail o (proc) proc))
(define-inline (fail-proc-set! o::fail v::node) (with-access::fail o (proc) (set! proc v)))
(define-inline (fail-type::type o::fail) (with-access::fail o (type) type))
(define-inline (fail-type-set! o::fail v::type) (with-access::fail o (type) (set! type v)))
(define-inline (fail-loc::obj o::fail) (with-access::fail o (loc) loc))
(define-inline (fail-loc-set! o::fail v::obj) (with-access::fail o (loc) (set! loc v)))

;; select
(define-inline (make-select::select loc1449::obj type1450::type side-effect1451::obj key1452::obj test1454::node clauses1455::obj item-type1456::type) (instantiate::select (loc loc1449) (type type1450) (side-effect side-effect1451) (key key1452) (test test1454) (clauses clauses1455) (item-type item-type1456)))
(define-inline (select?::bool obj::obj) ((@ isa? __object) obj (@ select ast_node)))
(define (select-nil::select) (class-nil (@ select ast_node)))
(define-inline (select-item-type::type o::select) (with-access::select o (item-type) item-type))
(define-inline (select-item-type-set! o::select v::type) (with-access::select o (item-type) (set! item-type v)))
(define-inline (select-clauses::obj o::select) (with-access::select o (clauses) clauses))
(define-inline (select-clauses-set! o::select v::obj) (with-access::select o (clauses) (set! clauses v)))
(define-inline (select-test::node o::select) (with-access::select o (test) test))
(define-inline (select-test-set! o::select v::node) (with-access::select o (test) (set! test v)))
(define-inline (select-key::obj o::select) (with-access::select o (key) key))
(define-inline (select-key-set! o::select v::obj) (with-access::select o (key) (set! key v)))
(define-inline (select-side-effect::obj o::select) (with-access::select o (side-effect) side-effect))
(define-inline (select-side-effect-set! o::select v::obj) (with-access::select o (side-effect) (set! side-effect v)))
(define-inline (select-type::type o::select) (with-access::select o (type) type))
(define-inline (select-type-set! o::select v::type) (with-access::select o (type) (set! type v)))
(define-inline (select-loc::obj o::select) (with-access::select o (loc) loc))
(define-inline (select-loc-set! o::select v::obj) (with-access::select o (loc) (set! loc v)))

;; let-fun
(define-inline (make-let-fun::let-fun loc1442::obj type1443::type side-effect1444::obj key1445::obj locals1446::obj body1447::node) (instantiate::let-fun (loc loc1442) (type type1443) (side-effect side-effect1444) (key key1445) (locals locals1446) (body body1447)))
(define-inline (let-fun?::bool obj::obj) ((@ isa? __object) obj (@ let-fun ast_node)))
(define (let-fun-nil::let-fun) (class-nil (@ let-fun ast_node)))
(define-inline (let-fun-body::node o::let-fun) (with-access::let-fun o (body) body))
(define-inline (let-fun-body-set! o::let-fun v::node) (with-access::let-fun o (body) (set! body v)))
(define-inline (let-fun-locals::obj o::let-fun) (with-access::let-fun o (locals) locals))
(define-inline (let-fun-locals-set! o::let-fun v::obj) (with-access::let-fun o (locals) (set! locals v)))
(define-inline (let-fun-key::obj o::let-fun) (with-access::let-fun o (key) key))
(define-inline (let-fun-key-set! o::let-fun v::obj) (with-access::let-fun o (key) (set! key v)))
(define-inline (let-fun-side-effect::obj o::let-fun) (with-access::let-fun o (side-effect) side-effect))
(define-inline (let-fun-side-effect-set! o::let-fun v::obj) (with-access::let-fun o (side-effect) (set! side-effect v)))
(define-inline (let-fun-type::type o::let-fun) (with-access::let-fun o (type) type))
(define-inline (let-fun-type-set! o::let-fun v::type) (with-access::let-fun o (type) (set! type v)))
(define-inline (let-fun-loc::obj o::let-fun) (with-access::let-fun o (loc) loc))
(define-inline (let-fun-loc-set! o::let-fun v::obj) (with-access::let-fun o (loc) (set! loc v)))

;; let-var
(define-inline (make-let-var::let-var loc1434::obj type1435::type side-effect1436::obj key1437::obj bindings1438::obj body1439::node removable?1440::bool) (instantiate::let-var (loc loc1434) (type type1435) (side-effect side-effect1436) (key key1437) (bindings bindings1438) (body body1439) (removable? removable?1440)))
(define-inline (let-var?::bool obj::obj) ((@ isa? __object) obj (@ let-var ast_node)))
(define (let-var-nil::let-var) (class-nil (@ let-var ast_node)))
(define-inline (let-var-removable?::bool o::let-var) (with-access::let-var o (removable?) removable?))
(define-inline (let-var-removable?-set! o::let-var v::bool) (with-access::let-var o (removable?) (set! removable? v)))
(define-inline (let-var-body::node o::let-var) (with-access::let-var o (body) body))
(define-inline (let-var-body-set! o::let-var v::node) (with-access::let-var o (body) (set! body v)))
(define-inline (let-var-bindings::obj o::let-var) (with-access::let-var o (bindings) bindings))
(define-inline (let-var-bindings-set! o::let-var v::obj) (with-access::let-var o (bindings) (set! bindings v)))
(define-inline (let-var-key::obj o::let-var) (with-access::let-var o (key) key))
(define-inline (let-var-key-set! o::let-var v::obj) (with-access::let-var o (key) (set! key v)))
(define-inline (let-var-side-effect::obj o::let-var) (with-access::let-var o (side-effect) side-effect))
(define-inline (let-var-side-effect-set! o::let-var v::obj) (with-access::let-var o (side-effect) (set! side-effect v)))
(define-inline (let-var-type::type o::let-var) (with-access::let-var o (type) type))
(define-inline (let-var-type-set! o::let-var v::type) (with-access::let-var o (type) (set! type v)))
(define-inline (let-var-loc::obj o::let-var) (with-access::let-var o (loc) loc))
(define-inline (let-var-loc-set! o::let-var v::obj) (with-access::let-var o (loc) (set! loc v)))

;; set-ex-it
(define-inline (make-set-ex-it::set-ex-it loc1429::obj type1430::type var1431::var body1432::node) (instantiate::set-ex-it (loc loc1429) (type type1430) (var var1431) (body body1432)))
(define-inline (set-ex-it?::bool obj::obj) ((@ isa? __object) obj (@ set-ex-it ast_node)))
(define (set-ex-it-nil::set-ex-it) (class-nil (@ set-ex-it ast_node)))
(define-inline (set-ex-it-body::node o::set-ex-it) (with-access::set-ex-it o (body) body))
(define-inline (set-ex-it-body-set! o::set-ex-it v::node) (with-access::set-ex-it o (body) (set! body v)))
(define-inline (set-ex-it-var::var o::set-ex-it) (with-access::set-ex-it o (var) var))
(define-inline (set-ex-it-var-set! o::set-ex-it v::var) (with-access::set-ex-it o (var) (set! var v)))
(define-inline (set-ex-it-type::type o::set-ex-it) (with-access::set-ex-it o (type) type))
(define-inline (set-ex-it-type-set! o::set-ex-it v::type) (with-access::set-ex-it o (type) (set! type v)))
(define-inline (set-ex-it-loc::obj o::set-ex-it) (with-access::set-ex-it o (loc) loc))
(define-inline (set-ex-it-loc-set! o::set-ex-it v::obj) (with-access::set-ex-it o (loc) (set! loc v)))

;; jump-ex-it
(define-inline (make-jump-ex-it::jump-ex-it loc1424::obj type1425::type exit1426::node value1427::node) (instantiate::jump-ex-it (loc loc1424) (type type1425) (exit exit1426) (value value1427)))
(define-inline (jump-ex-it?::bool obj::obj) ((@ isa? __object) obj (@ jump-ex-it ast_node)))
(define (jump-ex-it-nil::jump-ex-it) (class-nil (@ jump-ex-it ast_node)))
(define-inline (jump-ex-it-value::node o::jump-ex-it) (with-access::jump-ex-it o (value) value))
(define-inline (jump-ex-it-value-set! o::jump-ex-it v::node) (with-access::jump-ex-it o (value) (set! value v)))
(define-inline (jump-ex-it-exit::node o::jump-ex-it) (with-access::jump-ex-it o (exit) exit))
(define-inline (jump-ex-it-exit-set! o::jump-ex-it v::node) (with-access::jump-ex-it o (exit) (set! exit v)))
(define-inline (jump-ex-it-type::type o::jump-ex-it) (with-access::jump-ex-it o (type) type))
(define-inline (jump-ex-it-type-set! o::jump-ex-it v::type) (with-access::jump-ex-it o (type) (set! type v)))
(define-inline (jump-ex-it-loc::obj o::jump-ex-it) (with-access::jump-ex-it o (loc) loc))
(define-inline (jump-ex-it-loc-set! o::jump-ex-it v::obj) (with-access::jump-ex-it o (loc) (set! loc v)))

;; make-box
(define-inline (make-make-box::make-box loc1418::obj type1419::type side-effect1420::obj key1421::obj value1422::node) (instantiate::make-box (loc loc1418) (type type1419) (side-effect side-effect1420) (key key1421) (value value1422)))
(define-inline (make-box?::bool obj::obj) ((@ isa? __object) obj (@ make-box ast_node)))
(define (make-box-nil::make-box) (class-nil (@ make-box ast_node)))
(define-inline (make-box-value::node o::make-box) (with-access::make-box o (value) value))
(define-inline (make-box-value-set! o::make-box v::node) (with-access::make-box o (value) (set! value v)))
(define-inline (make-box-key::obj o::make-box) (with-access::make-box o (key) key))
(define-inline (make-box-key-set! o::make-box v::obj) (with-access::make-box o (key) (set! key v)))
(define-inline (make-box-side-effect::obj o::make-box) (with-access::make-box o (side-effect) side-effect))
(define-inline (make-box-side-effect-set! o::make-box v::obj) (with-access::make-box o (side-effect) (set! side-effect v)))
(define-inline (make-box-type::type o::make-box) (with-access::make-box o (type) type))
(define-inline (make-box-type-set! o::make-box v::type) (with-access::make-box o (type) (set! type v)))
(define-inline (make-box-loc::obj o::make-box) (with-access::make-box o (loc) loc))
(define-inline (make-box-loc-set! o::make-box v::obj) (with-access::make-box o (loc) (set! loc v)))

;; box-ref
(define-inline (make-box-ref::box-ref loc1412::obj type1413::type side-effect1414::obj key1415::obj var1416::var) (instantiate::box-ref (loc loc1412) (type type1413) (side-effect side-effect1414) (key key1415) (var var1416)))
(define-inline (box-ref?::bool obj::obj) ((@ isa? __object) obj (@ box-ref ast_node)))
(define (box-ref-nil::box-ref) (class-nil (@ box-ref ast_node)))
(define-inline (box-ref-var::var o::box-ref) (with-access::box-ref o (var) var))
(define-inline (box-ref-var-set! o::box-ref v::var) (with-access::box-ref o (var) (set! var v)))
(define-inline (box-ref-key::obj o::box-ref) (with-access::box-ref o (key) key))
(define-inline (box-ref-key-set! o::box-ref v::obj) (with-access::box-ref o (key) (set! key v)))
(define-inline (box-ref-side-effect::obj o::box-ref) (with-access::box-ref o (side-effect) side-effect))
(define-inline (box-ref-side-effect-set! o::box-ref v::obj) (with-access::box-ref o (side-effect) (set! side-effect v)))
(define-inline (box-ref-type::type o::box-ref) (with-access::box-ref o (type) type))
(define-inline (box-ref-type-set! o::box-ref v::type) (with-access::box-ref o (type) (set! type v)))
(define-inline (box-ref-loc::obj o::box-ref) (with-access::box-ref o (loc) loc))
(define-inline (box-ref-loc-set! o::box-ref v::obj) (with-access::box-ref o (loc) (set! loc v)))

;; box-set!
(define-inline (make-box-set!::box-set! loc1407::obj type1408::type var1409::var value1410::node) (instantiate::box-set! (loc loc1407) (type type1408) (var var1409) (value value1410)))
(define-inline (box-set!?::bool obj::obj) ((@ isa? __object) obj (@ box-set! ast_node)))
(define (box-set!-nil::box-set!) (class-nil (@ box-set! ast_node)))
(define-inline (box-set!-value::node o::box-set!) (with-access::box-set! o (value) value))
(define-inline (box-set!-value-set! o::box-set! v::node) (with-access::box-set! o (value) (set! value v)))
(define-inline (box-set!-var::var o::box-set!) (with-access::box-set! o (var) var))
(define-inline (box-set!-var-set! o::box-set! v::var) (with-access::box-set! o (var) (set! var v)))
(define-inline (box-set!-type::type o::box-set!) (with-access::box-set! o (type) type))
(define-inline (box-set!-type-set! o::box-set! v::type) (with-access::box-set! o (type) (set! type v)))
(define-inline (box-set!-loc::obj o::box-set!) (with-access::box-set! o (loc) loc))
(define-inline (box-set!-loc-set! o::box-set! v::obj) (with-access::box-set! o (loc) (set! loc v)))

;; sync
(define-inline (make-sync::sync loc1402::obj type1403::type mutex1404::node nodes1405::pair-nil) (instantiate::sync (loc loc1402) (type type1403) (mutex mutex1404) (nodes nodes1405)))
(define-inline (sync?::bool obj::obj) ((@ isa? __object) obj (@ sync ast_node)))
(define (sync-nil::sync) (class-nil (@ sync ast_node)))
(define-inline (sync-nodes::pair-nil o::sync) (with-access::sync o (nodes) nodes))
(define-inline (sync-nodes-set! o::sync v::pair-nil) (with-access::sync o (nodes) (set! nodes v)))
(define-inline (sync-mutex::node o::sync) (with-access::sync o (mutex) mutex))
(define-inline (sync-mutex-set! o::sync v::node) (with-access::sync o (mutex) (set! mutex v)))
(define-inline (sync-type::type o::sync) (with-access::sync o (type) type))
(define-inline (sync-type-set! o::sync v::type) (with-access::sync o (type) (set! type v)))
(define-inline (sync-loc::obj o::sync) (with-access::sync o (loc) loc))
(define-inline (sync-loc-set! o::sync v::obj) (with-access::sync o (loc) (set! loc v)))
))
