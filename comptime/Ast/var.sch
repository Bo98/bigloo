;; ==========================================================
;; Class accessors
;; Bigloo (3.7b)
;; Inria -- Sophia Antipolis     Mon Nov 14 16:42:36 CET 2011 
;; (bigloo.new -classgen Ast/var.scm)
;; ==========================================================

;; The directives
(directives

;; value
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-value::value)
    (inline value?::bool ::obj)
    (value-nil::value))))

;; variable
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-variable::variable id1303::symbol name1304::obj type1305::type value1306::value access1307::obj fast-alpha1308::obj removable1309::obj occurrence1310::long occurrencew1311::long user?1312::bool)
    (inline variable?::bool ::obj)
    (variable-nil::variable)
    (inline variable-user?::bool ::variable)
    (inline variable-user?-set! ::variable ::bool)
    (inline variable-occurrencew::long ::variable)
    (inline variable-occurrencew-set! ::variable ::long)
    (inline variable-occurrence::long ::variable)
    (inline variable-occurrence-set! ::variable ::long)
    (inline variable-removable::obj ::variable)
    (inline variable-removable-set! ::variable ::obj)
    (inline variable-fast-alpha::obj ::variable)
    (inline variable-fast-alpha-set! ::variable ::obj)
    (inline variable-access::obj ::variable)
    (inline variable-access-set! ::variable ::obj)
    (inline variable-value::value ::variable)
    (inline variable-value-set! ::variable ::value)
    (inline variable-type::type ::variable)
    (inline variable-type-set! ::variable ::type)
    (inline variable-name::obj ::variable)
    (inline variable-name-set! ::variable ::obj)
    (inline variable-id::symbol ::variable))))

;; global
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-global::global id1283::symbol name1284::obj type1285::type value1286::value access1287::obj fast-alpha1288::obj removable1289::obj occurrence1290::long occurrencew1291::long user?1292::bool module1293::symbol import1294::obj evaluable?1295::bool eval?1296::bool library1297::obj pragma1298::obj src1299::obj jvm-type-name1300::bstring init1301::obj)
    (inline global?::bool ::obj)
    (global-nil::global)
    (inline global-init::obj ::global)
    (inline global-init-set! ::global ::obj)
    (inline global-jvm-type-name::bstring ::global)
    (inline global-jvm-type-name-set! ::global ::bstring)
    (inline global-src::obj ::global)
    (inline global-src-set! ::global ::obj)
    (inline global-pragma::obj ::global)
    (inline global-pragma-set! ::global ::obj)
    (inline global-library::obj ::global)
    (inline global-library-set! ::global ::obj)
    (inline global-eval?::bool ::global)
    (inline global-eval?-set! ::global ::bool)
    (inline global-evaluable?::bool ::global)
    (inline global-evaluable?-set! ::global ::bool)
    (inline global-import::obj ::global)
    (inline global-import-set! ::global ::obj)
    (inline global-module::symbol ::global)
    (inline global-module-set! ::global ::symbol)
    (inline global-user?::bool ::global)
    (inline global-user?-set! ::global ::bool)
    (inline global-occurrencew::long ::global)
    (inline global-occurrencew-set! ::global ::long)
    (inline global-occurrence::long ::global)
    (inline global-occurrence-set! ::global ::long)
    (inline global-removable::obj ::global)
    (inline global-removable-set! ::global ::obj)
    (inline global-fast-alpha::obj ::global)
    (inline global-fast-alpha-set! ::global ::obj)
    (inline global-access::obj ::global)
    (inline global-access-set! ::global ::obj)
    (inline global-value::value ::global)
    (inline global-value-set! ::global ::value)
    (inline global-type::type ::global)
    (inline global-type-set! ::global ::type)
    (inline global-name::obj ::global)
    (inline global-name-set! ::global ::obj)
    (inline global-id::symbol ::global))))

;; local
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-local::local id1271::symbol name1272::obj type1273::type value1274::value access1275::obj fast-alpha1276::obj removable1277::obj occurrence1278::long occurrencew1279::long user?1280::bool key1281::long)
    (inline local?::bool ::obj)
    (local-nil::local)
    (inline local-key::long ::local)
    (inline local-user?::bool ::local)
    (inline local-user?-set! ::local ::bool)
    (inline local-occurrencew::long ::local)
    (inline local-occurrencew-set! ::local ::long)
    (inline local-occurrence::long ::local)
    (inline local-occurrence-set! ::local ::long)
    (inline local-removable::obj ::local)
    (inline local-removable-set! ::local ::obj)
    (inline local-fast-alpha::obj ::local)
    (inline local-fast-alpha-set! ::local ::obj)
    (inline local-access::obj ::local)
    (inline local-access-set! ::local ::obj)
    (inline local-value::value ::local)
    (inline local-value-set! ::local ::value)
    (inline local-type::type ::local)
    (inline local-type-set! ::local ::type)
    (inline local-name::obj ::local)
    (inline local-name-set! ::local ::obj)
    (inline local-id::symbol ::local))))

;; fun
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-fun::fun arity1263::long side-effect1264::obj predicate-of1265::obj stack-allocator1266::obj top?1267::bool the-closure1268::obj effect1269::obj)
    (inline fun?::bool ::obj)
    (fun-nil::fun)
    (inline fun-effect::obj ::fun)
    (inline fun-effect-set! ::fun ::obj)
    (inline fun-the-closure::obj ::fun)
    (inline fun-the-closure-set! ::fun ::obj)
    (inline fun-top?::bool ::fun)
    (inline fun-top?-set! ::fun ::bool)
    (inline fun-stack-allocator::obj ::fun)
    (inline fun-stack-allocator-set! ::fun ::obj)
    (inline fun-predicate-of::obj ::fun)
    (inline fun-predicate-of-set! ::fun ::obj)
    (inline fun-side-effect::obj ::fun)
    (inline fun-side-effect-set! ::fun ::obj)
    (inline fun-arity::long ::fun))))

;; sfun
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-sfun::sfun arity1244::long side-effect1245::obj predicate-of1246::obj stack-allocator1247::obj top?1248::bool the-closure1249::obj effect1250::obj property1251::obj args1252::obj args-name1253::obj body1254::obj class1255::obj dsssl-keywords1256::obj loc1257::obj optionals1258::obj keys1259::obj the-closure-global1260::obj strength1261::symbol)
    (inline sfun?::bool ::obj)
    (sfun-nil::sfun)
    (inline sfun-strength::symbol ::sfun)
    (inline sfun-strength-set! ::sfun ::symbol)
    (inline sfun-the-closure-global::obj ::sfun)
    (inline sfun-the-closure-global-set! ::sfun ::obj)
    (inline sfun-keys::obj ::sfun)
    (inline sfun-optionals::obj ::sfun)
    (inline sfun-loc::obj ::sfun)
    (inline sfun-loc-set! ::sfun ::obj)
    (inline sfun-dsssl-keywords::obj ::sfun)
    (inline sfun-dsssl-keywords-set! ::sfun ::obj)
    (inline sfun-class::obj ::sfun)
    (inline sfun-class-set! ::sfun ::obj)
    (inline sfun-body::obj ::sfun)
    (inline sfun-body-set! ::sfun ::obj)
    (inline sfun-args-name::obj ::sfun)
    (inline sfun-args::obj ::sfun)
    (inline sfun-args-set! ::sfun ::obj)
    (inline sfun-property::obj ::sfun)
    (inline sfun-property-set! ::sfun ::obj)
    (inline sfun-effect::obj ::sfun)
    (inline sfun-effect-set! ::sfun ::obj)
    (inline sfun-the-closure::obj ::sfun)
    (inline sfun-the-closure-set! ::sfun ::obj)
    (inline sfun-top?::bool ::sfun)
    (inline sfun-top?-set! ::sfun ::bool)
    (inline sfun-stack-allocator::obj ::sfun)
    (inline sfun-stack-allocator-set! ::sfun ::obj)
    (inline sfun-predicate-of::obj ::sfun)
    (inline sfun-predicate-of-set! ::sfun ::obj)
    (inline sfun-side-effect::obj ::sfun)
    (inline sfun-side-effect-set! ::sfun ::obj)
    (inline sfun-arity::long ::sfun))))

;; cfun
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cfun::cfun arity1232::long side-effect1233::obj predicate-of1234::obj stack-allocator1235::obj top?1236::bool the-closure1237::obj effect1238::obj args-type1239::obj macro?1240::bool infix?1241::bool method1242::pair-nil)
    (inline cfun?::bool ::obj)
    (cfun-nil::cfun)
    (inline cfun-method::pair-nil ::cfun)
    (inline cfun-method-set! ::cfun ::pair-nil)
    (inline cfun-infix?::bool ::cfun)
    (inline cfun-infix?-set! ::cfun ::bool)
    (inline cfun-macro?::bool ::cfun)
    (inline cfun-args-type::obj ::cfun)
    (inline cfun-effect::obj ::cfun)
    (inline cfun-effect-set! ::cfun ::obj)
    (inline cfun-the-closure::obj ::cfun)
    (inline cfun-the-closure-set! ::cfun ::obj)
    (inline cfun-top?::bool ::cfun)
    (inline cfun-top?-set! ::cfun ::bool)
    (inline cfun-stack-allocator::obj ::cfun)
    (inline cfun-stack-allocator-set! ::cfun ::obj)
    (inline cfun-predicate-of::obj ::cfun)
    (inline cfun-predicate-of-set! ::cfun ::obj)
    (inline cfun-side-effect::obj ::cfun)
    (inline cfun-side-effect-set! ::cfun ::obj)
    (inline cfun-arity::long ::cfun))))

;; svar
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-svar::svar loc1230::obj)
    (inline svar?::bool ::obj)
    (svar-nil::svar)
    (inline svar-loc::obj ::svar)
    (inline svar-loc-set! ::svar ::obj))))

;; scnst
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-scnst::scnst node1226::obj class1227::obj loc1228::obj)
    (inline scnst?::bool ::obj)
    (scnst-nil::scnst)
    (inline scnst-loc::obj ::scnst)
    (inline scnst-loc-set! ::scnst ::obj)
    (inline scnst-class::obj ::scnst)
    (inline scnst-class-set! ::scnst ::obj)
    (inline scnst-node::obj ::scnst))))

;; cvar
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cvar::cvar macro?1224::bool)
    (inline cvar?::bool ::obj)
    (cvar-nil::cvar)
    (inline cvar-macro?::bool ::cvar))))

;; sexit
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-sexit::sexit handler1221::obj detached?1222::bool)
    (inline sexit?::bool ::obj)
    (sexit-nil::sexit)
    (inline sexit-detached?::bool ::sexit)
    (inline sexit-detached?-set! ::sexit ::bool)
    (inline sexit-handler::obj ::sexit)
    (inline sexit-handler-set! ::sexit ::obj))))

;; feffect
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-feffect::feffect read1218::obj write1219::obj)
    (inline feffect?::bool ::obj)
    (feffect-nil::feffect)
    (inline feffect-write::obj ::feffect)
    (inline feffect-write-set! ::feffect ::obj)
    (inline feffect-read::obj ::feffect)
    (inline feffect-read-set! ::feffect ::obj)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; value
(define-inline (make-value::value) (instantiate::value))
(define-inline (value?::bool obj::obj) ((@ isa? __object) obj (@ value ast_var)))
(define (value-nil::value) (class-nil (@ value ast_var)))

;; variable
(define-inline (make-variable::variable id1303::symbol name1304::obj type1305::type value1306::value access1307::obj fast-alpha1308::obj removable1309::obj occurrence1310::long occurrencew1311::long user?1312::bool) (instantiate::variable (id id1303) (name name1304) (type type1305) (value value1306) (access access1307) (fast-alpha fast-alpha1308) (removable removable1309) (occurrence occurrence1310) (occurrencew occurrencew1311) (user? user?1312)))
(define-inline (variable?::bool obj::obj) ((@ isa? __object) obj (@ variable ast_var)))
(define (variable-nil::variable) (class-nil (@ variable ast_var)))
(define-inline (variable-user?::bool o::variable) (with-access::variable o (user?) user?))
(define-inline (variable-user?-set! o::variable v::bool) (with-access::variable o (user?) (set! user? v)))
(define-inline (variable-occurrencew::long o::variable) (with-access::variable o (occurrencew) occurrencew))
(define-inline (variable-occurrencew-set! o::variable v::long) (with-access::variable o (occurrencew) (set! occurrencew v)))
(define-inline (variable-occurrence::long o::variable) (with-access::variable o (occurrence) occurrence))
(define-inline (variable-occurrence-set! o::variable v::long) (with-access::variable o (occurrence) (set! occurrence v)))
(define-inline (variable-removable::obj o::variable) (with-access::variable o (removable) removable))
(define-inline (variable-removable-set! o::variable v::obj) (with-access::variable o (removable) (set! removable v)))
(define-inline (variable-fast-alpha::obj o::variable) (with-access::variable o (fast-alpha) fast-alpha))
(define-inline (variable-fast-alpha-set! o::variable v::obj) (with-access::variable o (fast-alpha) (set! fast-alpha v)))
(define-inline (variable-access::obj o::variable) (with-access::variable o (access) access))
(define-inline (variable-access-set! o::variable v::obj) (with-access::variable o (access) (set! access v)))
(define-inline (variable-value::value o::variable) (with-access::variable o (value) value))
(define-inline (variable-value-set! o::variable v::value) (with-access::variable o (value) (set! value v)))
(define-inline (variable-type::type o::variable) (with-access::variable o (type) type))
(define-inline (variable-type-set! o::variable v::type) (with-access::variable o (type) (set! type v)))
(define-inline (variable-name::obj o::variable) (with-access::variable o (name) name))
(define-inline (variable-name-set! o::variable v::obj) (with-access::variable o (name) (set! name v)))
(define-inline (variable-id::symbol o::variable) (with-access::variable o (id) id))
(define-inline (variable-id-set! o::variable v::symbol) (with-access::variable o (id) (set! id v)))

;; global
(define-inline (make-global::global id1283::symbol name1284::obj type1285::type value1286::value access1287::obj fast-alpha1288::obj removable1289::obj occurrence1290::long occurrencew1291::long user?1292::bool module1293::symbol import1294::obj evaluable?1295::bool eval?1296::bool library1297::obj pragma1298::obj src1299::obj jvm-type-name1300::bstring init1301::obj) (instantiate::global (id id1283) (name name1284) (type type1285) (value value1286) (access access1287) (fast-alpha fast-alpha1288) (removable removable1289) (occurrence occurrence1290) (occurrencew occurrencew1291) (user? user?1292) (module module1293) (import import1294) (evaluable? evaluable?1295) (eval? eval?1296) (library library1297) (pragma pragma1298) (src src1299) (jvm-type-name jvm-type-name1300) (init init1301)))
(define-inline (global?::bool obj::obj) ((@ isa? __object) obj (@ global ast_var)))
(define (global-nil::global) (class-nil (@ global ast_var)))
(define-inline (global-init::obj o::global) (with-access::global o (init) init))
(define-inline (global-init-set! o::global v::obj) (with-access::global o (init) (set! init v)))
(define-inline (global-jvm-type-name::bstring o::global) (with-access::global o (jvm-type-name) jvm-type-name))
(define-inline (global-jvm-type-name-set! o::global v::bstring) (with-access::global o (jvm-type-name) (set! jvm-type-name v)))
(define-inline (global-src::obj o::global) (with-access::global o (src) src))
(define-inline (global-src-set! o::global v::obj) (with-access::global o (src) (set! src v)))
(define-inline (global-pragma::obj o::global) (with-access::global o (pragma) pragma))
(define-inline (global-pragma-set! o::global v::obj) (with-access::global o (pragma) (set! pragma v)))
(define-inline (global-library::obj o::global) (with-access::global o (library) library))
(define-inline (global-library-set! o::global v::obj) (with-access::global o (library) (set! library v)))
(define-inline (global-eval?::bool o::global) (with-access::global o (eval?) eval?))
(define-inline (global-eval?-set! o::global v::bool) (with-access::global o (eval?) (set! eval? v)))
(define-inline (global-evaluable?::bool o::global) (with-access::global o (evaluable?) evaluable?))
(define-inline (global-evaluable?-set! o::global v::bool) (with-access::global o (evaluable?) (set! evaluable? v)))
(define-inline (global-import::obj o::global) (with-access::global o (import) import))
(define-inline (global-import-set! o::global v::obj) (with-access::global o (import) (set! import v)))
(define-inline (global-module::symbol o::global) (with-access::global o (module) module))
(define-inline (global-module-set! o::global v::symbol) (with-access::global o (module) (set! module v)))
(define-inline (global-user?::bool o::global) (with-access::global o (user?) user?))
(define-inline (global-user?-set! o::global v::bool) (with-access::global o (user?) (set! user? v)))
(define-inline (global-occurrencew::long o::global) (with-access::global o (occurrencew) occurrencew))
(define-inline (global-occurrencew-set! o::global v::long) (with-access::global o (occurrencew) (set! occurrencew v)))
(define-inline (global-occurrence::long o::global) (with-access::global o (occurrence) occurrence))
(define-inline (global-occurrence-set! o::global v::long) (with-access::global o (occurrence) (set! occurrence v)))
(define-inline (global-removable::obj o::global) (with-access::global o (removable) removable))
(define-inline (global-removable-set! o::global v::obj) (with-access::global o (removable) (set! removable v)))
(define-inline (global-fast-alpha::obj o::global) (with-access::global o (fast-alpha) fast-alpha))
(define-inline (global-fast-alpha-set! o::global v::obj) (with-access::global o (fast-alpha) (set! fast-alpha v)))
(define-inline (global-access::obj o::global) (with-access::global o (access) access))
(define-inline (global-access-set! o::global v::obj) (with-access::global o (access) (set! access v)))
(define-inline (global-value::value o::global) (with-access::global o (value) value))
(define-inline (global-value-set! o::global v::value) (with-access::global o (value) (set! value v)))
(define-inline (global-type::type o::global) (with-access::global o (type) type))
(define-inline (global-type-set! o::global v::type) (with-access::global o (type) (set! type v)))
(define-inline (global-name::obj o::global) (with-access::global o (name) name))
(define-inline (global-name-set! o::global v::obj) (with-access::global o (name) (set! name v)))
(define-inline (global-id::symbol o::global) (with-access::global o (id) id))
(define-inline (global-id-set! o::global v::symbol) (with-access::global o (id) (set! id v)))

;; local
(define-inline (make-local::local id1271::symbol name1272::obj type1273::type value1274::value access1275::obj fast-alpha1276::obj removable1277::obj occurrence1278::long occurrencew1279::long user?1280::bool key1281::long) (instantiate::local (id id1271) (name name1272) (type type1273) (value value1274) (access access1275) (fast-alpha fast-alpha1276) (removable removable1277) (occurrence occurrence1278) (occurrencew occurrencew1279) (user? user?1280) (key key1281)))
(define-inline (local?::bool obj::obj) ((@ isa? __object) obj (@ local ast_var)))
(define (local-nil::local) (class-nil (@ local ast_var)))
(define-inline (local-key::long o::local) (with-access::local o (key) key))
(define-inline (local-key-set! o::local v::long) (with-access::local o (key) (set! key v)))
(define-inline (local-user?::bool o::local) (with-access::local o (user?) user?))
(define-inline (local-user?-set! o::local v::bool) (with-access::local o (user?) (set! user? v)))
(define-inline (local-occurrencew::long o::local) (with-access::local o (occurrencew) occurrencew))
(define-inline (local-occurrencew-set! o::local v::long) (with-access::local o (occurrencew) (set! occurrencew v)))
(define-inline (local-occurrence::long o::local) (with-access::local o (occurrence) occurrence))
(define-inline (local-occurrence-set! o::local v::long) (with-access::local o (occurrence) (set! occurrence v)))
(define-inline (local-removable::obj o::local) (with-access::local o (removable) removable))
(define-inline (local-removable-set! o::local v::obj) (with-access::local o (removable) (set! removable v)))
(define-inline (local-fast-alpha::obj o::local) (with-access::local o (fast-alpha) fast-alpha))
(define-inline (local-fast-alpha-set! o::local v::obj) (with-access::local o (fast-alpha) (set! fast-alpha v)))
(define-inline (local-access::obj o::local) (with-access::local o (access) access))
(define-inline (local-access-set! o::local v::obj) (with-access::local o (access) (set! access v)))
(define-inline (local-value::value o::local) (with-access::local o (value) value))
(define-inline (local-value-set! o::local v::value) (with-access::local o (value) (set! value v)))
(define-inline (local-type::type o::local) (with-access::local o (type) type))
(define-inline (local-type-set! o::local v::type) (with-access::local o (type) (set! type v)))
(define-inline (local-name::obj o::local) (with-access::local o (name) name))
(define-inline (local-name-set! o::local v::obj) (with-access::local o (name) (set! name v)))
(define-inline (local-id::symbol o::local) (with-access::local o (id) id))
(define-inline (local-id-set! o::local v::symbol) (with-access::local o (id) (set! id v)))

;; fun
(define-inline (make-fun::fun arity1263::long side-effect1264::obj predicate-of1265::obj stack-allocator1266::obj top?1267::bool the-closure1268::obj effect1269::obj) (instantiate::fun (arity arity1263) (side-effect side-effect1264) (predicate-of predicate-of1265) (stack-allocator stack-allocator1266) (top? top?1267) (the-closure the-closure1268) (effect effect1269)))
(define-inline (fun?::bool obj::obj) ((@ isa? __object) obj (@ fun ast_var)))
(define (fun-nil::fun) (class-nil (@ fun ast_var)))
(define-inline (fun-effect::obj o::fun) (with-access::fun o (effect) effect))
(define-inline (fun-effect-set! o::fun v::obj) (with-access::fun o (effect) (set! effect v)))
(define-inline (fun-the-closure::obj o::fun) (with-access::fun o (the-closure) the-closure))
(define-inline (fun-the-closure-set! o::fun v::obj) (with-access::fun o (the-closure) (set! the-closure v)))
(define-inline (fun-top?::bool o::fun) (with-access::fun o (top?) top?))
(define-inline (fun-top?-set! o::fun v::bool) (with-access::fun o (top?) (set! top? v)))
(define-inline (fun-stack-allocator::obj o::fun) (with-access::fun o (stack-allocator) stack-allocator))
(define-inline (fun-stack-allocator-set! o::fun v::obj) (with-access::fun o (stack-allocator) (set! stack-allocator v)))
(define-inline (fun-predicate-of::obj o::fun) (with-access::fun o (predicate-of) predicate-of))
(define-inline (fun-predicate-of-set! o::fun v::obj) (with-access::fun o (predicate-of) (set! predicate-of v)))
(define-inline (fun-side-effect::obj o::fun) (with-access::fun o (side-effect) side-effect))
(define-inline (fun-side-effect-set! o::fun v::obj) (with-access::fun o (side-effect) (set! side-effect v)))
(define-inline (fun-arity::long o::fun) (with-access::fun o (arity) arity))
(define-inline (fun-arity-set! o::fun v::long) (with-access::fun o (arity) (set! arity v)))

;; sfun
(define-inline (make-sfun::sfun arity1244::long side-effect1245::obj predicate-of1246::obj stack-allocator1247::obj top?1248::bool the-closure1249::obj effect1250::obj property1251::obj args1252::obj args-name1253::obj body1254::obj class1255::obj dsssl-keywords1256::obj loc1257::obj optionals1258::obj keys1259::obj the-closure-global1260::obj strength1261::symbol) (instantiate::sfun (arity arity1244) (side-effect side-effect1245) (predicate-of predicate-of1246) (stack-allocator stack-allocator1247) (top? top?1248) (the-closure the-closure1249) (effect effect1250) (property property1251) (args args1252) (args-name args-name1253) (body body1254) (class class1255) (dsssl-keywords dsssl-keywords1256) (loc loc1257) (optionals optionals1258) (keys keys1259) (the-closure-global the-closure-global1260) (strength strength1261)))
(define-inline (sfun?::bool obj::obj) ((@ isa? __object) obj (@ sfun ast_var)))
(define (sfun-nil::sfun) (class-nil (@ sfun ast_var)))
(define-inline (sfun-strength::symbol o::sfun) (with-access::sfun o (strength) strength))
(define-inline (sfun-strength-set! o::sfun v::symbol) (with-access::sfun o (strength) (set! strength v)))
(define-inline (sfun-the-closure-global::obj o::sfun) (with-access::sfun o (the-closure-global) the-closure-global))
(define-inline (sfun-the-closure-global-set! o::sfun v::obj) (with-access::sfun o (the-closure-global) (set! the-closure-global v)))
(define-inline (sfun-keys::obj o::sfun) (with-access::sfun o (keys) keys))
(define-inline (sfun-keys-set! o::sfun v::obj) (with-access::sfun o (keys) (set! keys v)))
(define-inline (sfun-optionals::obj o::sfun) (with-access::sfun o (optionals) optionals))
(define-inline (sfun-optionals-set! o::sfun v::obj) (with-access::sfun o (optionals) (set! optionals v)))
(define-inline (sfun-loc::obj o::sfun) (with-access::sfun o (loc) loc))
(define-inline (sfun-loc-set! o::sfun v::obj) (with-access::sfun o (loc) (set! loc v)))
(define-inline (sfun-dsssl-keywords::obj o::sfun) (with-access::sfun o (dsssl-keywords) dsssl-keywords))
(define-inline (sfun-dsssl-keywords-set! o::sfun v::obj) (with-access::sfun o (dsssl-keywords) (set! dsssl-keywords v)))
(define-inline (sfun-class::obj o::sfun) (with-access::sfun o (class) class))
(define-inline (sfun-class-set! o::sfun v::obj) (with-access::sfun o (class) (set! class v)))
(define-inline (sfun-body::obj o::sfun) (with-access::sfun o (body) body))
(define-inline (sfun-body-set! o::sfun v::obj) (with-access::sfun o (body) (set! body v)))
(define-inline (sfun-args-name::obj o::sfun) (with-access::sfun o (args-name) args-name))
(define-inline (sfun-args-name-set! o::sfun v::obj) (with-access::sfun o (args-name) (set! args-name v)))
(define-inline (sfun-args::obj o::sfun) (with-access::sfun o (args) args))
(define-inline (sfun-args-set! o::sfun v::obj) (with-access::sfun o (args) (set! args v)))
(define-inline (sfun-property::obj o::sfun) (with-access::sfun o (property) property))
(define-inline (sfun-property-set! o::sfun v::obj) (with-access::sfun o (property) (set! property v)))
(define-inline (sfun-effect::obj o::sfun) (with-access::sfun o (effect) effect))
(define-inline (sfun-effect-set! o::sfun v::obj) (with-access::sfun o (effect) (set! effect v)))
(define-inline (sfun-the-closure::obj o::sfun) (with-access::sfun o (the-closure) the-closure))
(define-inline (sfun-the-closure-set! o::sfun v::obj) (with-access::sfun o (the-closure) (set! the-closure v)))
(define-inline (sfun-top?::bool o::sfun) (with-access::sfun o (top?) top?))
(define-inline (sfun-top?-set! o::sfun v::bool) (with-access::sfun o (top?) (set! top? v)))
(define-inline (sfun-stack-allocator::obj o::sfun) (with-access::sfun o (stack-allocator) stack-allocator))
(define-inline (sfun-stack-allocator-set! o::sfun v::obj) (with-access::sfun o (stack-allocator) (set! stack-allocator v)))
(define-inline (sfun-predicate-of::obj o::sfun) (with-access::sfun o (predicate-of) predicate-of))
(define-inline (sfun-predicate-of-set! o::sfun v::obj) (with-access::sfun o (predicate-of) (set! predicate-of v)))
(define-inline (sfun-side-effect::obj o::sfun) (with-access::sfun o (side-effect) side-effect))
(define-inline (sfun-side-effect-set! o::sfun v::obj) (with-access::sfun o (side-effect) (set! side-effect v)))
(define-inline (sfun-arity::long o::sfun) (with-access::sfun o (arity) arity))
(define-inline (sfun-arity-set! o::sfun v::long) (with-access::sfun o (arity) (set! arity v)))

;; cfun
(define-inline (make-cfun::cfun arity1232::long side-effect1233::obj predicate-of1234::obj stack-allocator1235::obj top?1236::bool the-closure1237::obj effect1238::obj args-type1239::obj macro?1240::bool infix?1241::bool method1242::pair-nil) (instantiate::cfun (arity arity1232) (side-effect side-effect1233) (predicate-of predicate-of1234) (stack-allocator stack-allocator1235) (top? top?1236) (the-closure the-closure1237) (effect effect1238) (args-type args-type1239) (macro? macro?1240) (infix? infix?1241) (method method1242)))
(define-inline (cfun?::bool obj::obj) ((@ isa? __object) obj (@ cfun ast_var)))
(define (cfun-nil::cfun) (class-nil (@ cfun ast_var)))
(define-inline (cfun-method::pair-nil o::cfun) (with-access::cfun o (method) method))
(define-inline (cfun-method-set! o::cfun v::pair-nil) (with-access::cfun o (method) (set! method v)))
(define-inline (cfun-infix?::bool o::cfun) (with-access::cfun o (infix?) infix?))
(define-inline (cfun-infix?-set! o::cfun v::bool) (with-access::cfun o (infix?) (set! infix? v)))
(define-inline (cfun-macro?::bool o::cfun) (with-access::cfun o (macro?) macro?))
(define-inline (cfun-macro?-set! o::cfun v::bool) (with-access::cfun o (macro?) (set! macro? v)))
(define-inline (cfun-args-type::obj o::cfun) (with-access::cfun o (args-type) args-type))
(define-inline (cfun-args-type-set! o::cfun v::obj) (with-access::cfun o (args-type) (set! args-type v)))
(define-inline (cfun-effect::obj o::cfun) (with-access::cfun o (effect) effect))
(define-inline (cfun-effect-set! o::cfun v::obj) (with-access::cfun o (effect) (set! effect v)))
(define-inline (cfun-the-closure::obj o::cfun) (with-access::cfun o (the-closure) the-closure))
(define-inline (cfun-the-closure-set! o::cfun v::obj) (with-access::cfun o (the-closure) (set! the-closure v)))
(define-inline (cfun-top?::bool o::cfun) (with-access::cfun o (top?) top?))
(define-inline (cfun-top?-set! o::cfun v::bool) (with-access::cfun o (top?) (set! top? v)))
(define-inline (cfun-stack-allocator::obj o::cfun) (with-access::cfun o (stack-allocator) stack-allocator))
(define-inline (cfun-stack-allocator-set! o::cfun v::obj) (with-access::cfun o (stack-allocator) (set! stack-allocator v)))
(define-inline (cfun-predicate-of::obj o::cfun) (with-access::cfun o (predicate-of) predicate-of))
(define-inline (cfun-predicate-of-set! o::cfun v::obj) (with-access::cfun o (predicate-of) (set! predicate-of v)))
(define-inline (cfun-side-effect::obj o::cfun) (with-access::cfun o (side-effect) side-effect))
(define-inline (cfun-side-effect-set! o::cfun v::obj) (with-access::cfun o (side-effect) (set! side-effect v)))
(define-inline (cfun-arity::long o::cfun) (with-access::cfun o (arity) arity))
(define-inline (cfun-arity-set! o::cfun v::long) (with-access::cfun o (arity) (set! arity v)))

;; svar
(define-inline (make-svar::svar loc1230::obj) (instantiate::svar (loc loc1230)))
(define-inline (svar?::bool obj::obj) ((@ isa? __object) obj (@ svar ast_var)))
(define (svar-nil::svar) (class-nil (@ svar ast_var)))
(define-inline (svar-loc::obj o::svar) (with-access::svar o (loc) loc))
(define-inline (svar-loc-set! o::svar v::obj) (with-access::svar o (loc) (set! loc v)))

;; scnst
(define-inline (make-scnst::scnst node1226::obj class1227::obj loc1228::obj) (instantiate::scnst (node node1226) (class class1227) (loc loc1228)))
(define-inline (scnst?::bool obj::obj) ((@ isa? __object) obj (@ scnst ast_var)))
(define (scnst-nil::scnst) (class-nil (@ scnst ast_var)))
(define-inline (scnst-loc::obj o::scnst) (with-access::scnst o (loc) loc))
(define-inline (scnst-loc-set! o::scnst v::obj) (with-access::scnst o (loc) (set! loc v)))
(define-inline (scnst-class::obj o::scnst) (with-access::scnst o (class) class))
(define-inline (scnst-class-set! o::scnst v::obj) (with-access::scnst o (class) (set! class v)))
(define-inline (scnst-node::obj o::scnst) (with-access::scnst o (node) node))
(define-inline (scnst-node-set! o::scnst v::obj) (with-access::scnst o (node) (set! node v)))

;; cvar
(define-inline (make-cvar::cvar macro?1224::bool) (instantiate::cvar (macro? macro?1224)))
(define-inline (cvar?::bool obj::obj) ((@ isa? __object) obj (@ cvar ast_var)))
(define (cvar-nil::cvar) (class-nil (@ cvar ast_var)))
(define-inline (cvar-macro?::bool o::cvar) (with-access::cvar o (macro?) macro?))
(define-inline (cvar-macro?-set! o::cvar v::bool) (with-access::cvar o (macro?) (set! macro? v)))

;; sexit
(define-inline (make-sexit::sexit handler1221::obj detached?1222::bool) (instantiate::sexit (handler handler1221) (detached? detached?1222)))
(define-inline (sexit?::bool obj::obj) ((@ isa? __object) obj (@ sexit ast_var)))
(define (sexit-nil::sexit) (class-nil (@ sexit ast_var)))
(define-inline (sexit-detached?::bool o::sexit) (with-access::sexit o (detached?) detached?))
(define-inline (sexit-detached?-set! o::sexit v::bool) (with-access::sexit o (detached?) (set! detached? v)))
(define-inline (sexit-handler::obj o::sexit) (with-access::sexit o (handler) handler))
(define-inline (sexit-handler-set! o::sexit v::obj) (with-access::sexit o (handler) (set! handler v)))

;; feffect
(define-inline (make-feffect::feffect read1218::obj write1219::obj) (instantiate::feffect (read read1218) (write write1219)))
(define-inline (feffect?::bool obj::obj) ((@ isa? __object) obj (@ feffect ast_var)))
(define (feffect-nil::feffect) (class-nil (@ feffect ast_var)))
(define-inline (feffect-write::obj o::feffect) (with-access::feffect o (write) write))
(define-inline (feffect-write-set! o::feffect v::obj) (with-access::feffect o (write) (set! write v)))
(define-inline (feffect-read::obj o::feffect) (with-access::feffect o (read) read))
(define-inline (feffect-read-set! o::feffect v::obj) (with-access::feffect o (read) (set! read v)))
))
