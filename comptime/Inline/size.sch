;; ==========================================================
;; Class accessors
;; Bigloo (3.7b)
;; Inria -- Sophia Antipolis     Mon Nov 14 16:42:36 CET 2011 
;; (bigloo.new -classgen Inline/size.scm)
;; ==========================================================

;; The directives
(directives

;; sized-sequence
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (static
    (inline make-sized-sequence::sized-sequence loc1229::obj type1230::type side-effect1231::obj key1232::obj nodes1233::obj unsafe1234::bool size1235::long)
    (inline sized-sequence?::bool ::obj)
    (sized-sequence-nil::sized-sequence)
    (inline sized-sequence-size::long ::sized-sequence)
    (inline sized-sequence-unsafe::bool ::sized-sequence)
    (inline sized-sequence-nodes::obj ::sized-sequence)
    (inline sized-sequence-key::obj ::sized-sequence)
    (inline sized-sequence-key-set! ::sized-sequence ::obj)
    (inline sized-sequence-side-effect::obj ::sized-sequence)
    (inline sized-sequence-side-effect-set! ::sized-sequence ::obj)
    (inline sized-sequence-type::type ::sized-sequence)
    (inline sized-sequence-type-set! ::sized-sequence ::type)
    (inline sized-sequence-loc::obj ::sized-sequence))))

;; sized-select
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (static
    (inline make-sized-select::sized-select loc1219::obj type1220::type side-effect1221::obj key1222::obj test1223::node clauses1224::obj item-type1225::type size1226::long)
    (inline sized-select?::bool ::obj)
    (sized-select-nil::sized-select)
    (inline sized-select-size::long ::sized-select)
    (inline sized-select-item-type::type ::sized-select)
    (inline sized-select-clauses::obj ::sized-select)
    (inline sized-select-test::node ::sized-select)
    (inline sized-select-test-set! ::sized-select ::node)
    (inline sized-select-key::obj ::sized-select)
    (inline sized-select-key-set! ::sized-select ::obj)
    (inline sized-select-side-effect::obj ::sized-select)
    (inline sized-select-side-effect-set! ::sized-select ::obj)
    (inline sized-select-type::type ::sized-select)
    (inline sized-select-type-set! ::sized-select ::type)
    (inline sized-select-loc::obj ::sized-select))))

;; sized-let-fun
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (static
    (inline make-sized-let-fun::sized-let-fun loc1211::obj type1212::type side-effect1213::obj key1214::obj locals1215::obj body1216::node size1217::long)
    (inline sized-let-fun?::bool ::obj)
    (sized-let-fun-nil::sized-let-fun)
    (inline sized-let-fun-size::long ::sized-let-fun)
    (inline sized-let-fun-body::node ::sized-let-fun)
    (inline sized-let-fun-body-set! ::sized-let-fun ::node)
    (inline sized-let-fun-locals::obj ::sized-let-fun)
    (inline sized-let-fun-locals-set! ::sized-let-fun ::obj)
    (inline sized-let-fun-key::obj ::sized-let-fun)
    (inline sized-let-fun-key-set! ::sized-let-fun ::obj)
    (inline sized-let-fun-side-effect::obj ::sized-let-fun)
    (inline sized-let-fun-side-effect-set! ::sized-let-fun ::obj)
    (inline sized-let-fun-type::type ::sized-let-fun)
    (inline sized-let-fun-type-set! ::sized-let-fun ::type)
    (inline sized-let-fun-loc::obj ::sized-let-fun))))

;; sized-let-var
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (static
    (inline make-sized-let-var::sized-let-var loc1202::obj type1203::type side-effect1204::obj key1205::obj bindings1206::obj body1207::node removable?1208::bool size1209::long)
    (inline sized-let-var?::bool ::obj)
    (sized-let-var-nil::sized-let-var)
    (inline sized-let-var-size::long ::sized-let-var)
    (inline sized-let-var-removable?::bool ::sized-let-var)
    (inline sized-let-var-removable?-set! ::sized-let-var ::bool)
    (inline sized-let-var-body::node ::sized-let-var)
    (inline sized-let-var-body-set! ::sized-let-var ::node)
    (inline sized-let-var-bindings::obj ::sized-let-var)
    (inline sized-let-var-bindings-set! ::sized-let-var ::obj)
    (inline sized-let-var-key::obj ::sized-let-var)
    (inline sized-let-var-key-set! ::sized-let-var ::obj)
    (inline sized-let-var-side-effect::obj ::sized-let-var)
    (inline sized-let-var-side-effect-set! ::sized-let-var ::obj)
    (inline sized-let-var-type::type ::sized-let-var)
    (inline sized-let-var-type-set! ::sized-let-var ::type)
    (inline sized-let-var-loc::obj ::sized-let-var)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; sized-sequence
(define-inline (make-sized-sequence::sized-sequence loc1229::obj type1230::type side-effect1231::obj key1232::obj nodes1233::obj unsafe1234::bool size1235::long) (instantiate::sized-sequence (loc loc1229) (type type1230) (side-effect side-effect1231) (key key1232) (nodes nodes1233) (unsafe unsafe1234) (size size1235)))
(define-inline (sized-sequence?::bool obj::obj) ((@ isa? __object) obj (@ sized-sequence inline_size)))
(define (sized-sequence-nil::sized-sequence) (class-nil (@ sized-sequence inline_size)))
(define-inline (sized-sequence-size::long o::sized-sequence) (with-access::sized-sequence o (size) size))
(define-inline (sized-sequence-size-set! o::sized-sequence v::long) (with-access::sized-sequence o (size) (set! size v)))
(define-inline (sized-sequence-unsafe::bool o::sized-sequence) (with-access::sized-sequence o (unsafe) unsafe))
(define-inline (sized-sequence-unsafe-set! o::sized-sequence v::bool) (with-access::sized-sequence o (unsafe) (set! unsafe v)))
(define-inline (sized-sequence-nodes::obj o::sized-sequence) (with-access::sized-sequence o (nodes) nodes))
(define-inline (sized-sequence-nodes-set! o::sized-sequence v::obj) (with-access::sized-sequence o (nodes) (set! nodes v)))
(define-inline (sized-sequence-key::obj o::sized-sequence) (with-access::sized-sequence o (key) key))
(define-inline (sized-sequence-key-set! o::sized-sequence v::obj) (with-access::sized-sequence o (key) (set! key v)))
(define-inline (sized-sequence-side-effect::obj o::sized-sequence) (with-access::sized-sequence o (side-effect) side-effect))
(define-inline (sized-sequence-side-effect-set! o::sized-sequence v::obj) (with-access::sized-sequence o (side-effect) (set! side-effect v)))
(define-inline (sized-sequence-type::type o::sized-sequence) (with-access::sized-sequence o (type) type))
(define-inline (sized-sequence-type-set! o::sized-sequence v::type) (with-access::sized-sequence o (type) (set! type v)))
(define-inline (sized-sequence-loc::obj o::sized-sequence) (with-access::sized-sequence o (loc) loc))
(define-inline (sized-sequence-loc-set! o::sized-sequence v::obj) (with-access::sized-sequence o (loc) (set! loc v)))

;; sized-select
(define-inline (make-sized-select::sized-select loc1219::obj type1220::type side-effect1221::obj key1222::obj test1223::node clauses1224::obj item-type1225::type size1226::long) (instantiate::sized-select (loc loc1219) (type type1220) (side-effect side-effect1221) (key key1222) (test test1223) (clauses clauses1224) (item-type item-type1225) (size size1226)))
(define-inline (sized-select?::bool obj::obj) ((@ isa? __object) obj (@ sized-select inline_size)))
(define (sized-select-nil::sized-select) (class-nil (@ sized-select inline_size)))
(define-inline (sized-select-size::long o::sized-select) (with-access::sized-select o (size) size))
(define-inline (sized-select-size-set! o::sized-select v::long) (with-access::sized-select o (size) (set! size v)))
(define-inline (sized-select-item-type::type o::sized-select) (with-access::sized-select o (item-type) item-type))
(define-inline (sized-select-item-type-set! o::sized-select v::type) (with-access::sized-select o (item-type) (set! item-type v)))
(define-inline (sized-select-clauses::obj o::sized-select) (with-access::sized-select o (clauses) clauses))
(define-inline (sized-select-clauses-set! o::sized-select v::obj) (with-access::sized-select o (clauses) (set! clauses v)))
(define-inline (sized-select-test::node o::sized-select) (with-access::sized-select o (test) test))
(define-inline (sized-select-test-set! o::sized-select v::node) (with-access::sized-select o (test) (set! test v)))
(define-inline (sized-select-key::obj o::sized-select) (with-access::sized-select o (key) key))
(define-inline (sized-select-key-set! o::sized-select v::obj) (with-access::sized-select o (key) (set! key v)))
(define-inline (sized-select-side-effect::obj o::sized-select) (with-access::sized-select o (side-effect) side-effect))
(define-inline (sized-select-side-effect-set! o::sized-select v::obj) (with-access::sized-select o (side-effect) (set! side-effect v)))
(define-inline (sized-select-type::type o::sized-select) (with-access::sized-select o (type) type))
(define-inline (sized-select-type-set! o::sized-select v::type) (with-access::sized-select o (type) (set! type v)))
(define-inline (sized-select-loc::obj o::sized-select) (with-access::sized-select o (loc) loc))
(define-inline (sized-select-loc-set! o::sized-select v::obj) (with-access::sized-select o (loc) (set! loc v)))

;; sized-let-fun
(define-inline (make-sized-let-fun::sized-let-fun loc1211::obj type1212::type side-effect1213::obj key1214::obj locals1215::obj body1216::node size1217::long) (instantiate::sized-let-fun (loc loc1211) (type type1212) (side-effect side-effect1213) (key key1214) (locals locals1215) (body body1216) (size size1217)))
(define-inline (sized-let-fun?::bool obj::obj) ((@ isa? __object) obj (@ sized-let-fun inline_size)))
(define (sized-let-fun-nil::sized-let-fun) (class-nil (@ sized-let-fun inline_size)))
(define-inline (sized-let-fun-size::long o::sized-let-fun) (with-access::sized-let-fun o (size) size))
(define-inline (sized-let-fun-size-set! o::sized-let-fun v::long) (with-access::sized-let-fun o (size) (set! size v)))
(define-inline (sized-let-fun-body::node o::sized-let-fun) (with-access::sized-let-fun o (body) body))
(define-inline (sized-let-fun-body-set! o::sized-let-fun v::node) (with-access::sized-let-fun o (body) (set! body v)))
(define-inline (sized-let-fun-locals::obj o::sized-let-fun) (with-access::sized-let-fun o (locals) locals))
(define-inline (sized-let-fun-locals-set! o::sized-let-fun v::obj) (with-access::sized-let-fun o (locals) (set! locals v)))
(define-inline (sized-let-fun-key::obj o::sized-let-fun) (with-access::sized-let-fun o (key) key))
(define-inline (sized-let-fun-key-set! o::sized-let-fun v::obj) (with-access::sized-let-fun o (key) (set! key v)))
(define-inline (sized-let-fun-side-effect::obj o::sized-let-fun) (with-access::sized-let-fun o (side-effect) side-effect))
(define-inline (sized-let-fun-side-effect-set! o::sized-let-fun v::obj) (with-access::sized-let-fun o (side-effect) (set! side-effect v)))
(define-inline (sized-let-fun-type::type o::sized-let-fun) (with-access::sized-let-fun o (type) type))
(define-inline (sized-let-fun-type-set! o::sized-let-fun v::type) (with-access::sized-let-fun o (type) (set! type v)))
(define-inline (sized-let-fun-loc::obj o::sized-let-fun) (with-access::sized-let-fun o (loc) loc))
(define-inline (sized-let-fun-loc-set! o::sized-let-fun v::obj) (with-access::sized-let-fun o (loc) (set! loc v)))

;; sized-let-var
(define-inline (make-sized-let-var::sized-let-var loc1202::obj type1203::type side-effect1204::obj key1205::obj bindings1206::obj body1207::node removable?1208::bool size1209::long) (instantiate::sized-let-var (loc loc1202) (type type1203) (side-effect side-effect1204) (key key1205) (bindings bindings1206) (body body1207) (removable? removable?1208) (size size1209)))
(define-inline (sized-let-var?::bool obj::obj) ((@ isa? __object) obj (@ sized-let-var inline_size)))
(define (sized-let-var-nil::sized-let-var) (class-nil (@ sized-let-var inline_size)))
(define-inline (sized-let-var-size::long o::sized-let-var) (with-access::sized-let-var o (size) size))
(define-inline (sized-let-var-size-set! o::sized-let-var v::long) (with-access::sized-let-var o (size) (set! size v)))
(define-inline (sized-let-var-removable?::bool o::sized-let-var) (with-access::sized-let-var o (removable?) removable?))
(define-inline (sized-let-var-removable?-set! o::sized-let-var v::bool) (with-access::sized-let-var o (removable?) (set! removable? v)))
(define-inline (sized-let-var-body::node o::sized-let-var) (with-access::sized-let-var o (body) body))
(define-inline (sized-let-var-body-set! o::sized-let-var v::node) (with-access::sized-let-var o (body) (set! body v)))
(define-inline (sized-let-var-bindings::obj o::sized-let-var) (with-access::sized-let-var o (bindings) bindings))
(define-inline (sized-let-var-bindings-set! o::sized-let-var v::obj) (with-access::sized-let-var o (bindings) (set! bindings v)))
(define-inline (sized-let-var-key::obj o::sized-let-var) (with-access::sized-let-var o (key) key))
(define-inline (sized-let-var-key-set! o::sized-let-var v::obj) (with-access::sized-let-var o (key) (set! key v)))
(define-inline (sized-let-var-side-effect::obj o::sized-let-var) (with-access::sized-let-var o (side-effect) side-effect))
(define-inline (sized-let-var-side-effect-set! o::sized-let-var v::obj) (with-access::sized-let-var o (side-effect) (set! side-effect v)))
(define-inline (sized-let-var-type::type o::sized-let-var) (with-access::sized-let-var o (type) type))
(define-inline (sized-let-var-type-set! o::sized-let-var v::type) (with-access::sized-let-var o (type) (set! type v)))
(define-inline (sized-let-var-loc::obj o::sized-let-var) (with-access::sized-let-var o (loc) loc))
(define-inline (sized-let-var-loc-set! o::sized-let-var v::obj) (with-access::sized-let-var o (loc) (set! loc v)))
))
